{"version":3,"sources":["components/render-page/iframe-renderer-to-editor-communicator.ts","components/editor-page/renderer-pane/yaml-array-deprecation-alert.tsx","components/editor-page/synced-scroll/hooks/use-synced-scrolling.ts","components/editor-page/synced-scroll/hooks/use-on-user-scroll.ts","components/editor-page/synced-scroll/hooks/use-scroll-to-line-mark.ts","components/editor-page/synced-scroll/utils.ts","components/editor-page/table-of-contents/build-react-dom-from-toc-ast.tsx","components/editor-page/table-of-contents/table-of-contents.tsx","components/render-page/markdown-document.tsx","components/render-page/render-page.tsx","components/render-page/hooks/use-image-click-handler.ts","redux/note-details/methods.ts","hooks/common/use-apply-dark-mode.ts"],"names":["IframeRendererToEditorCommunicator","onSetMarkdownContentHandler","onSetDarkModeHandler","onSetScrollStateHandler","onSetBaseConfigurationHandler","handler","this","sendMessageToOtherSide","type","RenderIframeMessageType","RENDERER_READY","lineInMarkdown","checked","ON_TASK_CHECKBOX_CHANGE","firstHeading","ON_FIRST_HEADING_CHANGE","SET_SCROLL_SOURCE_TO_RENDERER","frontmatter","ON_SET_FRONTMATTER","scrollState","SET_SCROLL_STATE","details","IMAGE_CLICKED","height","ON_HEIGHT_CHANGE","event","renderMessage","data","SET_MARKDOWN_CONTENT","content","SET_DARKMODE","activated","SET_BASE_CONFIGURATION","baseConfiguration","IframeCommunicator","YamlArrayDeprecationAlert","useTranslation","yamlDeprecatedTags","useSelector","state","noteDetails","deprecatedTagsSyntax","condition","Alert","data-cy","className","variant","dir","Trans","i18nKey","href","links","faq","useSyncedScrolling","outerContainerRef","rendererRef","numberOfLines","onScroll","useState","lineMarks","setLineMarks","onLineMarkerPositionChanged","useCallback","linkMarkerPositions","current","documentRenderPaneTop","offsetTop","offset","adjustedLineMakerPositions","map","oldMarker","line","position","onUserScroll","scrollContainer","length","scrollTop","lineMarksBeforeScrollTop","filter","lineMark","lineMarksAfterScrollTop","beforeLineMark","reduce","prevLineMark","currentLineMark","afterLineMark","componentHeight","distanceToBefore","percentageRaw","lineCount","Math","floor","lineHeight","innerScrolling","firstLineInView","scrolledPercentage","useOnUserScroll","contentLineCount","lastScrollPosition","useRef","scrollTo","targetPosition","top","useEffect","offsetHeight","lineNumber","lastMarkBefore","firstMarkAfter","i","currentMark","findLineMarks","positionBefore","positionAfter","lastMarkBeforeLine","correctedPosition","useScrollToLineMark","buildReactDomFromTocAst","toc","levelsToShowUnderThis","headerCounts","wrapInListItem","baseUrl","rawName","n","trim","nameCount","get","slug","tocSlugify","headlineUrl","URL","toString","set","l","title","onClick","createJumpToMarkClickEventHandler","substr","c","child","TableOfContents","ast","maxDepth","tocTree","useMemo","Map","MarkdownDocument","additionalOuterContainerClasses","additionalRendererClasses","onFirstHeadingChange","onFrontmatterChange","onMakeScrollSource","onTaskCheckedChange","markdownContent","onImageClick","onHeightChange","disableToc","rendererSize","useResizeObserver","ref","internalDocumentRenderPaneRef","containerWidth","width","tocAst","setTocAst","useAlternativeBreaks","breaks","split","onMouseEnter","onTocChange","Dropdown","drop","Toggle","id","icon","Menu","RenderPage","useApplyDarkMode","setMarkdownContent","setScrollState","undefined","setBaseConfiguration","editorOrigin","config","iframeCommunication","iframeCommunicator","newCommunicator","setOtherSide","window","parent","sendRendererReady","unregisterEventListener","onSetBaseConfiguration","onSetMarkdownContent","onSetDarkMode","setDarkMode","onSetScrollState","sendTaskCheckBoxChange","sendFirstHeadingChanged","sendSetScrollSourceToRenderer","setNoteFrontmatter","sendSetFrontmatter","sendSetScrollState","image","target","src","sendClickedImageUrl","alt","useImageClickHandler","sendHeightChange","rendererType","RendererType","DOCUMENT","INTRO","setNoteMarkdownContent","store","dispatch","NoteDetailsActionType","SET_DOCUMENT_CONTENT","setNoteDataFromServer","apiResponse","SET_NOTE_DATA_FROM_SERVER","note","updateNoteTitleByFirstHeading","UPDATE_NOTE_TITLE_BY_FIRST_HEADING","initialState","SET_NOTE_FRONTMATTER","SetCheckboxInMarkdownContent","SET_CHECKBOX_IN_MARKDOWN_CONTENT","darkModeActivated","useIsDarkModeActivated","document","body","classList","add","remove"],"mappings":"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","file":"static/js/renderPage.def2925a.chunk.js","sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { NoteFrontmatter } from '../editor-page/note-frontmatter/note-frontmatter'\nimport { ScrollState } from '../editor-page/synced-scroll/scroll-props'\nimport { IframeCommunicator } from './iframe-communicator'\nimport {\n  BaseConfiguration,\n  EditorToRendererIframeMessage,\n  ImageDetails,\n  RendererToEditorIframeMessage,\n  RenderIframeMessageType\n} from './rendering-message'\n\nexport class IframeRendererToEditorCommunicator extends IframeCommunicator<RendererToEditorIframeMessage, EditorToRendererIframeMessage> {\n  private onSetMarkdownContentHandler?: ((markdownContent: string) => void)\n  private onSetDarkModeHandler?: ((darkModeActivated: boolean) => void)\n  private onSetScrollStateHandler?: ((scrollState: ScrollState) => void)\n  private onSetBaseConfigurationHandler?: ((baseConfiguration: BaseConfiguration) => void)\n\n  public onSetBaseConfiguration(handler?: (baseConfiguration: BaseConfiguration) => void): void {\n    this.onSetBaseConfigurationHandler = handler\n  }\n\n  public onSetMarkdownContent(handler?: (markdownContent: string) => void): void {\n    this.onSetMarkdownContentHandler = handler\n  }\n\n  public onSetDarkMode(handler?: (darkModeActivated: boolean) => void): void {\n    this.onSetDarkModeHandler = handler\n  }\n\n  public onSetScrollState(handler?: (scrollState: ScrollState) => void): void {\n    this.onSetScrollStateHandler = handler\n  }\n\n  public sendRendererReady(): void {\n    this.sendMessageToOtherSide({\n      type: RenderIframeMessageType.RENDERER_READY\n    })\n  }\n\n  public sendTaskCheckBoxChange(lineInMarkdown: number, checked: boolean): void {\n    this.sendMessageToOtherSide({\n      type: RenderIframeMessageType.ON_TASK_CHECKBOX_CHANGE,\n      checked,\n      lineInMarkdown\n    })\n  }\n\n  public sendFirstHeadingChanged(firstHeading: string | undefined): void {\n    this.sendMessageToOtherSide({\n      type: RenderIframeMessageType.ON_FIRST_HEADING_CHANGE,\n      firstHeading\n    })\n  }\n\n  public sendSetScrollSourceToRenderer(): void {\n    this.sendMessageToOtherSide({\n      type: RenderIframeMessageType.SET_SCROLL_SOURCE_TO_RENDERER\n    })\n  }\n\n  public sendSetFrontmatter(frontmatter: NoteFrontmatter | undefined): void {\n    this.sendMessageToOtherSide({\n      type: RenderIframeMessageType.ON_SET_FRONTMATTER,\n      frontmatter: frontmatter\n    })\n  }\n\n  public sendSetScrollState(scrollState: ScrollState): void {\n    this.sendMessageToOtherSide({\n      type: RenderIframeMessageType.SET_SCROLL_STATE,\n      scrollState\n    })\n  }\n\n  public sendClickedImageUrl(details: ImageDetails): void {\n    this.sendMessageToOtherSide({\n      type: RenderIframeMessageType.IMAGE_CLICKED,\n      details: details\n    })\n  }\n\n  public sendHeightChange(height: number): void {\n    this.sendMessageToOtherSide({\n      type: RenderIframeMessageType.ON_HEIGHT_CHANGE,\n      height\n    })\n  }\n\n  protected handleEvent(event: MessageEvent<EditorToRendererIframeMessage>): boolean | undefined {\n    const renderMessage = event.data\n    switch (renderMessage.type) {\n      case RenderIframeMessageType.SET_MARKDOWN_CONTENT:\n        this.onSetMarkdownContentHandler?.(renderMessage.content)\n        return false\n      case RenderIframeMessageType.SET_DARKMODE:\n        this.onSetDarkModeHandler?.(renderMessage.activated)\n        return false\n      case RenderIframeMessageType.SET_SCROLL_STATE:\n        this.onSetScrollStateHandler?.(renderMessage.scrollState)\n        return false\n      case RenderIframeMessageType.SET_BASE_CONFIGURATION:\n        this.onSetBaseConfigurationHandler?.(renderMessage.baseConfiguration)\n        return false\n    }\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { Alert } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\nimport links from '../../../links.json'\nimport { ApplicationState } from '../../../redux'\nimport { TranslatedExternalLink } from '../../common/links/translated-external-link'\nimport { ShowIf } from '../../common/show-if/show-if'\n\nexport const YamlArrayDeprecationAlert: React.FC = () => {\n  useTranslation()\n  const yamlDeprecatedTags = useSelector((state: ApplicationState) => state.noteDetails.frontmatter.deprecatedTagsSyntax)\n\n  return <ShowIf condition={ yamlDeprecatedTags }>\n    <Alert data-cy={ 'yamlArrayDeprecationAlert' } className={ 'text-wrap' } variant='warning' dir='auto'>\n        <span className={ 'text-wrap' }>\n          <span className={ 'text-wrap' }>\n        <Trans i18nKey='editor.deprecatedTags'/>\n        </span>\n      </span>\n      <br/>\n      <TranslatedExternalLink i18nKey={ 'common.readForMoreInfo' } href={ links.faq } className={ 'text-primary' }/>\n    </Alert>\n  </ShowIf>\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useState } from 'react'\nimport { LineMarkerPosition } from '../../../markdown-renderer/types'\nimport { ScrollState } from '../scroll-props'\nimport { useOnUserScroll } from './use-on-user-scroll'\nimport { useScrollToLineMark } from './use-scroll-to-line-mark'\n\nexport const useSyncedScrolling = (outerContainerRef: React.RefObject<HTMLElement>,\n  rendererRef: React.RefObject<HTMLElement>,\n  numberOfLines: number,\n  scrollState?: ScrollState,\n  onScroll?: (scrollState: ScrollState) => void): [(lineMarkers: LineMarkerPosition[]) => void, () => void] => {\n  const [lineMarks, setLineMarks] = useState<LineMarkerPosition[]>()\n\n  const onLineMarkerPositionChanged = useCallback((linkMarkerPositions: LineMarkerPosition[]) => {\n    if (!outerContainerRef.current || !rendererRef.current) {\n      return\n    }\n    const documentRenderPaneTop = (outerContainerRef.current.offsetTop ?? 0)\n    const rendererTop = (rendererRef.current.offsetTop ?? 0)\n    const offset = rendererTop - documentRenderPaneTop\n    const adjustedLineMakerPositions = linkMarkerPositions.map(oldMarker => ({\n      line: oldMarker.line,\n      position: oldMarker.position + offset\n    }))\n    setLineMarks(adjustedLineMakerPositions)\n  }, [outerContainerRef, rendererRef])\n\n  const onUserScroll = useOnUserScroll(lineMarks, outerContainerRef, onScroll)\n  useScrollToLineMark(scrollState, lineMarks, numberOfLines, outerContainerRef)\n\n  return [onLineMarkerPositionChanged, onUserScroll]\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { RefObject, useCallback } from 'react'\nimport { LineMarkerPosition } from '../../../markdown-renderer/types'\nimport { ScrollState } from '../scroll-props'\n\nexport const useOnUserScroll = (lineMarks: LineMarkerPosition[] | undefined, scrollContainer: RefObject<HTMLElement>, onScroll: ((newScrollState: ScrollState) => void) | undefined): () => void => {\n  return useCallback(() => {\n    if (!scrollContainer.current || !lineMarks || lineMarks.length === 0 || !onScroll) {\n      return\n    }\n\n    const scrollTop = scrollContainer.current.scrollTop\n\n    const lineMarksBeforeScrollTop = lineMarks.filter(lineMark => lineMark.position <= scrollTop)\n    if (lineMarksBeforeScrollTop.length === 0) {\n      return\n    }\n\n    const lineMarksAfterScrollTop = lineMarks.filter(lineMark => lineMark.position > scrollTop)\n    if (lineMarksAfterScrollTop.length === 0) {\n      return\n    }\n\n    const beforeLineMark = lineMarksBeforeScrollTop\n      .reduce((prevLineMark, currentLineMark) =>\n        prevLineMark.line >= currentLineMark.line ? prevLineMark : currentLineMark)\n\n    const afterLineMark = lineMarksAfterScrollTop\n      .reduce((prevLineMark, currentLineMark) =>\n        prevLineMark.line < currentLineMark.line ? prevLineMark : currentLineMark)\n\n    const componentHeight = afterLineMark.position - beforeLineMark.position\n    const distanceToBefore = scrollTop - beforeLineMark.position\n    const percentageRaw = (distanceToBefore / componentHeight)\n    const lineCount = afterLineMark.line - beforeLineMark.line\n    const line = Math.floor(lineCount * percentageRaw + beforeLineMark.line)\n    const lineHeight = componentHeight / lineCount\n    const innerScrolling = Math.floor((distanceToBefore % lineHeight) / lineHeight * 100)\n\n    const newScrollState: ScrollState = { firstLineInView: line, scrolledPercentage: innerScrolling }\n    onScroll(newScrollState)\n  }, [lineMarks, onScroll, scrollContainer])\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { RefObject, useCallback, useEffect, useRef } from 'react'\nimport { LineMarkerPosition } from '../../../markdown-renderer/types'\nimport { ScrollState } from '../scroll-props'\nimport { findLineMarks } from '../utils'\n\nexport const useScrollToLineMark = (scrollState: ScrollState | undefined, lineMarks: LineMarkerPosition[] | undefined, contentLineCount: number, scrollContainer: RefObject<HTMLElement>): void => {\n  const lastScrollPosition = useRef<number>()\n\n  const scrollTo = useCallback((targetPosition: number): void => {\n    if (!scrollContainer.current || targetPosition === lastScrollPosition.current) {\n      return\n    }\n    lastScrollPosition.current = targetPosition\n    scrollContainer.current.scrollTo({\n      top: targetPosition\n    })\n  }, [scrollContainer])\n\n  useEffect(() => {\n    if (!scrollContainer.current || !lineMarks || lineMarks.length === 0 || !scrollState) {\n      return\n    }\n    if (scrollState.firstLineInView < lineMarks[0].line) {\n      scrollTo(0)\n      return\n    }\n    if (scrollState.firstLineInView > lineMarks[lineMarks.length - 1].line) {\n      scrollTo(scrollContainer.current.offsetHeight)\n      return\n    }\n    const { lastMarkBefore, firstMarkAfter } = findLineMarks(lineMarks, scrollState.firstLineInView)\n    const positionBefore = lastMarkBefore ? lastMarkBefore.position : lineMarks[0].position\n    const positionAfter = firstMarkAfter ? firstMarkAfter.position : scrollContainer.current.offsetHeight\n    const lastMarkBeforeLine = lastMarkBefore ? lastMarkBefore.line : 1\n    const firstMarkAfterLine = firstMarkAfter ? firstMarkAfter.line : contentLineCount\n    const linesBetweenMarkers = firstMarkAfterLine - lastMarkBeforeLine\n    const blockHeight = positionAfter - positionBefore\n    const lineHeight = blockHeight / linesBetweenMarkers\n    const position = positionBefore + (scrollState.firstLineInView - lastMarkBeforeLine) * lineHeight + scrollState.scrolledPercentage / 100 * lineHeight\n    const correctedPosition = Math.floor(position)\n    scrollTo(correctedPosition)\n  }, [contentLineCount, lineMarks, scrollContainer, scrollState, scrollTo])\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { LineMarkerPosition } from '../../markdown-renderer/types'\n\nexport const findLineMarks = (lineMarks: LineMarkerPosition[], lineNumber: number): { lastMarkBefore: LineMarkerPosition | undefined, firstMarkAfter: LineMarkerPosition | undefined } => {\n  let lastMarkBefore\n  let firstMarkAfter\n  for (let i = 0; i < lineMarks.length; i++) {\n    const currentMark = lineMarks[i]\n    if (!currentMark) {\n      continue\n    }\n\n    if (currentMark.line <= lineNumber) {\n      lastMarkBefore = currentMark\n    }\n    if (currentMark.line > lineNumber) {\n      firstMarkAfter = currentMark\n    }\n    if (!!firstMarkAfter && !!lastMarkBefore) {\n      break\n    }\n  }\n  return {\n    lastMarkBefore,\n    firstMarkAfter\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { TocAst } from 'markdown-it-toc-done-right'\nimport React, { Fragment, ReactElement } from 'react'\nimport { ShowIf } from '../../common/show-if/show-if'\nimport { createJumpToMarkClickEventHandler } from '../../markdown-renderer/replace-components/link-replacer/link-replacer'\nimport { tocSlugify } from './toc-slugify'\n\nexport const buildReactDomFromTocAst = (toc: TocAst, levelsToShowUnderThis: number, headerCounts: Map<string, number>,\n  wrapInListItem: boolean, baseUrl?: string): ReactElement | null => {\n  if (levelsToShowUnderThis < 0) {\n    return null\n  }\n\n  const rawName = toc.n.trim()\n  const nameCount = (headerCounts.get(rawName) ?? -1) + 1\n  const slug = `#${ tocSlugify(rawName) }${ nameCount > 0 ? `-${ nameCount }` : '' }`\n  const headlineUrl = new URL(slug, baseUrl).toString()\n\n  headerCounts.set(rawName, nameCount)\n\n  const content = (\n    <Fragment>\n      <ShowIf condition={ toc.l > 0 }>\n        <a href={ headlineUrl } title={ rawName }\n           onClick={ createJumpToMarkClickEventHandler(slug.substr(1)) }>{ rawName }</a>\n      </ShowIf>\n      <ShowIf condition={ toc.c.length > 0 }>\n        <ul>\n          {\n            toc.c.map(child =>\n              (buildReactDomFromTocAst(child, levelsToShowUnderThis - 1, headerCounts, true, baseUrl)))\n          }\n        </ul>\n      </ShowIf>\n    </Fragment>\n  )\n\n  if (wrapInListItem) {\n    return (\n      <li key={ headlineUrl }>\n        { content }\n      </li>\n    )\n  } else {\n    return content\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { TocAst } from 'markdown-it-toc-done-right'\nimport React, { useMemo } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { ShowIf } from '../../common/show-if/show-if'\nimport { buildReactDomFromTocAst } from './build-react-dom-from-toc-ast'\nimport './table-of-contents.scss'\n\nexport interface TableOfContentsProps {\n  ast: TocAst\n  maxDepth?: number\n  className?: string\n  baseUrl?: string\n}\n\nexport const TableOfContents: React.FC<TableOfContentsProps> = ({\n  ast,\n  maxDepth = 3,\n  className,\n  baseUrl\n}) => {\n  useTranslation()\n  const tocTree = useMemo(() => buildReactDomFromTocAst(ast, maxDepth, new Map<string, number>(), false, baseUrl), [ast,\n    maxDepth,\n    baseUrl])\n\n  return (\n    <div className={ `markdown-toc ${ className ?? '' }` }>\n      <ShowIf condition={ ast.c.length === 0 }>\n        <Trans i18nKey={ 'editor.infoToc' }/>\n      </ShowIf>\n      { tocTree }\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { TocAst } from 'markdown-it-toc-done-right'\nimport React, { MutableRefObject, useEffect, useMemo, useRef, useState } from 'react'\nimport { Dropdown } from 'react-bootstrap'\nimport useResizeObserver from 'use-resize-observer'\nimport { ForkAwesomeIcon } from '../common/fork-awesome/fork-awesome-icon'\nimport { ShowIf } from '../common/show-if/show-if'\nimport { NoteFrontmatter } from '../editor-page/note-frontmatter/note-frontmatter'\nimport { YamlArrayDeprecationAlert } from '../editor-page/renderer-pane/yaml-array-deprecation-alert'\nimport { useSyncedScrolling } from '../editor-page/synced-scroll/hooks/use-synced-scrolling'\nimport { ScrollProps } from '../editor-page/synced-scroll/scroll-props'\nimport { TableOfContents } from '../editor-page/table-of-contents/table-of-contents'\nimport { BasicMarkdownRenderer } from '../markdown-renderer/basic-markdown-renderer'\nimport { ImageClickHandler } from '../markdown-renderer/replace-components/image/image-replacer'\nimport './markdown-document.scss'\nimport { useSelector } from 'react-redux'\nimport { ApplicationState } from '../../redux'\n\nexport interface RendererProps extends ScrollProps {\n  onFirstHeadingChange?: (firstHeading: string | undefined) => void\n  onFrontmatterChange?: (frontmatter: NoteFrontmatter | undefined) => void\n  onTaskCheckedChange?: (lineInMarkdown: number, checked: boolean) => void\n  documentRenderPaneRef?: MutableRefObject<HTMLDivElement | null>\n  markdownContent: string,\n  baseUrl?: string\n  onImageClick?: ImageClickHandler\n  onHeightChange?: (height: number) => void\n  disableToc?: boolean\n}\n\nexport interface MarkdownDocumentProps extends RendererProps {\n  additionalOuterContainerClasses?: string\n  additionalRendererClasses?: string\n}\n\nexport const MarkdownDocument: React.FC<MarkdownDocumentProps> = (\n  {\n    additionalOuterContainerClasses,\n    additionalRendererClasses,\n    onFirstHeadingChange,\n    onFrontmatterChange,\n    onMakeScrollSource,\n    onTaskCheckedChange,\n    baseUrl,\n    markdownContent,\n    onImageClick,\n    onScroll,\n    scrollState,\n    onHeightChange,\n    disableToc\n  }) => {\n  const rendererRef = useRef<HTMLDivElement | null>(null)\n  const rendererSize = useResizeObserver({ ref: rendererRef.current })\n\n  const internalDocumentRenderPaneRef = useRef<HTMLDivElement>(null)\n  const internalDocumentRenderPaneSize = useResizeObserver({ ref: internalDocumentRenderPaneRef.current })\n  const containerWidth = internalDocumentRenderPaneSize.width ?? 0\n\n  const [tocAst, setTocAst] = useState<TocAst>()\n\n  const useAlternativeBreaks = useSelector((state: ApplicationState) => state.noteDetails.frontmatter.breaks)\n\n  useEffect(() => {\n    if (!onHeightChange) {\n      return\n    }\n    onHeightChange(rendererSize.height ? rendererSize.height + 1 : 0)\n  }, [rendererSize.height, onHeightChange])\n\n  const contentLineCount = useMemo(() => markdownContent.split('\\n').length, [markdownContent])\n  const [onLineMarkerPositionChanged, onUserScroll] = useSyncedScrolling(internalDocumentRenderPaneRef, rendererRef, contentLineCount, scrollState, onScroll)\n\n  return (\n    <div className={ `markdown-document ${ additionalOuterContainerClasses ?? '' }` }\n         ref={ internalDocumentRenderPaneRef } onScroll={ onUserScroll } onMouseEnter={ onMakeScrollSource }>\n      <div className={ 'markdown-document-side' }/>\n      <div className={ 'markdown-document-content' }>\n        <YamlArrayDeprecationAlert/>\n        <BasicMarkdownRenderer\n          outerContainerRef={ rendererRef }\n          className={ `mb-3 ${ additionalRendererClasses ?? '' }` }\n          content={ markdownContent }\n          onFirstHeadingChange={ onFirstHeadingChange }\n          onLineMarkerPositionChanged={ onLineMarkerPositionChanged }\n          onFrontmatterChange={ onFrontmatterChange }\n          onTaskCheckedChange={ onTaskCheckedChange }\n          onTocChange={ setTocAst }\n          baseUrl={ baseUrl }\n          onImageClick={ onImageClick }\n          useAlternativeBreaks={ useAlternativeBreaks }/>\n      </div>\n      <div className={ 'markdown-document-side pt-4' }>\n        <ShowIf condition={ !!tocAst && !disableToc }>\n          <ShowIf condition={ containerWidth >= 1100 }>\n            <TableOfContents ast={ tocAst as TocAst } className={ 'sticky' } baseUrl={ baseUrl }/>\n          </ShowIf>\n          <ShowIf condition={ containerWidth < 1100 }>\n            <div className={ 'markdown-toc-sidebar-button' }>\n              <Dropdown drop={ 'up' }>\n                <Dropdown.Toggle id=\"toc-overlay-button\" variant={ 'secondary' } className={ 'no-arrow' }>\n                  <ForkAwesomeIcon icon={ 'list-ol' }/>\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                  <div className={ 'p-2' }>\n                    <TableOfContents ast={ tocAst as TocAst } baseUrl={ baseUrl }/>\n                  </div>\n                </Dropdown.Menu>\n              </Dropdown>\n            </div>\n          </ShowIf>\n        </ShowIf>\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useApplyDarkMode } from '../../hooks/common/use-apply-dark-mode'\nimport { ApplicationState } from '../../redux'\nimport { setDarkMode } from '../../redux/dark-mode/methods'\nimport { setNoteFrontmatter } from '../../redux/note-details/methods'\nimport { NoteFrontmatter } from '../editor-page/note-frontmatter/note-frontmatter'\nimport { ScrollState } from '../editor-page/synced-scroll/scroll-props'\nimport { ImageClickHandler } from '../markdown-renderer/replace-components/image/image-replacer'\nimport { useImageClickHandler } from './hooks/use-image-click-handler'\nimport { IframeRendererToEditorCommunicator } from './iframe-renderer-to-editor-communicator'\nimport { MarkdownDocument } from './markdown-document'\nimport { BaseConfiguration, RendererType } from './rendering-message'\n\nexport const RenderPage: React.FC = () => {\n  useApplyDarkMode()\n\n  const [markdownContent, setMarkdownContent] = useState('')\n  const [scrollState, setScrollState] = useState<ScrollState>({ firstLineInView: 1, scrolledPercentage: 0 })\n  const [baseConfiguration, setBaseConfiguration] = useState<BaseConfiguration | undefined>(undefined)\n\n  const editorOrigin = useSelector((state: ApplicationState) => state.config.iframeCommunication.editorOrigin)\n\n  const iframeCommunicator = useMemo(() => {\n    const newCommunicator = new IframeRendererToEditorCommunicator()\n    newCommunicator.setOtherSide(window.parent, editorOrigin)\n    return newCommunicator\n  }, [editorOrigin])\n\n  useEffect(() => {\n    iframeCommunicator.sendRendererReady()\n    return () => iframeCommunicator.unregisterEventListener()\n  }, [iframeCommunicator])\n\n  useEffect(() => iframeCommunicator.onSetBaseConfiguration(setBaseConfiguration), [iframeCommunicator])\n  useEffect(() => iframeCommunicator.onSetMarkdownContent(setMarkdownContent), [iframeCommunicator])\n  useEffect(() => iframeCommunicator.onSetDarkMode(setDarkMode), [iframeCommunicator])\n  useEffect(() => iframeCommunicator.onSetScrollState(setScrollState), [iframeCommunicator, scrollState])\n\n  const onTaskCheckedChange = useCallback((lineInMarkdown: number, checked: boolean) => {\n    iframeCommunicator.sendTaskCheckBoxChange(lineInMarkdown, checked)\n  }, [iframeCommunicator])\n\n  const onFirstHeadingChange = useCallback((firstHeading?: string) => {\n    iframeCommunicator.sendFirstHeadingChanged(firstHeading)\n  }, [iframeCommunicator])\n\n  const onMakeScrollSource = useCallback(() => {\n    iframeCommunicator.sendSetScrollSourceToRenderer()\n  }, [iframeCommunicator])\n\n  const onFrontmatterChange = useCallback((frontmatter?: NoteFrontmatter) => {\n    setNoteFrontmatter(frontmatter)\n    iframeCommunicator.sendSetFrontmatter(frontmatter)\n  }, [iframeCommunicator])\n\n  const onScroll = useCallback((scrollState: ScrollState) => {\n    iframeCommunicator.sendSetScrollState(scrollState)\n  }, [iframeCommunicator])\n\n  const onImageClick: ImageClickHandler = useImageClickHandler(iframeCommunicator)\n\n  const onHeightChange = useCallback((height: number) => {\n    iframeCommunicator.sendHeightChange(height)\n  }, [iframeCommunicator])\n\n  if (!baseConfiguration) {\n    return null\n  }\n\n  switch (baseConfiguration.rendererType) {\n    case RendererType.DOCUMENT:\n      return (\n        <MarkdownDocument\n          additionalOuterContainerClasses={ 'vh-100 bg-light' }\n          markdownContent={ markdownContent }\n          onTaskCheckedChange={ onTaskCheckedChange }\n          onFirstHeadingChange={ onFirstHeadingChange }\n          onMakeScrollSource={ onMakeScrollSource }\n          onFrontmatterChange={ onFrontmatterChange }\n          scrollState={ scrollState }\n          onScroll={ onScroll }\n          baseUrl={ baseConfiguration.baseUrl }\n          onImageClick={ onImageClick }/>\n      )\n    case RendererType.INTRO:\n      return (\n        <MarkdownDocument\n          additionalOuterContainerClasses={ 'vh-100 bg-light overflow-y-hidden' }\n          markdownContent={ markdownContent }\n          baseUrl={ baseConfiguration.baseUrl }\n          onImageClick={ onImageClick }\n          disableToc={ true }\n          onHeightChange={ onHeightChange }/>\n      )\n    default:\n      return null\n  }\n}\n\nexport default RenderPage\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback } from 'react'\nimport { ImageClickHandler } from '../../markdown-renderer/replace-components/image/image-replacer'\nimport { IframeRendererToEditorCommunicator } from '../iframe-renderer-to-editor-communicator'\n\nexport const useImageClickHandler = (iframeCommunicator: IframeRendererToEditorCommunicator): ImageClickHandler => {\n  return useCallback((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\n    const image = event.target as HTMLImageElement\n    if (image.src === '') {\n      return\n    }\n    iframeCommunicator.sendClickedImageUrl({\n      src: image.src,\n      alt: image.alt,\n      title: image.title\n    })\n  }, [iframeCommunicator])\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { store } from '..'\nimport { Note } from '../../api/notes'\nimport { NoteFrontmatter } from '../../components/editor-page/note-frontmatter/note-frontmatter'\nimport { initialState } from './reducers'\nimport {\n  NoteDetailsActionType,\n  SetCheckboxInMarkdownContentAction,\n  SetNoteDetailsAction,\n  SetNoteDetailsFromServerAction,\n  SetNoteFrontmatterFromRenderingAction,\n  UpdateNoteTitleByFirstHeadingAction\n} from './types'\n\nexport const setNoteMarkdownContent = (content: string): void => {\n  store.dispatch({\n    type: NoteDetailsActionType.SET_DOCUMENT_CONTENT,\n    content\n  } as SetNoteDetailsAction)\n}\n\nexport const setNoteDataFromServer = (apiResponse: Note): void => {\n  store.dispatch({\n    type: NoteDetailsActionType.SET_NOTE_DATA_FROM_SERVER,\n    note: apiResponse\n  } as SetNoteDetailsFromServerAction)\n}\n\nexport const updateNoteTitleByFirstHeading = (firstHeading?: string): void => {\n  store.dispatch({\n    type: NoteDetailsActionType.UPDATE_NOTE_TITLE_BY_FIRST_HEADING,\n    firstHeading: firstHeading\n  } as UpdateNoteTitleByFirstHeadingAction)\n}\n\nexport const setNoteFrontmatter = (frontmatter: NoteFrontmatter | undefined): void => {\n  if (!frontmatter) {\n    frontmatter = initialState.frontmatter\n  }\n  store.dispatch({\n    type: NoteDetailsActionType.SET_NOTE_FRONTMATTER,\n    frontmatter: frontmatter\n  } as SetNoteFrontmatterFromRenderingAction)\n}\n\nexport const SetCheckboxInMarkdownContent = (lineInMarkdown: number, checked: boolean): void => {\n  store.dispatch({\n    type: NoteDetailsActionType.SET_CHECKBOX_IN_MARKDOWN_CONTENT,\n    checked: checked,\n    lineInMarkdown: lineInMarkdown\n  } as SetCheckboxInMarkdownContentAction)\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { useEffect } from 'react'\nimport { useIsDarkModeActivated } from './use-is-dark-mode-activated'\n\nexport const useApplyDarkMode = (): void => {\n  const darkModeActivated = useIsDarkModeActivated()\n\n  useEffect(() => {\n    if (darkModeActivated) {\n      window.document.body.classList.add('dark')\n    } else {\n      window.document.body.classList.remove('dark')\n    }\n    return () => {\n      window.document.body.classList.remove('dark')\n    }\n  }, [darkModeActivated])\n}\n"],"sourceRoot":""}