{"version":3,"sources":["components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-input.tsx","components/editor-page/editor-modals/max-length-warning-modal.tsx","components/editor-page/editor-pane/autocompletion/code-block.ts","components/editor-page/editor-pane/autocompletion/collapsable-block.ts","components/editor-page/editor-pane/autocompletion/container.ts","components/editor-page/editor-pane/tool-bar/emoji-picker/forkawesome.png","components/editor-page/editor-pane/tool-bar/emoji-picker/emoji-picker.tsx","components/editor-page/editor-pane/tool-bar/utils/emojiUtils.ts","components/editor-page/editor-pane/autocompletion/emoji.ts","components/editor-page/editor-pane/autocompletion/header.ts","components/editor-page/editor-pane/autocompletion/image.ts","components/editor-page/editor-pane/autocompletion/link-and-extra-tag.ts","components/editor-page/editor-pane/autocompletion/pdf.ts","components/editor-page/editor-pane/autocompletion/index.ts","components/common/number-range/number-range.ts","components/editor-page/editor-pane/tool-bar/utils/toolbarButtonUtils.ts","components/editor-page/editor-pane/key-map.ts","components/editor-page/editor-pane/status-bar/status-bar.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-property.ts","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-boolean-property.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-ligatures-select.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-number-property.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-select-property.tsx","components/editor-page/sidebar/types.ts","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-smart-paste-select.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preferences.tsx","components/editor-page/editor-pane/tool-bar/emoji-picker/emoji-picker-button.tsx","components/editor-page/editor-pane/tool-bar/table-picker/custom-table-size-modal.tsx","components/editor-page/editor-pane/tool-bar/table-picker/table-picker.tsx","components/editor-page/editor-pane/tool-bar/table-picker/table-picker-button.tsx","components/editor-page/sidebar/upload-input.tsx","components/common/upload-image-mimetypes.ts","components/editor-page/editor-pane/upload-handler.ts","components/editor-page/editor-pane/tool-bar/upload-image-button.tsx","components/editor-page/editor-pane/tool-bar/tool-bar.tsx","components/editor-page/editor-pane/tool-bar/utils/pasteHandlers.ts","components/editor-page/editor-pane/tool-bar/utils/codefenceDetection.ts","components/editor-page/editor-pane/table-extractor.ts","components/editor-page/editor-pane/editor-pane.tsx","components/editor-page/hooks/useViewModeShortcuts.ts","components/editor-page/sidebar/sidebar-button.tsx","components/editor-page/sidebar/delete-note-sidebar-entry.tsx","components/editor-page/document-bar/document-info/unitalic-bold-text.tsx","components/editor-page/document-bar/document-info/document-info-modal.tsx","components/editor-page/sidebar/document-info-sidebar-entry.tsx","components/editor-page/sidebar/export-markdown-sidebar-entry.tsx","components/editor-page/sidebar/sidebar-menu.tsx","components/editor-page/sidebar/export-menu-sidebar-menu.tsx","components/editor-page/document-bar/permissions/permission-group-entry.tsx","components/editor-page/sidebar/import-markdown-sidebar-entry.tsx","components/editor-page/sidebar/import-menu-sidebar-menu.tsx","components/common/cache/cache.ts","api/users/index.ts","components/editor-page/document-bar/permissions/permission-list.tsx","components/editor-page/sidebar/users-online-sidebar-menu/active-indicator.tsx","components/editor-page/document-bar/permissions/permission-modal.tsx","components/editor-page/sidebar/permissions-sidebar-entry.tsx","components/editor-page/sidebar/pin-note-sidebar-entry.tsx","api/revisions/index.ts","components/editor-page/document-bar/revisions/revision-modal-list-entry.tsx","components/editor-page/document-bar/revisions/revision-modal.tsx","components/editor-page/document-bar/revisions/utils.ts","components/editor-page/sidebar/revision-sidebar-entry.tsx","components/editor-page/document-bar/share/share-modal.tsx","components/editor-page/sidebar/share-sidebar-entry.tsx","components/editor-page/editor-page.tsx","components/editor-page/sidebar/users-online-sidebar-menu/user-line.tsx","components/editor-page/sidebar/users-online-sidebar-menu/users-online-sidebar-menu.tsx","components/editor-page/sidebar/sidebar.tsx","components/editor-page/splitter/split-divider/split-divider.tsx","components/editor-page/splitter/splitter.tsx","components/editor-page/use-notification-test.tsx","components/editor-page/hooks/useEditorModeFromUrl.ts","components/editor-page/hooks/useUpdateLocalHistoryEntry.ts"],"names":["EditorPreferenceInputType","MaxLengthWarningModal","show","onHide","maxLength","useTranslation","data-cy","titleI18nKey","closeButton","Modal","Body","Trans","i18nKey","values","className","Footer","Button","onClick","wordRegExp","allSupportedLanguages","CodeBlockHinter","hint","editor","then","hljs","Promise","resolve","searchTerm","findWordAtCursor","searchResult","exec","text","term","length","default","listLanguages","concat","suggestions","search","cursor","getCursor","list","map","suggestion","displayText","from","Pos","line","start","to","end","CollapsableBlockHinter","validAlertLevels","ContainerHinter","filter","startsWith","emojiPickerConfig","customEmoji","Object","keys","ForkAwesomeIcons","name","shortcodes","toLowerCase","url","forkawesomeIcon","category","dataSource","EmojiPicker","onEmojiSelected","onDismiss","darkModeEnabled","useIsDarkModeActivated","pickerContainerRef","useRef","pickerRef","useClickAway","useEffect","current","picker","Picker","shadowRoot","appendChild","style","document","createElement","textContent","twemojiStyle","remove","undefined","emojiClick","event","detail","addEventListener","removeEventListener","setAttribute","removeAttribute","ref","getEmojiShortCode","emoji","skinToneModifier","skins","skinTone","emojiIndex","Database","emojiWordRegex","findEmojiInDatabase","a","getTopFavoriteEmoji","getEmojiBySearchQuery","queryResult","console","error","convertEmojiEventToHint","emojiData","shortCode","render","parent","wrapper","innerHTML","unicode","generateEmojiHints","suggestionList","getPreferredSkinTone","emojiEventDetails","hints","o","EmojiHinter","allSupportedHeaders","allSupportedHeadersTextToInsert","HeaderHinter","indexOf","allSupportedImages","ImageHinter","allSupportedLinks","LinkAndExtraTagHinter","user","getUser","userName","DateTime","local","toFormat","PDFHinter","allowedChars","getLine","ch","test","charAt","slice","forEach","item","push","allHinters","createNumberRangeArray","Array","makeSelectionBold","wrapTextWith","makeSelectionItalic","strikeThroughSelection","underlineSelection","markSelection","symbol","endSymbol","getSelection","ranges","listSelections","range","empty","selection","getRange","replaceRange","head","anchor","setSelections","wrapTextWithOrJustPut","lineNumber","replacement","insertOnStartOfLines","lines","split","join","changeLines","replaceFunction","createList","listMark","i","addLink","prefix","insertAtCursor","f10","setOption","getOption","esc","keyMapName","substr","CodeMirror","Pass","suppressKey","tab","match","spaces","getSelections","execCommand","pos","replaceSelection","defaultKeyMap","isMac","F9","F10","Esc","Enter","Tab","Home","End","defaultState","position","selectedColumns","selectedLines","linesInDocument","charactersInDocument","remainingCharacters","createStatusInfo","maxDocumentLength","getValue","lineCount","StatusBar","t","getLengthTooltip","useMemo","exceeded","remaining","columns","condition","count","title","EditorPreferenceProperty","EditorPreferenceInput","property","type","onChange","value","children","Form","Group","controlId","Label","NUMBER","Control","as","size","EditorPreferenceBooleanProperty","preference","useApplicationState","state","editorConfig","preferences","toString","selectItem","useCallback","selectedItem","target","mergeEditorPreferences","i18nPrefix","SELECT","EditorPreferenceLigaturesSelect","ligaturesEnabled","Boolean","ligatures","saveLigatures","ligaturesActivated","setEditorLigatures","BOOLEAN","EditorPreferenceNumberProperty","Number","parseInt","DocumentSidebarMenuSelection","EditorPreferenceSelectProperty","selections","EditorPreferenceSmartPasteSelect","smartPasteEnabled","smartPaste","saveSmartPaste","smartPasteActivated","setEditorSmartPaste","EditorPreferences","useState","showModal","setShowModal","indentWithTabs","variant","icon","ListGroup","Item","THEME","KEYMAP","INDENT_WITH_TABS","INDENT_UNIT","alert","SPELL_CHECK","EmojiPickerButton","showEmojiPicker","setShowEmojiPicker","addEmoji","old","CustomTableSizeModal","onTablePicked","rows","tableSize","setTableSize","min","placeholder","isInvalid","currentTarget","isNaN","fixedWidth","ModalFooter","disabled","TablePicker","containerRef","showDialog","setShowDialog","role","cols","row","col","onMouseEnter","TablePickerButton","showTablePicker","setShowTablePicker","rowArray","colArray","divider","body","table","addTable","UploadInput","onLoad","acceptedFiles","onClickRef","props","fileInputReference","fileInput","files","file","catch","click","accept","supportedMimeTypes","handleUpload","includes","uploadPlaceholder","i18n","fileName","noteId","store","getState","noteDetails","id","insertCode","uploadFile","link","acceptedMimeTypes","UploadImageButton","clickRef","buttonClick","onUploadImage","ToolBar","ButtonToolbar","ButtonGroup","subscriptSelection","superscriptSelection","addHeaderLevel","addCodeFences","addQuotes","addList","j","addOrderedList","addTaskList","addImage","addLine","addCollapsableBlock","addComment","handleTablePaste","pasteText","clipboardData","getData","codefenceCount","getDoc","isCursorInCodefence","trim","every","tabsPerLines","isTable","preventDefault","markdownTable","pasteData","tableCells","reduce","cellsInRow","index","arrayMaxRows","arrayMaxColumns","Math","max","headRow1","headRow2","repeat","convertClipboardTableToMarkdown","hinter","showHint","completeSingle","completeOnSingleClick","alignWithWord","EditorPane","onContentChange","content","scrollState","onScroll","onMakeScrollSource","config","showMaxLengthWarning","setShowMaxLengthWarning","maxLengthWarningAlreadyShown","setEditor","statusBarInfo","setStatusBarInfo","editorPreferences","lastScrollPosition","editorScroll","setEditorScroll","onEditorScroll","data","onPaste","pasteEditor","handleFilePaste","lineAtHeight","top","startYOfLine","heightAtLine","lineInfo","heightOfLine","handle","height","percentageRaw","percentage","floor","firstLineInView","scrolledPercentage","newPositionRaw","newPosition","scrollTo","onBeforeChange","onEditorDidMount","mountedEditor","onCursorActivity","editorWithActivity","onDrop","dropEditor","pageX","pageY","dataTransfer","left","newCursor","coordsChar","setCursor","onMaxLengthHide","codeMirrorOptions","mode","viewportMargin","styleActiveLine","lineNumbers","lineWrapping","showCursorWhenSelecting","highlightSelectionMatches","inputStyle","matchBrackets","autoCloseBrackets","matchTags","bothTags","autoCloseTags","foldGutter","gutters","extraKeys","flattenSpans","addModeClass","autoRefresh","options","editorDidMount","shortcutHandler","ctrlKey","altKey","key","setEditorMode","EditorMode","BOTH","PREVIEW","EDITOR","SidebarButton","buttonRef","hide","DeleteNoteSidebarEntry","onConfirm","deletionButtonI18nKey","UnitalicBoldText","DocumentInfoModal","assetsBaseUrl","useCustomizeAssetsUrl","DocumentInfoLineWithTimeMode","CREATED","time","minus","days","profileImageSrc","EDITED","minutes","DocumentInfoSidebarEntry","ExportMarkdownSidebarEntry","markdownContent","useNoteMarkdownContent","sanitized","sanitize","noteTitle","download","SidebarMenu","expand","GroupMode","ExportMenuSidebarMenu","menuId","selectedMenuId","NONE","onClickHandler","dir","href","links","faq","rel","ImportMarkdownSidebarEntry","onImportMarkdown","reject","fileReader","FileReader","newContent","result","setNoteMarkdownContent","readAsText","ImportMenuSidebarMenu","Cache","lifetime","maxEntries","entryLifetime","Map","Error","this","has","entry","get","entryCreated","Date","now","delete","next","set","cache","getUserById","userid","fetch","getApiUrl","defaultFetchConfig","response","expectResponseCode","json","userData","put","EditMode","PermissionGroupEntry","editMode","onChangeEditMode","ToggleButtonGroup","ToggleButton","VIEW","EDIT","ActiveIndicatorStatus","PermissionList","identifier","changeEditMode","removeEntry","createEntry","editI18nKey","viewI18nKey","removeI18nKey","addI18nKey","newEntry","setNewEntry","addEntry","canEdit","onSubmit","InputGroup","FormControl","aria-label","permissionsApiResponse","owner","sharedTo","username","sharedToGroup","PermissionModal","setError","userList","setUserList","setOwner","allUserPermissions","setAllUserPermissions","allLoggedInUserPermissions","setAllLoggedInUserPermissions","photo","shareUser","sharedGroup","Alert","userId","PermissionsSidebarEntry","PinNoteSidebarEntry","useParams","history","isPinned","find","pinStatus","onPinClicked","toggleHistoryEntryPinning","showErrorNotification","revisionCache","getRevision","timestamp","cacheKey","revisionData","getAllRevisions","RevisionModalListEntry","active","revision","revisionAuthorListMap","fromMillis","showName","additionalClasses","RevisionModal","revisions","setRevisions","selectedRevisionTimestamp","setSelectedRevisionTimestamp","selectedRevision","setSelectedRevision","fetchedRevisions","authorData","authors","users","author","getUserDataForRevision","fetchedRevision","Row","Col","lg","revisionIndex","oldValue","newValue","splitView","compareMethod","DiffMethod","WORDS","useDarkTheme","window","RevisionSidebarEntry","ShareModal","noteFrontmatter","frontmatter","editorMode","baseUrl","useFrontendBaseUrl","nativeShareButton","NoteType","SLIDE","ShareSidebarEntry","ScrollSource","ActiveIndicator","status","UserLine","color","borderLeftColor","UsersOnlineSidebarMenu","counter","setProperty","INACTIVE","ACTIVE","Sidebar","sideBarRef","selectedMenu","setSelectedMenu","toggleValue","selectionIsNotNone","USERS_ONLINE","IMPORT","EXPORT","SplitDivider","onGrab","onMouseDown","onTouchStart","isMouseEvent","buttons","Splitter","additionalContainerClassName","right","showLeft","showRight","relativeSplitValue","setRelativeSplitValue","cappedRelativeSplitValue","resizingInProgress","splitContainer","onStartResizing","onStopResizing","onMove","moveEvent","newRelativeSize","touches","extractHorizontalPosition","offsetLeft","clientWidth","moveHandler","stopResizeHandler","width","localStorageKey","EditorPage","scrollSource","editorSyncScroll","syncScroll","editorScrollState","rendererScrollState","setScrollState","onMarkdownRendererScroll","newScrollState","RENDERER","useApplyDarkMode","useDocumentTitleWithNoteTitle","useLocation","requestedMode","useEditorModeFromUrl","useLoadNoteFromServer","loading","updateReady","userExists","currentNoteTitle","currentNoteTags","tags","lastNoteTitle","lastNoteTags","equal","lastVisited","origin","HistoryEntryOrigin","LOCAL","REMOTE","toISOString","updateLocalHistoryEntry","useUpdateLocalHistoryEntry","setRendererToScrollSource","setEditorToScrollSource","localStorage","getItem","debug","dispatchUiNotification","DEFAULT_DURATION_IN_SECONDS","label","setItem","leftPane","rightPane","frameClasses","onFirstHeadingChange","updateNoteTitleByFirstHeading","onTaskCheckedChange","setCheckboxInMarkdownContent","onFrontmatterChange","setNoteFrontmatter","rendererType","RendererType","DOCUMENT","AppBarMode","ErrorWhileLoadingNoteAlert","LoadingNoteAlert"],"mappings":"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","file":"static/js/editor.a55ab382.chunk.js","sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React from 'react'\nimport { Form } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\n\nexport enum EditorPreferenceInputType {\n  SELECT,\n  BOOLEAN,\n  NUMBER\n}\n\nexport interface EditorPreferenceInputProps {\n  property: string\n  type: EditorPreferenceInputType\n  onChange: React.ChangeEventHandler<HTMLSelectElement>\n  value?: string | number | string[]\n}\n\nexport const EditorPreferenceInput: React.FC<EditorPreferenceInputProps> = ({\n  property,\n  type,\n  onChange,\n  value,\n  children\n}) => {\n  useTranslation()\n  return (\n    <Form.Group controlId={`editor-pref-${property}`}>\n      <Form.Label>\n        <Trans\n          i18nKey={`editor.modal.preferences.${property}${type === EditorPreferenceInputType.NUMBER ? '' : '.label'}`}\n        />\n      </Form.Label>\n      <Form.Control\n        as={type === EditorPreferenceInputType.NUMBER ? 'input' : 'select'}\n        size='sm'\n        value={value}\n        onChange={onChange}\n        type={type === EditorPreferenceInputType.NUMBER ? 'number' : ''}>\n        {children}\n      </Form.Control>\n    </Form.Group>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { Button, Modal } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { CommonModal } from '../../common/modals/common-modal'\n\nexport interface MaxLengthWarningModalProps {\n  show: boolean\n  onHide: () => void\n  maxLength: number\n}\n\nexport const MaxLengthWarningModal: React.FC<MaxLengthWarningModalProps> = ({ show, onHide, maxLength }) => {\n  useTranslation()\n\n  return (\n    <CommonModal\n      data-cy={'limitReachedModal'}\n      show={show}\n      onHide={onHide}\n      titleI18nKey={'editor.error.limitReached.title'}\n      closeButton={true}>\n      <Modal.Body>\n        <Trans i18nKey={'editor.error.limitReached.description'} values={{ maxLength }} />\n        <strong className='mt-2 d-block'>\n          <Trans i18nKey={'editor.error.limitReached.advice'} />\n        </strong>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>\n          <Trans i18nKey={'common.close'} />\n        </Button>\n      </Modal.Footer>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, Hinter, search } from './index'\n\nconst wordRegExp = /^```((\\w|-|_|\\+)*)$/\nlet allSupportedLanguages: string[] = []\n\nconst codeBlockHint = (editor: Editor): Promise<Hints | null> => {\n  return import(/* webpackChunkName: \"highlight.js\" */ '../../../common/hljs/hljs').then(\n    (hljs) =>\n      new Promise((resolve) => {\n        const searchTerm = findWordAtCursor(editor)\n        const searchResult = wordRegExp.exec(searchTerm.text)\n        if (searchResult === null) {\n          resolve(null)\n          return\n        }\n        const term = searchResult[1]\n        if (allSupportedLanguages.length === 0) {\n          allSupportedLanguages = hljs.default\n            .listLanguages()\n            .concat('csv', 'flow', 'html', 'js', 'markmap', 'abc', 'graphviz', 'mermaid', 'vega-lite')\n        }\n        const suggestions = search(term, allSupportedLanguages)\n        const cursor = editor.getCursor()\n        if (!suggestions) {\n          resolve(null)\n        } else {\n          resolve({\n            list: suggestions.map(\n              (suggestion: string): Hint => ({\n                text: '```' + suggestion + '\\n\\n```\\n',\n                displayText: suggestion\n              })\n            ),\n            from: Pos(cursor.line, searchTerm.start),\n            to: Pos(cursor.line, searchTerm.end)\n          })\n        }\n      })\n  )\n}\n\nexport const CodeBlockHinter: Hinter = {\n  wordRegExp,\n  hint: codeBlockHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^(<d(?:e|et|eta|etai|etail|etails)?)$/\n\nconst collapsableBlockHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const suggestions = ['<details>\\n  <summary>Toggle label</summary>\\n  Toggled content\\n</details>']\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map(\n          (suggestion: string): Hint => ({\n            text: suggestion\n          })\n        ),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end + 1)\n      })\n    }\n  })\n}\n\nexport const CollapsableBlockHinter: Hinter = {\n  wordRegExp,\n  hint: collapsableBlockHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { validAlertLevels } from '../../../markdown-renderer/markdown-it-plugins/alert-container'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^:::((\\w|-|_|\\+)*)$/\nconst spoilerSuggestion: Hint = {\n  text: ':::spoiler Toggle label\\nToggled content\\n::: \\n',\n  displayText: 'spoiler'\n}\nconst suggestions = validAlertLevels\n  .map(\n    (suggestion: string): Hint => ({\n      text: ':::' + suggestion + '\\n\\n::: \\n',\n      displayText: suggestion\n    })\n  )\n  .concat(spoilerSuggestion)\n\nconst containerHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.filter((suggestion) => suggestion.displayText?.startsWith(searchResult[1])),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end)\n      })\n    }\n  })\n}\n\nexport const ContainerHinter: Hinter = {\n  wordRegExp,\n  hint: containerHint\n}\n","export default __webpack_public_path__ + \"static/media/forkawesome.da7d0f53.png\";","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Picker } from 'emoji-picker-element'\nimport { CustomEmoji, EmojiClickEvent, EmojiClickEventDetail } from 'emoji-picker-element/shared'\nimport React, { useEffect, useRef } from 'react'\nimport { useClickAway } from 'react-use'\nimport { useIsDarkModeActivated } from '../../../../../hooks/common/use-is-dark-mode-activated'\nimport './emoji-picker.scss'\nimport forkawesomeIcon from './forkawesome.png'\nimport { ForkAwesomeIcons } from './icon-names'\n\nexport interface EmojiPickerProps {\n  show: boolean\n  onEmojiSelected: (emoji: EmojiClickEventDetail) => void\n  onDismiss: () => void\n}\n\nexport const customEmojis: CustomEmoji[] = Object.keys(ForkAwesomeIcons).map((name) => ({\n  name: `fa-${name}`,\n  shortcodes: [`fa-${name.toLowerCase()}`],\n  url: forkawesomeIcon,\n  category: 'ForkAwesome'\n}))\n\nexport const EMOJI_DATA_PATH = '/static/js/emoji-data.json'\n\nexport const emojiPickerConfig = {\n  customEmoji: customEmojis,\n  dataSource: EMOJI_DATA_PATH\n}\n\nconst twemojiStyle = (): HTMLStyleElement => {\n  const style = document.createElement('style')\n  style.textContent = 'section.picker { --font-family: \"Twemoji\" !important; }'\n  return style\n}\n\nexport const EmojiPicker: React.FC<EmojiPickerProps> = ({ show, onEmojiSelected, onDismiss }) => {\n  const darkModeEnabled = useIsDarkModeActivated()\n  const pickerContainerRef = useRef<HTMLDivElement>(null)\n  const pickerRef = useRef<Picker>()\n\n  useClickAway(pickerContainerRef, () => {\n    onDismiss()\n  })\n\n  useEffect(() => {\n    if (!pickerContainerRef.current) {\n      return\n    }\n    const picker = new Picker(emojiPickerConfig)\n    if (picker.shadowRoot) {\n      picker.shadowRoot.appendChild(twemojiStyle())\n    }\n    pickerContainerRef.current.appendChild(picker)\n\n    pickerRef.current = picker\n    return () => {\n      picker.remove()\n      pickerRef.current = undefined\n    }\n  }, [])\n\n  useEffect(() => {\n    if (!pickerRef.current) {\n      return\n    }\n    const emojiClick = (event: EmojiClickEvent): void => {\n      onEmojiSelected(event.detail)\n    }\n    const picker = pickerRef.current\n    picker.addEventListener('emoji-click', emojiClick, true)\n    return () => {\n      picker.removeEventListener('emoji-click', emojiClick, true)\n    }\n  }, [onEmojiSelected])\n\n  useEffect(() => {\n    if (!pickerRef.current) {\n      return\n    }\n    pickerRef.current.setAttribute('class', darkModeEnabled ? 'dark' : 'light')\n    if (darkModeEnabled) {\n      pickerRef.current.removeAttribute('style')\n    } else {\n      pickerRef.current.setAttribute('style', '--background: #f8f9fa')\n    }\n  }, [darkModeEnabled])\n\n  return (\n    <div className={`position-absolute emoji-picker-container ${!show ? 'd-none' : ''}`} ref={pickerContainerRef} />\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { EmojiClickEventDetail, NativeEmoji } from 'emoji-picker-element/shared'\n\nexport const getEmojiIcon = (emoji: EmojiClickEventDetail): string => {\n  if (emoji.unicode) {\n    return emoji.unicode\n  }\n  if (emoji.name) {\n    // noinspection CheckTagEmptyBody\n    return `<i class=\"fa ${emoji.name}\"></i>`\n  }\n  return ''\n}\n\nexport const getEmojiShortCode = (emoji: EmojiClickEventDetail): string | undefined => {\n  if (!emoji.emoji.shortcodes) {\n    return undefined\n  }\n  let skinToneModifier = ''\n  if ((emoji.emoji as NativeEmoji).skins && emoji.skinTone !== 0) {\n    skinToneModifier = `:skin-tone-${emoji.skinTone as number}:`\n  }\n  return `:${emoji.emoji.shortcodes[0]}:${skinToneModifier}`\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport Database from 'emoji-picker-element/database'\nimport { Emoji, EmojiClickEventDetail, NativeEmoji } from 'emoji-picker-element/shared'\nimport { emojiPickerConfig } from '../tool-bar/emoji-picker/emoji-picker'\nimport { getEmojiIcon, getEmojiShortCode } from '../tool-bar/utils/emojiUtils'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst emojiIndex = new Database(emojiPickerConfig)\nconst emojiWordRegex = /^:([\\w-_+]*)$/\n\nconst findEmojiInDatabase = async (emojiIndex: Database, term: string): Promise<Emoji[]> => {\n  try {\n    if (term === '') {\n      return await emojiIndex.getTopFavoriteEmoji(7)\n    }\n    const queryResult = await emojiIndex.getEmojiBySearchQuery(term)\n    if (queryResult.length === 0) {\n      return await emojiIndex.getTopFavoriteEmoji(7)\n    } else {\n      return queryResult\n    }\n  } catch (error) {\n    console.error(error)\n    return []\n  }\n}\n\nconst convertEmojiEventToHint = (emojiData: EmojiClickEventDetail): Hint | undefined => {\n  const shortCode = getEmojiShortCode(emojiData)\n  if (!shortCode) {\n    return undefined\n  }\n  return {\n    text: shortCode,\n    render: (parent: HTMLLIElement) => {\n      const wrapper = document.createElement('div')\n      wrapper.innerHTML = `${getEmojiIcon(emojiData)}   ${shortCode}`\n      parent.appendChild(wrapper)\n    }\n  }\n}\n\nconst generateEmojiHints = async (editor: Editor): Promise<Hints | null> => {\n  const searchTerm = findWordAtCursor(editor)\n  const searchResult = emojiWordRegex.exec(searchTerm.text)\n  if (searchResult === null) {\n    return null\n  }\n  const suggestionList: Emoji[] = await findEmojiInDatabase(emojiIndex, searchResult[1])\n  const cursor = editor.getCursor()\n  const skinTone = await emojiIndex.getPreferredSkinTone()\n  const emojiEventDetails: EmojiClickEventDetail[] = suggestionList\n    .filter((emoji) => !!emoji.shortcodes)\n    .map((emoji) => ({\n      emoji,\n      skinTone: skinTone,\n      unicode: (emoji as NativeEmoji).unicode ? (emoji as NativeEmoji).unicode : undefined,\n      name: emoji.name\n    }))\n\n  const hints = emojiEventDetails.map(convertEmojiEventToHint).filter((o) => !!o) as Hint[]\n  return {\n    list: hints,\n    from: Pos(cursor.line, searchTerm.start),\n    to: Pos(cursor.line, searchTerm.end)\n  }\n}\n\nexport const EmojiHinter: Hinter = {\n  wordRegExp: emojiWordRegex,\n  hint: generateEmojiHints\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, Hinter, search } from './index'\n\nconst wordRegExp = /^(\\s{0,3})(#{1,6})$/\nconst allSupportedHeaders = ['# h1', '## h2', '### h3', '#### h4', '##### h5', '###### h6', '###### tags: `example`']\nconst allSupportedHeadersTextToInsert = ['# ', '## ', '### ', '#### ', '##### ', '###### ', '###### tags: `example`']\n\nconst headerHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const term = searchResult[0]\n    if (!term) {\n      resolve(null)\n      return\n    }\n    const suggestions = search(term, allSupportedHeaders)\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map(\n          (suggestion): Hint => ({\n            text: allSupportedHeadersTextToInsert[allSupportedHeaders.indexOf(suggestion)],\n            displayText: suggestion\n          })\n        ),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end)\n      })\n    }\n  })\n}\n\nexport const HeaderHinter: Hinter = {\n  wordRegExp,\n  hint: headerHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^(!(\\[.*])?)$/\nconst allSupportedImages = [\n  '![image alt](https:// \"title\")',\n  '![image alt](https:// \"title\" =WidthxHeight)',\n  '![image alt][reference]'\n]\n\nconst imageHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const suggestions = allSupportedImages\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map(\n          (suggestion: string): Hint => ({\n            text: suggestion\n          })\n        ),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end + 1)\n      })\n    }\n  })\n}\n\nexport const ImageHinter: Hinter = {\n  wordRegExp,\n  hint: imageHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { DateTime } from 'luxon'\nimport { getUser } from '../../../../redux/user/methods'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^(\\[(.*])?)$/\nconst allSupportedLinks = [\n  '[link text](https:// \"title\")',\n  '[reference]: https:// \"title\"',\n  '[link text][reference]',\n  '[reference]',\n  '[^footnote reference]: https://',\n  '[^footnote reference]',\n  '^[inline footnote]',\n  '[TOC]',\n  'name',\n  'time',\n  '[color=#FFFFFF]'\n]\n\nconst linkAndExtraTagHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const suggestions = allSupportedLinks\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map((suggestion: string): Hint => {\n          const user = getUser()\n          const userName = user ? user.name : 'Anonymous'\n          switch (suggestion) {\n            case 'name':\n              // Get the user when a completion happens, this prevents to early calls resulting in 'Anonymous'\n              return {\n                text: `[name=${userName}]`\n              }\n            case 'time':\n              // show the current time when the autocompletion is opened and not when the function is loaded\n              return {\n                text: `[time=${DateTime.local().toFormat('DDDD T')}]`\n              }\n            default:\n              return {\n                text: suggestion + ' ',\n                displayText: suggestion\n              }\n          }\n        }),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end + 1)\n      })\n    }\n  })\n}\n\nexport const LinkAndExtraTagHinter: Hinter = {\n  wordRegExp,\n  hint: linkAndExtraTagHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^({[%}]?)$/\n\nconst pdfHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const suggestions = ['{%pdf https:// %}']\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map(\n          (suggestion: string): Hint => ({\n            text: suggestion\n          })\n        ),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end + 1)\n      })\n    }\n  })\n}\n\nexport const PDFHinter: Hinter = {\n  wordRegExp,\n  hint: pdfHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hints } from 'codemirror'\nimport { CodeBlockHinter } from './code-block'\nimport { CollapsableBlockHinter } from './collapsable-block'\nimport { ContainerHinter } from './container'\nimport { EmojiHinter } from './emoji'\nimport { HeaderHinter } from './header'\nimport { ImageHinter } from './image'\nimport { LinkAndExtraTagHinter } from './link-and-extra-tag'\nimport { PDFHinter } from './pdf'\n\ninterface findWordAtCursorResponse {\n  start: number\n  end: number\n  text: string\n}\n\nexport interface Hinter {\n  wordRegExp: RegExp\n  hint: (editor: Editor) => Promise<Hints | null>\n}\n\nconst allowedChars = /[^\\s]/\n\nexport const findWordAtCursor = (editor: Editor): findWordAtCursorResponse => {\n  const cursor = editor.getCursor()\n  const line = editor.getLine(cursor.line)\n  let start = cursor.ch\n  let end = cursor.ch\n  while (start && allowedChars.test(line.charAt(start - 1))) {\n    --start\n  }\n  while (end < line.length && allowedChars.test(line.charAt(end))) {\n    ++end\n  }\n\n  return {\n    text: line.slice(start, end).toLowerCase(),\n    start: start,\n    end: end\n  }\n}\n\nexport const search = (term: string, list: string[]): string[] => {\n  const suggestions: string[] = []\n  list.forEach((item) => {\n    if (item.toLowerCase().startsWith(term.toLowerCase())) {\n      suggestions.push(item)\n    }\n  })\n  return suggestions.slice(0, 7)\n}\n\nexport const allHinters: Hinter[] = [\n  CodeBlockHinter,\n  ContainerHinter,\n  EmojiHinter,\n  HeaderHinter,\n  ImageHinter,\n  LinkAndExtraTagHinter,\n  PDFHinter,\n  CollapsableBlockHinter\n]\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport const createNumberRangeArray = (length: number): number[] => {\n  return Array.from(Array(length).keys())\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport { EmojiClickEventDetail } from 'emoji-picker-element/shared'\nimport { createNumberRangeArray } from '../../../../common/number-range/number-range'\nimport { getEmojiShortCode } from './emojiUtils'\n\nexport const makeSelectionBold = (editor: Editor): void => wrapTextWith(editor, '**')\nexport const makeSelectionItalic = (editor: Editor): void => wrapTextWith(editor, '*')\nexport const strikeThroughSelection = (editor: Editor): void => wrapTextWith(editor, '~~')\nexport const underlineSelection = (editor: Editor): void => wrapTextWith(editor, '++')\nexport const subscriptSelection = (editor: Editor): void => wrapTextWith(editor, '~')\nexport const superscriptSelection = (editor: Editor): void => wrapTextWith(editor, '^')\nexport const markSelection = (editor: Editor): void => wrapTextWith(editor, '==')\n\nexport const addHeaderLevel = (editor: Editor): void =>\n  changeLines(editor, (line) => (line.startsWith('#') ? `#${line}` : `# ${line}`))\nexport const addCodeFences = (editor: Editor): void => wrapTextWithOrJustPut(editor, '```\\n', '\\n```')\nexport const addQuotes = (editor: Editor): void => insertOnStartOfLines(editor, '> ')\n\nexport const addList = (editor: Editor): void => createList(editor, () => '- ')\nexport const addOrderedList = (editor: Editor): void => createList(editor, (j) => `${j}. `)\nexport const addTaskList = (editor: Editor): void => createList(editor, () => '- [ ] ')\n\nexport const addImage = (editor: Editor): void => addLink(editor, '!')\n\nexport const addLine = (editor: Editor): void => changeLines(editor, (line) => `${line}\\n----`)\nexport const addCollapsableBlock = (editor: Editor): void =>\n  changeLines(editor, (line) => `${line}\\n:::spoiler Toggle label\\n  Toggled content\\n:::`)\nexport const addComment = (editor: Editor): void => changeLines(editor, (line) => `${line}\\n> []`)\nexport const addTable = (editor: Editor, rows: number, columns: number): void => {\n  const rowArray = createNumberRangeArray(rows)\n  const colArray = createNumberRangeArray(columns).map((col) => col + 1)\n  const head = '|  # ' + colArray.join(' |  # ') + ' |'\n  const divider = '| ' + colArray.map(() => '----').join(' | ') + ' |'\n  const body = rowArray.map(() => '| ' + colArray.map(() => 'Text').join(' | ') + ' |').join('\\n')\n  const table = `${head}\\n${divider}\\n${body}`\n  changeLines(editor, (line) => `${line}\\n${table}`)\n}\n\nexport const addEmoji = (emoji: EmojiClickEventDetail, editor: Editor): void => {\n  const shortCode = getEmojiShortCode(emoji)\n  if (shortCode) {\n    insertAtCursor(editor, shortCode)\n  }\n}\n\nexport const wrapTextWith = (editor: Editor, symbol: string, endSymbol?: string): void => {\n  if (!editor.getSelection()) {\n    return\n  }\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    if (range.empty()) {\n      continue\n    }\n    const from = range.from()\n    const to = range.to()\n\n    const selection = editor.getRange(from, to)\n    editor.replaceRange(symbol + selection + (endSymbol || symbol), from, to, '+input')\n    range.head.ch += symbol.length\n    range.anchor.ch += endSymbol ? endSymbol.length : symbol.length\n  }\n  editor.setSelections(ranges)\n}\n\nconst wrapTextWithOrJustPut = (editor: Editor, symbol: string, endSymbol?: string): void => {\n  if (!editor.getSelection()) {\n    const cursor = editor.getCursor()\n    const lineNumber = cursor.line\n    const line = editor.getLine(lineNumber)\n    const replacement = /\\s*\\\\n/.exec(line) ? `${symbol}${endSymbol ?? ''}` : `${symbol}${line}${endSymbol ?? ''}`\n    editor.replaceRange(replacement, { line: cursor.line, ch: 0 }, { line: cursor.line, ch: line.length }, '+input')\n  }\n  wrapTextWith(editor, symbol, endSymbol ?? symbol)\n}\n\nexport const insertOnStartOfLines = (editor: Editor, symbol: string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const from = range.empty() ? { line: cursor.line, ch: 0 } : range.from()\n    const to = range.empty() ? { line: cursor.line, ch: editor.getLine(cursor.line).length } : range.to()\n    const selection = editor.getRange(from, to)\n    const lines = selection.split('\\n')\n    editor.replaceRange(lines.map((line) => `${symbol}${line}`).join('\\n'), from, to, '+input')\n  }\n  editor.setSelections(ranges)\n}\n\nexport const changeLines = (editor: Editor, replaceFunction: (line: string) => string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const lineNumber = range.empty() ? cursor.line : range.from().line\n    const line = editor.getLine(lineNumber)\n    editor.replaceRange(\n      replaceFunction(line),\n      { line: lineNumber, ch: 0 },\n      {\n        line: lineNumber,\n        ch: line.length\n      },\n      '+input'\n    )\n  }\n  editor.setSelections(ranges)\n}\n\nexport const createList = (editor: Editor, listMark: (i: number) => string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const from = range.empty() ? { line: cursor.line, ch: 0 } : range.from()\n    const to = range.empty() ? { line: cursor.line, ch: editor.getLine(cursor.line).length } : range.to()\n\n    const selection = editor.getRange(from, to)\n    const lines = selection.split('\\n')\n    editor.replaceRange(lines.map((line, i) => `${listMark(i + 1)}${line}`).join('\\n'), from, to, '+input')\n  }\n  editor.setSelections(ranges)\n}\n\nexport const addLink = (editor: Editor, prefix?: string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const from = range.empty() ? { line: cursor.line, ch: cursor.ch } : range.from()\n    const to = range.empty() ? { line: cursor.line, ch: cursor.ch } : range.to()\n    const selection = editor.getRange(from, to)\n    const linkRegex = /^(?:https?|ftp|mailto):/\n    if (linkRegex.exec(selection)) {\n      editor.replaceRange(`${prefix || ''}[](${selection})`, from, to, '+input')\n    } else {\n      editor.replaceRange(`${prefix || ''}[${selection}](https://)`, from, to, '+input')\n    }\n  }\n}\n\nexport const insertAtCursor = (editor: Editor, text: string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const from = range.empty() ? { line: cursor.line, ch: cursor.ch } : range.from()\n    const to = range.empty() ? { line: cursor.line, ch: cursor.ch } : range.to()\n    editor.replaceRange(`${text}`, from, to, '+input')\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport CodeMirror, { Editor, KeyMap, Pass } from 'codemirror'\nimport { isMac } from '../utils'\nimport {\n  addLink,\n  makeSelectionBold,\n  makeSelectionItalic,\n  markSelection,\n  strikeThroughSelection,\n  underlineSelection\n} from './tool-bar/utils/toolbarButtonUtils'\n\nconst isVim = (keyMapName?: string) => keyMapName?.substr(0, 3) === 'vim'\n\nconst f10 = (editor: Editor): void | typeof Pass => editor.setOption('fullScreen', !editor.getOption('fullScreen'))\nconst esc = (editor: Editor): void | typeof Pass => {\n  if (editor.getOption('fullScreen') && !isVim(editor.getOption('keyMap'))) {\n    editor.setOption('fullScreen', false)\n  } else {\n    return CodeMirror.Pass\n  }\n}\nconst suppressKey = (): undefined => undefined\nconst tab = (editor: Editor) => {\n  const tab = '\\t'\n\n  // contruct x length spaces\n  const spaces = Array((editor.getOption('indentUnit') ?? 0) + 1).join(' ')\n\n  // auto indent whole line when in list or blockquote\n  const cursor = editor.getCursor()\n  const line = editor.getLine(cursor.line)\n\n  // this regex match the following patterns\n  // 1. blockquote starts with \"> \" or \">>\"\n  // 2. unorder list starts with *+-parseInt\n  // 3. order list starts with \"1.\" or \"1)\"\n  const regex = /^(\\s*)(>[> ]*|[*+-]\\s|(\\d+)([.)]))/\n\n  let match\n  const multiple = editor.getSelection().split('\\n').length > 1 || editor.getSelections().length > 1\n\n  if (multiple) {\n    editor.execCommand('defaultTab')\n  } else if ((match = regex.exec(line)) !== null) {\n    const ch = match[1].length\n    const pos = {\n      line: cursor.line,\n      ch: ch\n    }\n    if (editor.getOption('indentWithTabs')) {\n      editor.replaceRange(tab, pos, pos, '+input')\n    } else {\n      editor.replaceRange(spaces, pos, pos, '+input')\n    }\n  } else {\n    if (editor.getOption('indentWithTabs')) {\n      editor.execCommand('defaultTab')\n    } else {\n      editor.replaceSelection(spaces)\n    }\n  }\n}\n\nexport const defaultKeyMap: KeyMap = !isMac\n  ? {\n      F9: suppressKey,\n      F10: f10,\n      Esc: esc,\n      'Ctrl-S': suppressKey,\n      Enter: 'newlineAndIndentContinueMarkdownList',\n      Tab: tab,\n      Home: 'goLineLeftSmart',\n      End: 'goLineRight',\n      'Ctrl-I': makeSelectionItalic,\n      'Ctrl-B': makeSelectionBold,\n      'Ctrl-U': underlineSelection,\n      'Ctrl-D': strikeThroughSelection,\n      'Ctrl-M': markSelection,\n      'Ctrl-K': addLink\n    }\n  : {\n      F9: suppressKey,\n      F10: f10,\n      Esc: esc,\n      'Cmd-S': suppressKey,\n      Enter: 'newlineAndIndentContinueMarkdownList',\n      Tab: tab,\n      'Cmd-Left': 'goLineLeftSmart',\n      'Cmd-Right': 'goLineRight',\n      Home: 'goLineLeftSmart',\n      End: 'goLineRight',\n      'Cmd-I': makeSelectionItalic,\n      'Cmd-B': makeSelectionBold,\n      'Cmd-U': underlineSelection,\n      'Cmd-D': strikeThroughSelection,\n      'Cmd-M': markSelection\n    }\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Position } from 'codemirror'\nimport React, { useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { ShowIf } from '../../../common/show-if/show-if'\nimport './status-bar.scss'\n\nexport interface StatusBarInfo {\n  position: Position\n  selectedColumns: number\n  selectedLines: number\n  linesInDocument: number\n  charactersInDocument: number\n  remainingCharacters: number\n}\n\nexport const defaultState: StatusBarInfo = {\n  position: { line: 0, ch: 0 },\n  selectedColumns: 0,\n  selectedLines: 0,\n  linesInDocument: 0,\n  charactersInDocument: 0,\n  remainingCharacters: 0\n}\n\nexport const createStatusInfo = (editor: Editor, maxDocumentLength: number): StatusBarInfo => ({\n  position: editor.getCursor(),\n  charactersInDocument: editor.getValue().length,\n  remainingCharacters: maxDocumentLength - editor.getValue().length,\n  linesInDocument: editor.lineCount(),\n  selectedColumns: editor.getSelection().length,\n  selectedLines: editor.getSelection().split('\\n').length\n})\n\nexport const StatusBar: React.FC<StatusBarInfo> = ({\n  position,\n  selectedColumns,\n  selectedLines,\n  charactersInDocument,\n  linesInDocument,\n  remainingCharacters\n}) => {\n  const { t } = useTranslation()\n\n  const getLengthTooltip = useMemo(() => {\n    if (remainingCharacters === 0) {\n      return t('editor.statusBar.lengthTooltip.maximumReached')\n    }\n    if (remainingCharacters < 0) {\n      return t('editor.statusBar.lengthTooltip.exceeded', { exceeded: -remainingCharacters })\n    }\n    return t('editor.statusBar.lengthTooltip.remaining', { remaining: remainingCharacters })\n  }, [remainingCharacters, t])\n\n  return (\n    <div className='d-flex flex-row status-bar px-2'>\n      <div>\n        <span>{t('editor.statusBar.cursor', { line: position.line + 1, columns: position.ch + 1 })}</span>\n        <ShowIf condition={selectedColumns !== 0 && selectedLines !== 0}>\n          <ShowIf condition={selectedLines === 1}>\n            <span>&nbsp;–&nbsp;{t('editor.statusBar.selection.column', { count: selectedColumns })}</span>\n          </ShowIf>\n          <ShowIf condition={selectedLines > 1}>\n            <span>&nbsp;–&nbsp;{t('editor.statusBar.selection.line', { count: selectedLines })}</span>\n          </ShowIf>\n        </ShowIf>\n      </div>\n      <div className='ml-auto'>\n        <span>{t('editor.statusBar.lines', { lines: linesInDocument })}</span>\n        &nbsp;–&nbsp;\n        <span\n          data-cy={'remainingCharacters'}\n          title={getLengthTooltip}\n          className={remainingCharacters <= 0 ? 'text-danger' : remainingCharacters <= 100 ? 'text-warning' : ''}>\n          {t('editor.statusBar.length', { length: charactersInDocument })}\n        </span>\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport enum EditorPreferenceProperty {\n  KEYMAP = 'keyMap',\n  THEME = 'theme',\n  INDENT_WITH_TABS = 'indentWithTabs',\n  INDENT_UNIT = 'indentUnit',\n  SPELL_CHECK = 'spellcheck'\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { EditorConfiguration } from 'codemirror'\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { mergeEditorPreferences } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\nimport { EditorPreferenceProperty } from './editor-preference-property'\nimport { useApplicationState } from '../../../../../hooks/common/use-application-state'\n\nexport interface EditorPreferenceBooleanProps {\n  property: EditorPreferenceProperty\n}\n\nexport const EditorPreferenceBooleanProperty: React.FC<EditorPreferenceBooleanProps> = ({ property }) => {\n  const preference = useApplicationState((state) => state.editorConfig.preferences[property]?.toString() ?? '')\n\n  const { t } = useTranslation()\n  const selectItem = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const selectedItem: boolean = event.target.value === 'true'\n\n      mergeEditorPreferences({\n        [property]: selectedItem\n      } as EditorConfiguration)\n    },\n    [property]\n  )\n\n  const i18nPrefix = `editor.modal.preferences.${property}`\n\n  return (\n    <EditorPreferenceInput\n      onChange={selectItem}\n      property={property}\n      type={EditorPreferenceInputType.SELECT}\n      value={preference}>\n      <option value={'true'}>{t(`${i18nPrefix}.on`)}</option>\n      <option value={'false'}>{t(`${i18nPrefix}.off`)}</option>\n    </EditorPreferenceInput>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { setEditorLigatures } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\nimport { useApplicationState } from '../../../../../hooks/common/use-application-state'\n\nexport const EditorPreferenceLigaturesSelect: React.FC = () => {\n  const ligaturesEnabled = useApplicationState((state) => Boolean(state.editorConfig.ligatures).toString())\n  const saveLigatures = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const ligaturesActivated: boolean = event.target.value === 'true'\n    setEditorLigatures(ligaturesActivated)\n  }, [])\n  const { t } = useTranslation()\n\n  return (\n    <EditorPreferenceInput\n      onChange={saveLigatures}\n      value={ligaturesEnabled}\n      property={'ligatures'}\n      type={EditorPreferenceInputType.BOOLEAN}>\n      <option value='true'>{t(`common.yes`)}</option>\n      <option value='false'>{t(`common.no`)}</option>\n    </EditorPreferenceInput>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { EditorConfiguration } from 'codemirror'\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { mergeEditorPreferences } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\nimport { EditorPreferenceProperty } from './editor-preference-property'\nimport { useApplicationState } from '../../../../../hooks/common/use-application-state'\n\nexport interface EditorPreferenceNumberProps {\n  property: EditorPreferenceProperty\n}\n\nexport const EditorPreferenceNumberProperty: React.FC<EditorPreferenceNumberProps> = ({ property }) => {\n  const preference = useApplicationState((state) => state.editorConfig.preferences[property]?.toString() ?? '')\n\n  const selectItem = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const selectedItem: number = Number.parseInt(event.target.value)\n\n      mergeEditorPreferences({\n        [property]: selectedItem\n      } as EditorConfiguration)\n    },\n    [property]\n  )\n\n  return (\n    <EditorPreferenceInput\n      onChange={selectItem}\n      property={property}\n      type={EditorPreferenceInputType.NUMBER}\n      value={preference}\n    />\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { EditorConfiguration } from 'codemirror'\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { mergeEditorPreferences } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\nimport { EditorPreferenceProperty } from './editor-preference-property'\nimport { useApplicationState } from '../../../../../hooks/common/use-application-state'\n\nexport interface EditorPreferenceSelectPropertyProps {\n  property: EditorPreferenceProperty\n  selections: string[]\n}\n\nexport const EditorPreferenceSelectProperty: React.FC<EditorPreferenceSelectPropertyProps> = ({\n  property,\n  selections\n}) => {\n  const preference = useApplicationState((state) => state.editorConfig.preferences[property]?.toString() ?? '')\n\n  const { t } = useTranslation()\n\n  const selectItem = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const selectedItem: string = event.target.value\n\n      mergeEditorPreferences({\n        [property]: selectedItem\n      } as EditorConfiguration)\n    },\n    [property]\n  )\n\n  const i18nPrefix = `editor.modal.preferences.${property}`\n\n  return (\n    <EditorPreferenceInput\n      onChange={selectItem}\n      property={property}\n      type={EditorPreferenceInputType.SELECT}\n      value={preference}>\n      {selections.map((selection) => (\n        <option key={selection} value={selection}>\n          {t(`${i18nPrefix}.${selection}`)}\n        </option>\n      ))}\n    </EditorPreferenceInput>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { RefObject } from 'react'\nimport { IconName } from '../../common/fork-awesome/types'\nimport { SidebarEntryVariant } from './sidebar-button'\n\nexport interface SpecificSidebarEntryProps {\n  className?: string\n  hide?: boolean\n  onClick?: () => void\n}\n\nexport interface SidebarEntryProps {\n  icon?: IconName\n  variant?: SidebarEntryVariant\n  buttonRef?: RefObject<HTMLButtonElement>\n  hide?: boolean\n  className?: string\n  onClick?: () => void\n  'data-cy'?: string\n}\n\nexport interface SidebarMenuProps {\n  expand?: boolean\n}\n\nexport enum DocumentSidebarMenuSelection {\n  NONE,\n  USERS_ONLINE,\n  IMPORT,\n  EXPORT\n}\n\nexport interface SpecificSidebarMenuProps {\n  className?: string\n  onClick: (menuId: DocumentSidebarMenuSelection) => void\n  selectedMenuId: DocumentSidebarMenuSelection\n  menuId: DocumentSidebarMenuSelection\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useApplicationState } from '../../../../../hooks/common/use-application-state'\nimport { setEditorSmartPaste } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\n\nexport const EditorPreferenceSmartPasteSelect: React.FC = () => {\n  const smartPasteEnabled = useApplicationState((state) => Boolean(state.editorConfig.smartPaste).toString())\n  const saveSmartPaste = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const smartPasteActivated: boolean = event.target.value === 'true'\n    setEditorSmartPaste(smartPasteActivated)\n  }, [])\n  const { t } = useTranslation()\n\n  return (\n    <EditorPreferenceInput\n      onChange={saveSmartPaste}\n      value={smartPasteEnabled}\n      property={'smartPaste'}\n      type={EditorPreferenceInputType.BOOLEAN}>\n      <option value='true'>{t(`common.yes`)}</option>\n      <option value='false'>{t(`common.no`)}</option>\n    </EditorPreferenceInput>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Button, Form, ListGroup } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { CommonModal } from '../../../../common/modals/common-modal'\nimport { ShowIf } from '../../../../common/show-if/show-if'\nimport { EditorPreferenceBooleanProperty } from './editor-preference-boolean-property'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\nimport { EditorPreferenceLigaturesSelect } from './editor-preference-ligatures-select'\nimport { EditorPreferenceNumberProperty } from './editor-preference-number-property'\nimport { EditorPreferenceProperty } from './editor-preference-property'\nimport { EditorPreferenceSelectProperty } from './editor-preference-select-property'\nimport { EditorPreferenceSmartPasteSelect } from './editor-preference-smart-paste-select'\nimport { useApplicationState } from '../../../../../hooks/common/use-application-state'\n\nexport const EditorPreferences: React.FC = () => {\n  const { t } = useTranslation()\n  const [showModal, setShowModal] = useState(false)\n  const indentWithTabs = useApplicationState((state) => state.editorConfig.preferences.indentWithTabs ?? false)\n\n  return (\n    <Fragment>\n      <Button variant='light' onClick={() => setShowModal(true)} title={t('editor.editorToolbar.preferences')}>\n        <ForkAwesomeIcon icon='wrench' />\n      </Button>\n      <CommonModal\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        titleI18nKey={'editor.modal.preferences.title'}\n        closeButton={true}\n        icon={'wrench'}>\n        <Form>\n          <ListGroup>\n            <ListGroup.Item>\n              <EditorPreferenceSelectProperty\n                property={EditorPreferenceProperty.THEME}\n                selections={['one-dark', 'neat']}\n              />\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <EditorPreferenceSelectProperty\n                property={EditorPreferenceProperty.KEYMAP}\n                selections={['sublime', 'emacs', 'vim']}\n              />\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <EditorPreferenceBooleanProperty property={EditorPreferenceProperty.INDENT_WITH_TABS} />\n            </ListGroup.Item>\n            <ShowIf condition={!indentWithTabs}>\n              <ListGroup.Item>\n                <EditorPreferenceNumberProperty property={EditorPreferenceProperty.INDENT_UNIT} />\n              </ListGroup.Item>\n            </ShowIf>\n            <ListGroup.Item>\n              <EditorPreferenceLigaturesSelect />\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <EditorPreferenceSmartPasteSelect />\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <EditorPreferenceInput\n                onChange={() => alert('This feature is not yet implemented.')}\n                property={EditorPreferenceProperty.SPELL_CHECK}\n                type={EditorPreferenceInputType.SELECT}>\n                <option value='off'>Off</option>\n                <option value='en'>English</option>\n              </EditorPreferenceInput>\n            </ListGroup.Item>\n          </ListGroup>\n        </Form>\n      </CommonModal>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport CodeMirror from 'codemirror'\nimport React, { Fragment, useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { addEmoji } from '../utils/toolbarButtonUtils'\nimport { EmojiPicker } from './emoji-picker'\n\nexport interface EmojiPickerButtonProps {\n  editor: CodeMirror.Editor\n}\n\nexport const EmojiPickerButton: React.FC<EmojiPickerButtonProps> = ({ editor }) => {\n  const { t } = useTranslation()\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false)\n\n  return (\n    <Fragment>\n      <EmojiPicker\n        show={showEmojiPicker}\n        onEmojiSelected={(emoji) => {\n          setShowEmojiPicker(false)\n          addEmoji(emoji, editor)\n        }}\n        onDismiss={() => setShowEmojiPicker(false)}\n      />\n      <Button\n        data-cy={'show-emoji-picker'}\n        variant='light'\n        onClick={() => setShowEmojiPicker((old) => !old)}\n        title={t('editor.editorToolbar.emoji')}>\n        <ForkAwesomeIcon icon='smile-o' />\n      </Button>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { Button, Form, ModalFooter } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { CommonModal } from '../../../../common/modals/common-modal'\nimport { TableSize } from './table-picker'\n\nexport interface CustomTableSizeModalProps {\n  showModal: boolean\n  onDismiss: () => void\n  onTablePicked: (row: number, cols: number) => void\n}\n\nexport const CustomTableSizeModal: React.FC<CustomTableSizeModalProps> = ({ showModal, onDismiss, onTablePicked }) => {\n  const { t } = useTranslation()\n  const [tableSize, setTableSize] = useState<TableSize>({\n    rows: 0,\n    columns: 0\n  })\n\n  useEffect(() => {\n    setTableSize({\n      rows: 0,\n      columns: 0\n    })\n  }, [showModal])\n\n  const onClick = useCallback(() => {\n    onTablePicked(tableSize.rows, tableSize.columns)\n    onDismiss()\n  }, [onDismiss, tableSize, onTablePicked])\n\n  return (\n    <CommonModal\n      show={showModal}\n      onHide={() => onDismiss()}\n      titleI18nKey={'editor.editorToolbar.table.customSize'}\n      closeButton={true}\n      icon={'table'}>\n      <div className={'col-lg-10 d-flex flex-row p-3 align-items-center'}>\n        <Form.Control\n          type={'number'}\n          min={1}\n          placeholder={t('editor.editorToolbar.table.cols')}\n          isInvalid={tableSize.columns <= 0}\n          onChange={(event) => {\n            const value = Number.parseInt(event.currentTarget.value)\n            setTableSize((old) => ({\n              rows: old.rows,\n              columns: isNaN(value) ? 0 : value\n            }))\n          }}\n        />\n        <ForkAwesomeIcon icon='times' className='mx-2' fixedWidth={true} />\n        <Form.Control\n          type={'number'}\n          min={1}\n          placeholder={t('editor.editorToolbar.table.rows')}\n          isInvalid={tableSize.rows <= 0}\n          onChange={(event) => {\n            const value = Number.parseInt(event.currentTarget.value)\n            setTableSize((old) => ({\n              rows: isNaN(value) ? 0 : value,\n              columns: old.columns\n            }))\n          }}\n        />\n      </div>\n      <ModalFooter>\n        <Button onClick={onClick} disabled={tableSize.rows <= 0 || tableSize.columns <= 0}>\n          {t('editor.editorToolbar.table.create')}\n        </Button>\n      </ModalFooter>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { useClickAway } from 'react-use'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { createNumberRangeArray } from '../../../../common/number-range/number-range'\nimport { CustomTableSizeModal } from './custom-table-size-modal'\nimport './table-picker.scss'\n\nexport interface TablePickerProps {\n  show: boolean\n  onDismiss: () => void\n  onTablePicked: (row: number, cols: number) => void\n}\n\nexport type TableSize = {\n  rows: number\n  columns: number\n}\n\nexport const TablePicker: React.FC<TablePickerProps> = ({ show, onDismiss, onTablePicked }) => {\n  const { t } = useTranslation()\n  const containerRef = useRef<HTMLDivElement>(null)\n  const [tableSize, setTableSize] = useState<TableSize>()\n  const [showDialog, setShowDialog] = useState(false)\n\n  useClickAway(containerRef, () => {\n    onDismiss()\n  })\n\n  useEffect(() => {\n    setTableSize(undefined)\n  }, [show])\n\n  const onClick = useCallback(() => {\n    if (tableSize) {\n      onTablePicked(tableSize.rows, tableSize.columns)\n    }\n  }, [onTablePicked, tableSize])\n\n  return (\n    <div\n      className={`position-absolute table-picker-container p-2 ${!show || showDialog ? 'd-none' : ''} bg-light`}\n      ref={containerRef}\n      role='grid'>\n      <p className={'lead'}>\n        {tableSize\n          ? t('editor.editorToolbar.table.size', { cols: tableSize?.columns, rows: tableSize.rows })\n          : t('editor.editorToolbar.table.title')}\n      </p>\n      <div className={'table-container'}>\n        {createNumberRangeArray(8).map((row: number) =>\n          createNumberRangeArray(10).map((col: number) => (\n            <div\n              key={`${row}_${col}`}\n              className={`table-cell ${\n                tableSize && row < tableSize.rows && col < tableSize.columns ? 'bg-primary border-primary' : ''\n              }`}\n              onMouseEnter={() => {\n                setTableSize({\n                  rows: row + 1,\n                  columns: col + 1\n                })\n              }}\n              title={t('editor.editorToolbar.table.size', { cols: col + 1, rows: row + 1 })}\n              onClick={onClick}\n            />\n          ))\n        )}\n      </div>\n      <div className='d-flex justify-content-center mt-2'>\n        <Button data-cy={'show-custom-table-modal'} className={'text-center'} onClick={() => setShowDialog(true)}>\n          <ForkAwesomeIcon icon='table' />\n          &nbsp;{t('editor.editorToolbar.table.customSize')}\n        </Button>\n        <CustomTableSizeModal\n          showModal={showDialog}\n          onDismiss={() => setShowDialog(false)}\n          onTablePicked={onTablePicked}\n        />\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport CodeMirror from 'codemirror'\nimport React, { Fragment, useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { addTable } from '../utils/toolbarButtonUtils'\nimport { TablePicker } from './table-picker'\n\nexport interface TablePickerButtonProps {\n  editor: CodeMirror.Editor\n}\n\nexport const TablePickerButton: React.FC<TablePickerButtonProps> = ({ editor }) => {\n  const { t } = useTranslation()\n  const [showTablePicker, setShowTablePicker] = useState(false)\n\n  return (\n    <Fragment>\n      <TablePicker\n        show={showTablePicker}\n        onDismiss={() => setShowTablePicker(false)}\n        onTablePicked={(rows, cols) => {\n          setShowTablePicker(false)\n          addTable(editor, rows, cols)\n        }}\n      />\n      <Button\n        data-cy={'show-table-overlay'}\n        variant='light'\n        onClick={() => setShowTablePicker((old) => !old)}\n        title={t('editor.editorToolbar.table.title')}>\n        <ForkAwesomeIcon icon='table' />\n      </Button>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { MutableRefObject, useCallback, useEffect, useRef } from 'react'\n\nexport interface UploadInputProps {\n  onLoad: (file: File) => Promise<void>\n  acceptedFiles: string\n  onClickRef: MutableRefObject<(() => void) | undefined>\n  'data-cy'?: string\n}\n\nexport const UploadInput: React.FC<UploadInputProps> = ({ onLoad, acceptedFiles, onClickRef, ...props }) => {\n  const fileInputReference = useRef<HTMLInputElement>(null)\n  const onClick = useCallback(() => {\n    const fileInput = fileInputReference.current\n    if (!fileInput) {\n      return\n    }\n    fileInput.addEventListener('change', () => {\n      if (!fileInput.files || fileInput.files.length < 1) {\n        return\n      }\n      const file = fileInput.files[0]\n      onLoad(file)\n        .then(() => {\n          fileInput.value = ''\n        })\n        .catch((error) => {\n          console.error(error)\n        })\n    })\n    fileInput.click()\n  }, [onLoad])\n\n  useEffect(() => {\n    onClickRef.current = onClick\n  })\n\n  return (\n    <input data-cy={props['data-cy']} type='file' ref={fileInputReference} className='d-none' accept={acceptedFiles} />\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport const supportedMimeTypes: string[] = [\n  'image/apng',\n  'image/bmp',\n  'image/gif',\n  'image/heif',\n  'image/heic',\n  'image/heif-sequence',\n  'image/heic-sequence',\n  'image/jpeg',\n  'image/png',\n  'image/svg+xml',\n  'image/tiff',\n  'image/webp'\n]\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport i18n from 'i18next'\nimport { uploadFile } from '../../../api/media'\nimport { store } from '../../../redux'\nimport { supportedMimeTypes } from '../../common/upload-image-mimetypes'\n\nexport const handleUpload = (file: File, editor: Editor): void => {\n  if (!file) {\n    return\n  }\n  if (!supportedMimeTypes.includes(file.type)) {\n    // this mimetype is not supported\n    return\n  }\n  const cursor = editor.getCursor()\n  const uploadPlaceholder = `![${i18n.t('editor.upload.uploadFile', { fileName: file.name })}]()`\n  const noteId = store.getState().noteDetails.id\n  const insertCode = (replacement: string) => {\n    editor.replaceRange(replacement, cursor, { line: cursor.line, ch: cursor.ch + uploadPlaceholder.length }, '+input')\n  }\n  editor.replaceRange(uploadPlaceholder, cursor, cursor, '+input')\n  uploadFile(noteId, file)\n    .then(({ link }) => {\n      insertCode(`![](${link})`)\n    })\n    .catch((error) => {\n      console.error('error while uploading file', error)\n      insertCode('')\n    })\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport React, { Fragment, useCallback, useRef } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\nimport { UploadInput } from '../../sidebar/upload-input'\nimport { handleUpload } from '../upload-handler'\nimport { supportedMimeTypes } from '../../../common/upload-image-mimetypes'\n\nexport interface UploadImageButtonProps {\n  editor?: Editor\n}\n\nconst acceptedMimeTypes = supportedMimeTypes.join(', ')\n\nexport const UploadImageButton: React.FC<UploadImageButtonProps> = ({ editor }) => {\n  const { t } = useTranslation()\n  const clickRef = useRef<() => void>()\n  const buttonClick = useCallback(() => {\n    clickRef.current?.()\n  }, [])\n\n  const onUploadImage = useCallback(\n    (file: File) => {\n      if (editor) {\n        handleUpload(file, editor)\n      }\n      return Promise.resolve()\n    },\n    [editor]\n  )\n\n  if (!editor) {\n    return null\n  }\n\n  return (\n    <Fragment>\n      <Button variant='light' onClick={buttonClick} title={t('editor.editorToolbar.uploadImage')}>\n        <ForkAwesomeIcon icon={'upload'} />\n      </Button>\n      <UploadInput onLoad={onUploadImage} acceptedFiles={acceptedMimeTypes} onClickRef={clickRef} />\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport React from 'react'\nimport { Button, ButtonGroup, ButtonToolbar } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\nimport { EditorPreferences } from './editor-preferences/editor-preferences'\nimport { EmojiPickerButton } from './emoji-picker/emoji-picker-button'\nimport { TablePickerButton } from './table-picker/table-picker-button'\nimport './tool-bar.scss'\nimport { UploadImageButton } from './upload-image-button'\nimport {\n  addCodeFences,\n  addCollapsableBlock,\n  addComment,\n  addHeaderLevel,\n  addImage,\n  addLine,\n  addLink,\n  addList,\n  addOrderedList,\n  addQuotes,\n  addTaskList,\n  makeSelectionBold,\n  makeSelectionItalic,\n  strikeThroughSelection,\n  subscriptSelection,\n  superscriptSelection,\n  underlineSelection\n} from './utils/toolbarButtonUtils'\n\nexport interface ToolBarProps {\n  editor?: Editor\n}\n\nexport const ToolBar: React.FC<ToolBarProps> = ({ editor }) => {\n  const { t } = useTranslation()\n\n  if (!editor) {\n    return null\n  }\n\n  return (\n    <ButtonToolbar className='bg-light'>\n      <ButtonGroup className={'mx-1 flex-wrap'}>\n        <Button\n          data-cy={'format-bold'}\n          variant='light'\n          onClick={() => makeSelectionBold(editor)}\n          title={t('editor.editorToolbar.bold')}>\n          <ForkAwesomeIcon icon='bold' />\n        </Button>\n        <Button\n          data-cy={'format-italic'}\n          variant='light'\n          onClick={() => makeSelectionItalic(editor)}\n          title={t('editor.editorToolbar.italic')}>\n          <ForkAwesomeIcon icon='italic' />\n        </Button>\n        <Button\n          data-cy={'format-underline'}\n          variant='light'\n          onClick={() => underlineSelection(editor)}\n          title={t('editor.editorToolbar.underline')}>\n          <ForkAwesomeIcon icon='underline' />\n        </Button>\n        <Button\n          data-cy={'format-strikethrough'}\n          variant='light'\n          onClick={() => strikeThroughSelection(editor)}\n          title={t('editor.editorToolbar.strikethrough')}>\n          <ForkAwesomeIcon icon='strikethrough' />\n        </Button>\n        <Button\n          data-cy={'format-subscript'}\n          variant='light'\n          onClick={() => subscriptSelection(editor)}\n          title={t('editor.editorToolbar.subscript')}>\n          <ForkAwesomeIcon icon='subscript' />\n        </Button>\n        <Button\n          data-cy={'format-superscript'}\n          variant='light'\n          onClick={() => superscriptSelection(editor)}\n          title={t('editor.editorToolbar.superscript')}>\n          <ForkAwesomeIcon icon='superscript' />\n        </Button>\n      </ButtonGroup>\n      <ButtonGroup className={'mx-1 flex-wrap'}>\n        <Button\n          data-cy={'format-heading'}\n          variant='light'\n          onClick={() => addHeaderLevel(editor)}\n          title={t('editor.editorToolbar.header')}>\n          <ForkAwesomeIcon icon='header' />\n        </Button>\n        <Button\n          data-cy={'format-code-block'}\n          variant='light'\n          onClick={() => addCodeFences(editor)}\n          title={t('editor.editorToolbar.code')}>\n          <ForkAwesomeIcon icon='code' />\n        </Button>\n        <Button\n          data-cy={'format-block-quote'}\n          variant='light'\n          onClick={() => addQuotes(editor)}\n          title={t('editor.editorToolbar.blockquote')}>\n          <ForkAwesomeIcon icon='quote-right' />\n        </Button>\n        <Button\n          data-cy={'format-unordered-list'}\n          variant='light'\n          onClick={() => addList(editor)}\n          title={t('editor.editorToolbar.unorderedList')}>\n          <ForkAwesomeIcon icon='list' />\n        </Button>\n        <Button\n          data-cy={'format-ordered-list'}\n          variant='light'\n          onClick={() => addOrderedList(editor)}\n          title={t('editor.editorToolbar.orderedList')}>\n          <ForkAwesomeIcon icon='list-ol' />\n        </Button>\n        <Button\n          data-cy={'format-check-list'}\n          variant='light'\n          onClick={() => addTaskList(editor)}\n          title={t('editor.editorToolbar.checkList')}>\n          <ForkAwesomeIcon icon='check-square' />\n        </Button>\n      </ButtonGroup>\n      <ButtonGroup className={'mx-1 flex-wrap'}>\n        <Button\n          data-cy={'format-link'}\n          variant='light'\n          onClick={() => addLink(editor)}\n          title={t('editor.editorToolbar.link')}>\n          <ForkAwesomeIcon icon='link' />\n        </Button>\n        <Button\n          data-cy={'format-image'}\n          variant='light'\n          onClick={() => addImage(editor)}\n          title={t('editor.editorToolbar.image')}>\n          <ForkAwesomeIcon icon='picture-o' />\n        </Button>\n        <UploadImageButton editor={editor} />\n      </ButtonGroup>\n      <ButtonGroup className={'mx-1 flex-wrap'}>\n        <TablePickerButton editor={editor} />\n        <Button\n          data-cy={'format-add-line'}\n          variant='light'\n          onClick={() => addLine(editor)}\n          title={t('editor.editorToolbar.line')}>\n          <ForkAwesomeIcon icon='minus' />\n        </Button>\n        <Button\n          data-cy={'format-collapsable-block'}\n          variant='light'\n          onClick={() => addCollapsableBlock(editor)}\n          title={t('editor.editorToolbar.collapsableBlock')}>\n          <ForkAwesomeIcon icon='caret-square-o-down' />\n        </Button>\n        <Button\n          data-cy={'format-add-comment'}\n          variant='light'\n          onClick={() => addComment(editor)}\n          title={t('editor.editorToolbar.comment')}>\n          <ForkAwesomeIcon icon='comment' />\n        </Button>\n        <EmojiPickerButton editor={editor} />\n      </ButtonGroup>\n      <ButtonGroup className={'mx-1 flex-wrap'}>\n        <EditorPreferences />\n      </ButtonGroup>\n    </ButtonToolbar>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport { convertClipboardTableToMarkdown, isTable } from '../../table-extractor'\nimport { handleUpload } from '../../upload-handler'\nimport { insertAtCursor } from './toolbarButtonUtils'\nimport { isCursorInCodefence } from './codefenceDetection'\n\ntype ClipboardDataFormats = 'text' | 'url' | 'text/plain' | 'text/uri-list' | 'text/html'\n\nexport interface PasteEvent {\n  clipboardData: {\n    files: FileList\n    getData: (format: ClipboardDataFormats) => string\n  }\n  preventDefault: () => void\n}\n\nexport const handleTablePaste = (event: PasteEvent, editor: Editor): boolean => {\n  const pasteText = event.clipboardData.getData('text')\n  if (!pasteText || isCursorInCodefence(editor) || !isTable(pasteText)) {\n    return false\n  }\n  event.preventDefault()\n  const markdownTable = convertClipboardTableToMarkdown(pasteText)\n  insertAtCursor(editor, markdownTable)\n  return true\n}\n\nexport const handleFilePaste = (event: PasteEvent, editor: Editor): boolean => {\n  if (!event.clipboardData.files || event.clipboardData.files.length < 1) {\n    return false\n  }\n  event.preventDefault()\n  const files: FileList = event.clipboardData.files\n  if (files && files.length >= 1) {\n    handleUpload(files[0], editor)\n    return true\n  }\n  return false\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\n\nexport const isCursorInCodefence = (editor: Editor): boolean => {\n  const currentLine = editor.getCursor().line\n  let codefenceCount = 0\n  for (let line = currentLine; line >= 0; --line) {\n    const markdownContentLine = editor.getDoc().getLine(line)\n    if (markdownContentLine.startsWith('```')) {\n      codefenceCount++\n    }\n  }\n  return codefenceCount % 2 === 1\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { createNumberRangeArray } from '../../common/number-range/number-range'\n\nexport const isTable = (text: string): boolean => {\n  // Tables must consist of multiple rows and columns\n  if (!text.includes('\\n') || !text.includes('\\t')) {\n    return false\n  }\n  // Code within code blocks should not be parsed as a table\n  if (text.startsWith('```')) {\n    return false\n  }\n\n  const lines = text.split(/\\r?\\n/).filter((line) => line.trim() !== '')\n\n  // Tab-indented text should not be matched as a table\n  if (lines.every((line) => line.startsWith('\\t'))) {\n    return false\n  }\n  // Every line should have the same amount of tabs (table columns)\n  const tabsPerLines = lines.map((line) => line.match(/\\t/g)?.length ?? 0)\n  return tabsPerLines.every((line) => line === tabsPerLines[0])\n}\n\nexport const convertClipboardTableToMarkdown = (pasteData: string): string => {\n  if (pasteData.trim() === '') {\n    return ''\n  }\n  const tableRows = pasteData.split(/\\r?\\n/).filter((row) => row.trim() !== '')\n  const tableCells = tableRows.reduce((cellsInRow, row, index) => {\n    cellsInRow[index] = row.split('\\t')\n    return cellsInRow\n  }, [] as string[][])\n  const arrayMaxRows = createNumberRangeArray(tableCells.length)\n  const arrayMaxColumns = createNumberRangeArray(Math.max(...tableCells.map((row) => row.length)))\n\n  const headRow1 = arrayMaxColumns.map((col) => `| #${col + 1} `).join('') + '|'\n  const headRow2 = arrayMaxColumns.map((col) => `| -${'-'.repeat((col + 1).toString().length)} `).join('') + '|'\n  const body = arrayMaxRows\n    .map((row) => {\n      return arrayMaxColumns.map((col) => '| ' + tableCells[row][col] + ' ').join('') + '|'\n    })\n    .join('\\n')\n  return `${headRow1}\\n${headRow2}\\n${body}`\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, EditorChange, EditorConfiguration, ScrollInfo } from 'codemirror'\nimport 'codemirror/addon/comment/comment'\nimport 'codemirror/addon/dialog/dialog'\nimport 'codemirror/addon/display/autorefresh'\nimport 'codemirror/addon/display/fullscreen'\nimport 'codemirror/addon/display/placeholder'\nimport 'codemirror/addon/edit/closebrackets'\nimport 'codemirror/addon/edit/closetag'\nimport 'codemirror/addon/edit/continuelist'\nimport 'codemirror/addon/edit/matchbrackets'\nimport 'codemirror/addon/edit/matchtags'\nimport 'codemirror/addon/fold/foldcode'\nimport 'codemirror/addon/fold/foldgutter'\nimport 'codemirror/addon/fold/markdown-fold'\nimport 'codemirror/addon/hint/show-hint'\nimport 'codemirror/addon/search/jump-to-line'\nimport 'codemirror/addon/search/match-highlighter'\nimport 'codemirror/addon/search/search'\nimport 'codemirror/addon/selection/active-line'\nimport 'codemirror/keymap/emacs'\nimport 'codemirror/keymap/sublime'\nimport 'codemirror/keymap/vim'\nimport 'codemirror/mode/gfm/gfm'\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { Controlled as ControlledCodeMirror } from 'react-codemirror2'\nimport { useTranslation } from 'react-i18next'\nimport { MaxLengthWarningModal } from '../editor-modals/max-length-warning-modal'\nimport { ScrollProps, ScrollState } from '../synced-scroll/scroll-props'\nimport { allHinters, findWordAtCursor } from './autocompletion'\nimport './editor-pane.scss'\nimport { defaultKeyMap } from './key-map'\nimport { createStatusInfo, defaultState, StatusBar, StatusBarInfo } from './status-bar/status-bar'\nimport { ToolBar } from './tool-bar/tool-bar'\nimport { handleUpload } from './upload-handler'\nimport { handleFilePaste, handleTablePaste, PasteEvent } from './tool-bar/utils/pasteHandlers'\nimport { useApplicationState } from '../../../hooks/common/use-application-state'\n\nexport interface EditorPaneProps {\n  onContentChange: (content: string) => void\n  content: string\n}\n\nconst onChange = (editor: Editor) => {\n  for (const hinter of allHinters) {\n    const searchTerm = findWordAtCursor(editor)\n    if (hinter.wordRegExp.test(searchTerm.text)) {\n      editor.showHint({\n        hint: hinter.hint,\n        completeSingle: false,\n        completeOnSingleClick: false,\n        alignWithWord: true\n      })\n      return\n    }\n  }\n}\n\ninterface DropEvent {\n  pageX: number\n  pageY: number\n  dataTransfer: {\n    files: FileList\n    effectAllowed: string\n  } | null\n  preventDefault: () => void\n}\n\nexport const EditorPane: React.FC<EditorPaneProps & ScrollProps> = ({\n  onContentChange,\n  content,\n  scrollState,\n  onScroll,\n  onMakeScrollSource\n}) => {\n  const { t } = useTranslation()\n  const maxLength = useApplicationState((state) => state.config.maxDocumentLength)\n  const smartPasteEnabled = useApplicationState((state) => state.editorConfig.smartPaste)\n  const [showMaxLengthWarning, setShowMaxLengthWarning] = useState(false)\n  const maxLengthWarningAlreadyShown = useRef(false)\n  const [editor, setEditor] = useState<Editor>()\n  const [statusBarInfo, setStatusBarInfo] = useState<StatusBarInfo>(defaultState)\n  const editorPreferences = useApplicationState((state) => state.editorConfig.preferences)\n  const ligaturesEnabled = useApplicationState((state) => state.editorConfig.ligatures)\n\n  const lastScrollPosition = useRef<number>()\n  const [editorScroll, setEditorScroll] = useState<ScrollInfo>()\n  const onEditorScroll = useCallback((editor: Editor, data: ScrollInfo) => setEditorScroll(data), [])\n\n  const onPaste = useCallback(\n    (pasteEditor: Editor, event: PasteEvent) => {\n      if (!event || !event.clipboardData) {\n        return\n      }\n      if (smartPasteEnabled) {\n        const tableInserted = handleTablePaste(event, pasteEditor)\n        if (tableInserted) {\n          return\n        }\n      }\n      handleFilePaste(event, pasteEditor)\n    },\n    [smartPasteEnabled]\n  )\n\n  useEffect(() => {\n    if (!editor || !onScroll || !editorScroll) {\n      return\n    }\n    const line = editor.lineAtHeight(editorScroll.top, 'local')\n    const startYOfLine = editor.heightAtLine(line, 'local')\n    const lineInfo = editor.lineInfo(line)\n    if (lineInfo === null) {\n      return\n    }\n    const heightOfLine = (lineInfo.handle as { height: number }).height\n    const percentageRaw = Math.max(editorScroll.top - startYOfLine, 0) / heightOfLine\n    const percentage = Math.floor(percentageRaw * 100)\n\n    const newScrollState: ScrollState = { firstLineInView: line + 1, scrolledPercentage: percentage }\n    onScroll(newScrollState)\n  }, [editor, editorScroll, onScroll])\n\n  useEffect(() => {\n    if (!editor || !scrollState) {\n      return\n    }\n    const startYOfLine = editor.heightAtLine(scrollState.firstLineInView - 1, 'local')\n    const heightOfLine = (editor.lineInfo(scrollState.firstLineInView - 1).handle as { height: number }).height\n    const newPositionRaw = startYOfLine + (heightOfLine * scrollState.scrolledPercentage) / 100\n    const newPosition = Math.floor(newPositionRaw)\n    if (newPosition !== lastScrollPosition.current) {\n      lastScrollPosition.current = newPosition\n      editor.scrollTo(0, newPosition)\n    }\n  }, [editor, scrollState])\n\n  const onBeforeChange = useCallback(\n    (editor: Editor, data: EditorChange, value: string) => {\n      if (value.length > maxLength && !maxLengthWarningAlreadyShown.current) {\n        setShowMaxLengthWarning(true)\n        maxLengthWarningAlreadyShown.current = true\n      }\n      if (value.length <= maxLength) {\n        maxLengthWarningAlreadyShown.current = false\n      }\n      onContentChange(value)\n    },\n    [onContentChange, maxLength, maxLengthWarningAlreadyShown]\n  )\n  const onEditorDidMount = useCallback(\n    (mountedEditor: Editor) => {\n      setStatusBarInfo(createStatusInfo(mountedEditor, maxLength))\n      setEditor(mountedEditor)\n    },\n    [maxLength]\n  )\n\n  const onCursorActivity = useCallback(\n    (editorWithActivity: Editor) => {\n      setStatusBarInfo(createStatusInfo(editorWithActivity, maxLength))\n    },\n    [maxLength]\n  )\n\n  const onDrop = useCallback((dropEditor: Editor, event: DropEvent) => {\n    if (\n      event &&\n      dropEditor &&\n      event.pageX &&\n      event.pageY &&\n      event.dataTransfer &&\n      event.dataTransfer.files &&\n      event.dataTransfer.files.length >= 1\n    ) {\n      event.preventDefault()\n      const top: number = event.pageY\n      const left: number = event.pageX\n      const newCursor = dropEditor.coordsChar({ top, left }, 'page')\n      dropEditor.setCursor(newCursor)\n      const files: FileList = event.dataTransfer.files\n      handleUpload(files[0], dropEditor)\n    }\n  }, [])\n\n  const onMaxLengthHide = useCallback(() => setShowMaxLengthWarning(false), [])\n\n  const codeMirrorOptions: EditorConfiguration = useMemo<EditorConfiguration>(\n    () => ({\n      ...editorPreferences,\n      mode: 'gfm',\n      viewportMargin: 20,\n      styleActiveLine: true,\n      lineNumbers: true,\n      lineWrapping: true,\n      showCursorWhenSelecting: true,\n      highlightSelectionMatches: true,\n      inputStyle: 'textarea',\n      matchBrackets: true,\n      autoCloseBrackets: true,\n      matchTags: {\n        bothTags: true\n      },\n      autoCloseTags: true,\n      foldGutter: true,\n      gutters: ['CodeMirror-linenumbers', 'authorship-gutters', 'CodeMirror-foldgutter'],\n      extraKeys: defaultKeyMap,\n      flattenSpans: true,\n      addModeClass: true,\n      autoRefresh: true,\n      // otherCursors: true,\n      placeholder: t('editor.placeholder')\n    }),\n    [t, editorPreferences]\n  )\n\n  return (\n    <div className={'d-flex flex-column h-100 position-relative'} onMouseEnter={onMakeScrollSource}>\n      <MaxLengthWarningModal show={showMaxLengthWarning} onHide={onMaxLengthHide} maxLength={maxLength} />\n      <ToolBar editor={editor} />\n      <ControlledCodeMirror\n        className={`overflow-hidden w-100 flex-fill ${ligaturesEnabled ? '' : 'no-ligatures'}`}\n        value={content}\n        options={codeMirrorOptions}\n        onChange={onChange}\n        onPaste={onPaste}\n        onDrop={onDrop}\n        onCursorActivity={onCursorActivity}\n        editorDidMount={onEditorDidMount}\n        onBeforeChange={onBeforeChange}\n        onScroll={onEditorScroll}\n      />\n      <StatusBar {...statusBarInfo} />\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { useEffect } from 'react'\nimport { setEditorMode } from '../../../redux/editor/methods'\nimport { EditorMode } from '../app-bar/editor-view-mode'\n\nconst shortcutHandler = (event: KeyboardEvent): void => {\n  if (event.ctrlKey && event.altKey && event.key === 'b') {\n    setEditorMode(EditorMode.BOTH)\n    event.preventDefault()\n  }\n\n  if (event.ctrlKey && event.altKey && event.key === 'v') {\n    setEditorMode(EditorMode.PREVIEW)\n    event.preventDefault()\n  }\n\n  if (event.ctrlKey && event.altKey && (event.key === 'e' || event.key === '€')) {\n    setEditorMode(EditorMode.EDITOR)\n    event.preventDefault()\n  }\n}\n\nexport const useViewModeShortcuts = (): void => {\n  useEffect(() => {\n    document.addEventListener('keydown', shortcutHandler, false)\n    return () => {\n      document.removeEventListener('keydown', shortcutHandler, false)\n    }\n  }, [])\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { ForkAwesomeIcon } from '../../common/fork-awesome/fork-awesome-icon'\nimport { IconName } from '../../common/fork-awesome/types'\nimport { ShowIf } from '../../common/show-if/show-if'\nimport { SidebarEntryProps } from './types'\n\nexport type SidebarEntryVariant = 'primary'\n\nexport const SidebarButton: React.FC<SidebarEntryProps> = ({\n  children,\n  icon,\n  className,\n  variant,\n  buttonRef,\n  hide,\n  ...props\n}) => {\n  return (\n    <button\n      ref={buttonRef}\n      className={`sidebar-entry ${hide ? 'hide' : ''} ${variant ? `sidebar-entry-${variant}` : ''} ${className ?? ''}`}\n      {...props}>\n      <ShowIf condition={!!icon}>\n        <span className={'sidebar-icon'}>\n          <ForkAwesomeIcon icon={icon as IconName} />\n        </span>\n      </ShowIf>\n      <span className={'sidebar-text'}>{children}</span>\n    </button>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { DeletionModal } from '../../common/modals/deletion-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const DeleteNoteSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ hide, className }) => {\n  useTranslation()\n  const [showDialog, setShowDialog] = useState(false)\n\n  return (\n    <Fragment>\n      <SidebarButton icon={'trash'} className={className} hide={hide} onClick={() => setShowDialog(true)}>\n        <Trans i18nKey={'landing.history.menu.deleteNote'} />\n      </SidebarButton>\n      <DeletionModal\n        onConfirm={() => setShowDialog(false)}\n        deletionButtonI18nKey={'editor.modal.deleteNote.button'}\n        show={showDialog}\n        onHide={() => setShowDialog(false)}\n        titleI18nKey={'editor.modal.deleteNote.title'}>\n        <h5>\n          <Trans i18nKey={'editor.modal.deleteNote.question'} />\n        </h5>\n        <ul>\n          <li> noteTitle</li>\n        </ul>\n        <h6>\n          <Trans i18nKey={'editor.modal.deleteNote.warning'} />\n        </h6>\n      </DeletionModal>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\n\nexport interface UnitalicBoldTextProps {\n  text: string\n}\n\nexport const UnitalicBoldText: React.FC<UnitalicBoldTextProps> = ({ text }) => {\n  return <b className={'font-style-normal mr-1'}>{text}</b>\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { DateTime } from 'luxon'\nimport React from 'react'\nimport { ListGroup, Modal } from 'react-bootstrap'\nimport { Trans } from 'react-i18next'\nimport { CommonModal } from '../../../common/modals/common-modal'\nimport { DocumentInfoLine } from './document-info-line'\nimport { DocumentInfoLineWithTimeMode, DocumentInfoTimeLine } from './document-info-time-line'\nimport { UnitalicBoldText } from './unitalic-bold-text'\nimport { useCustomizeAssetsUrl } from '../../../../hooks/common/use-customize-assets-url'\n\nexport interface DocumentInfoModalProps {\n  show: boolean\n  onHide: () => void\n}\n\nexport const DocumentInfoModal: React.FC<DocumentInfoModalProps> = ({ show, onHide }) => {\n  const assetsBaseUrl = useCustomizeAssetsUrl()\n\n  // TODO Replace hardcoded mock data with real/mock API requests\n  return (\n    <CommonModal show={show} onHide={onHide} closeButton={true} titleI18nKey={'editor.modal.documentInfo.title'}>\n      <Modal.Body>\n        <ListGroup>\n          <ListGroup.Item>\n            <DocumentInfoTimeLine\n              size={'2x'}\n              mode={DocumentInfoLineWithTimeMode.CREATED}\n              time={DateTime.local().minus({ days: 11 })}\n              userName={'Tilman'}\n              profileImageSrc={`${assetsBaseUrl}img/avatar.png`}\n            />\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <DocumentInfoTimeLine\n              size={'2x'}\n              mode={DocumentInfoLineWithTimeMode.EDITED}\n              time={DateTime.local().minus({ minutes: 3 })}\n              userName={'Philip'}\n              profileImageSrc={`${assetsBaseUrl}img/avatar.png`}\n            />\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <DocumentInfoLine icon={'users'} size={'2x'}>\n              <Trans i18nKey='editor.modal.documentInfo.usersContributed'>\n                <UnitalicBoldText text={'42'} />\n              </Trans>\n            </DocumentInfoLine>\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <DocumentInfoLine icon={'history'} size={'2x'}>\n              <Trans i18nKey='editor.modal.documentInfo.revisions'>\n                <UnitalicBoldText text={'192'} />\n              </Trans>\n            </DocumentInfoLine>\n          </ListGroup.Item>\n        </ListGroup>\n      </Modal.Body>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { DocumentInfoModal } from '../document-bar/document-info/document-info-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const DocumentInfoSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ className, hide }) => {\n  const [showModal, setShowModal] = useState(false)\n  useTranslation()\n\n  return (\n    <Fragment>\n      <SidebarButton hide={hide} className={className} icon={'line-chart'} onClick={() => setShowModal(true)}>\n        <Trans i18nKey={'editor.modal.documentInfo.title'} />\n      </SidebarButton>\n      <DocumentInfoModal show={showModal} onHide={() => setShowModal(false)} />\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback } from 'react'\nimport sanitize from 'sanitize-filename'\nimport { store } from '../../../redux'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { useNoteMarkdownContent } from '../../../hooks/common/use-note-markdown-content'\nimport { download } from '../../common/download/download'\nimport { SidebarButton } from './sidebar-button'\n\nexport const ExportMarkdownSidebarEntry: React.FC = () => {\n  const { t } = useTranslation()\n  const markdownContent = useNoteMarkdownContent()\n  const onClick = useCallback(() => {\n    const sanitized = sanitize(store.getState().noteDetails.noteTitle)\n    download(markdownContent, `${sanitized !== '' ? sanitized : t('editor.untitledNote')}.md`, 'text/markdown')\n  }, [markdownContent, t])\n\n  return (\n    <SidebarButton data-cy={'menu-export-markdown'} onClick={onClick} icon={'file-text'}>\n      <Trans i18nKey={'editor.export.markdown-file'} />\n    </SidebarButton>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { SidebarMenuProps } from './types'\n\nexport const SidebarMenu: React.FC<SidebarMenuProps> = ({ children, expand }) => {\n  return (\n    <div className={`sidebar-menu ${expand ? 'show' : ''}`}>\n      <div className={`d-flex flex-column`}>{children}</div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useCallback } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport links from '../../../links.json'\nimport { ExportMarkdownSidebarEntry } from './export-markdown-sidebar-entry'\nimport { SidebarButton } from './sidebar-button'\nimport { SidebarMenu } from './sidebar-menu'\nimport { DocumentSidebarMenuSelection, SpecificSidebarMenuProps } from './types'\n\nexport const ExportMenuSidebarMenu: React.FC<SpecificSidebarMenuProps> = ({\n  className,\n  menuId,\n  onClick,\n  selectedMenuId\n}) => {\n  useTranslation()\n\n  const hide = selectedMenuId !== DocumentSidebarMenuSelection.NONE && selectedMenuId !== menuId\n  const expand = selectedMenuId === menuId\n  const onClickHandler = useCallback(() => {\n    onClick(menuId)\n  }, [menuId, onClick])\n\n  return (\n    <Fragment>\n      <SidebarButton\n        data-cy={'menu-export'}\n        hide={hide}\n        icon={expand ? 'arrow-left' : 'cloud-download'}\n        className={className}\n        onClick={onClickHandler}>\n        <Trans i18nKey={'editor.documentBar.export'} />\n      </SidebarButton>\n      <SidebarMenu expand={expand}>\n        <SidebarButton icon={'github'}>Gist</SidebarButton>\n        <SidebarButton icon={'gitlab'}>Gitlab Snippet</SidebarButton>\n\n        <ExportMarkdownSidebarEntry />\n\n        <SidebarButton icon={'file-code-o'}>HTML</SidebarButton>\n        <SidebarButton icon={'file-code-o'}>\n          <Trans i18nKey='editor.export.rawHtml' />\n        </SidebarButton>\n        <SidebarButton icon={'file-pdf-o'}>\n          <a className='small text-muted' dir={'auto'} href={links.faq} target={'_blank'} rel='noopener noreferrer'>\n            <Trans i18nKey={'editor.export.pdf'} />\n            &nbsp;\n            <span className={'text-primary'}>\n              <Trans i18nKey={'common.why'} />\n            </span>\n          </a>\n        </SidebarButton>\n      </SidebarMenu>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { ToggleButton, ToggleButtonGroup } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\n\nexport interface PermissionGroupEntryProps {\n  title: string\n  editMode: GroupMode\n  onChangeEditMode: (newMode: GroupMode) => void\n}\n\nexport enum GroupMode {\n  NONE,\n  VIEW,\n  EDIT\n}\n\nexport const PermissionGroupEntry: React.FC<PermissionGroupEntryProps> = ({ title, editMode, onChangeEditMode }) => {\n  const { t } = useTranslation()\n\n  return (\n    <li className={'list-group-item d-flex flex-row justify-content-between align-items-center'}>\n      <Trans i18nKey={title} />\n      <ToggleButtonGroup type='radio' name='edit-mode' value={editMode} onChange={onChangeEditMode}>\n        <ToggleButton\n          title={t('editor.modal.permissions.denyGroup', { name: t(title) })}\n          variant={'light'}\n          className={'text-secondary'}\n          value={GroupMode.NONE}>\n          <ForkAwesomeIcon icon='ban' />\n        </ToggleButton>\n        <ToggleButton\n          title={t('editor.modal.permissions.viewOnlyGroup', { name: t(title) })}\n          variant={'light'}\n          className={'text-secondary'}\n          value={GroupMode.VIEW}>\n          <ForkAwesomeIcon icon='eye' />\n        </ToggleButton>\n        <ToggleButton\n          title={t('editor.modal.permissions.editGroup', { name: t(title) })}\n          variant={'light'}\n          className={'text-secondary'}\n          value={GroupMode.EDIT}>\n          <ForkAwesomeIcon icon='pencil' />\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </li>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useCallback, useRef } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { useNoteMarkdownContent } from '../../../hooks/common/use-note-markdown-content'\nimport { setNoteMarkdownContent } from '../../../redux/note-details/methods'\nimport { SidebarButton } from './sidebar-button'\nimport { UploadInput } from './upload-input'\n\nexport const ImportMarkdownSidebarEntry: React.FC = () => {\n  const markdownContent = useNoteMarkdownContent()\n  useTranslation()\n\n  const onImportMarkdown = useCallback(\n    (file: File) => {\n      return new Promise<void>((resolve, reject) => {\n        const fileReader = new FileReader()\n        fileReader.addEventListener('load', () => {\n          const newContent = fileReader.result as string\n          setNoteMarkdownContent(markdownContent.length === 0 ? newContent : `${markdownContent}\\n${newContent}`)\n        })\n        fileReader.addEventListener('loadend', () => {\n          resolve()\n        })\n        fileReader.addEventListener('error', (error) => {\n          reject(error)\n        })\n        fileReader.readAsText(file)\n      })\n    },\n    [markdownContent]\n  )\n\n  const clickRef = useRef<() => void>()\n  const buttonClick = useCallback(() => {\n    clickRef.current?.()\n  }, [])\n\n  return (\n    <Fragment>\n      <SidebarButton data-cy={'menu-import-markdown'} icon={'file-text-o'} onClick={buttonClick}>\n        <Trans i18nKey={'editor.import.file'} />\n      </SidebarButton>\n      <UploadInput\n        onLoad={onImportMarkdown}\n        data-cy={'menu-import-markdown-input'}\n        acceptedFiles={'.md, text/markdown, text/plain'}\n        onClickRef={clickRef}\n      />\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useCallback } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { ImportMarkdownSidebarEntry } from './import-markdown-sidebar-entry'\nimport { SidebarButton } from './sidebar-button'\nimport { SidebarMenu } from './sidebar-menu'\nimport { DocumentSidebarMenuSelection, SpecificSidebarMenuProps } from './types'\n\nexport const ImportMenuSidebarMenu: React.FC<SpecificSidebarMenuProps> = ({\n  className,\n  menuId,\n  onClick,\n  selectedMenuId\n}) => {\n  useTranslation()\n\n  const hide = selectedMenuId !== DocumentSidebarMenuSelection.NONE && selectedMenuId !== menuId\n  const expand = selectedMenuId === menuId\n  const onClickHandler = useCallback(() => {\n    onClick(menuId)\n  }, [menuId, onClick])\n\n  return (\n    <Fragment>\n      <SidebarButton\n        data-cy={'menu-import'}\n        hide={hide}\n        icon={expand ? 'arrow-left' : 'cloud-upload'}\n        className={className}\n        onClick={onClickHandler}>\n        <Trans i18nKey={'editor.documentBar.import'} />\n      </SidebarButton>\n      <SidebarMenu expand={expand}>\n        <SidebarButton icon={'github'}>Gist</SidebarButton>\n        <SidebarButton icon={'gitlab'}>Gitlab Snippet</SidebarButton>\n        <SidebarButton icon={'clipboard'}>\n          <Trans i18nKey={'editor.import.clipboard'} />\n        </SidebarButton>\n        <ImportMarkdownSidebarEntry />\n      </SidebarMenu>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport interface CacheEntry<T> {\n  entryCreated: number\n  data: T\n}\n\nexport class Cache<K, V> {\n  readonly entryLifetime: number\n  readonly maxEntries: number\n  private store = new Map<K, CacheEntry<V>>()\n\n  constructor(lifetime: number, maxEntries = 0) {\n    if (lifetime < 0) {\n      throw new Error('Cache entry lifetime can not be less than 0 seconds.')\n    }\n    this.entryLifetime = lifetime\n    this.maxEntries = maxEntries\n  }\n\n  has(key: K): boolean {\n    if (!this.store.has(key)) {\n      return false\n    }\n    const entry = this.store.get(key)\n    return !!entry && entry.entryCreated >= Date.now() - this.entryLifetime * 1000\n  }\n\n  get(key: K): V {\n    const entry = this.store.get(key)\n    if (!entry) {\n      throw new Error('This cache entry does not exist. Check with \".has()\" before using \".get()\".')\n    }\n    return entry.data\n  }\n\n  put(key: K, value: V): void {\n    if (this.maxEntries > 0 && this.store.size === this.maxEntries) {\n      this.store.delete(this.store.keys().next().value)\n    }\n    this.store.set(key, {\n      entryCreated: Date.now(),\n      data: value\n    })\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Cache } from '../../components/common/cache/cache'\nimport { defaultFetchConfig, expectResponseCode, getApiUrl } from '../utils'\nimport { UserResponse } from './types'\n\nconst cache = new Cache<string, UserResponse>(600)\n\nexport const getUserById = async (userid: string): Promise<UserResponse> => {\n  if (cache.has(userid)) {\n    return cache.get(userid)\n  }\n  const response = await fetch(`${getApiUrl()}/users/${userid}`, {\n    ...defaultFetchConfig\n  })\n  expectResponseCode(response)\n  const userData = (await response.json()) as UserResponse\n  cache.put(userid, userData)\n  return userData\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { ReactElement, useState } from 'react'\nimport { Button, FormControl, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\nimport { Principal } from './permission-modal'\n\nexport interface PermissionListProps {\n  list: Principal[]\n  identifier: (entry: Principal) => ReactElement\n  changeEditMode: (id: Principal['id'], canEdit: Principal['canEdit']) => void\n  removeEntry: (id: Principal['id']) => void\n  createEntry: (name: Principal['name']) => void\n  editI18nKey: string\n  viewI18nKey: string\n  removeI18nKey: string\n  addI18nKey: string\n}\n\nexport enum EditMode {\n  VIEW,\n  EDIT\n}\n\nexport const PermissionList: React.FC<PermissionListProps> = ({\n  list,\n  identifier,\n  changeEditMode,\n  removeEntry,\n  createEntry,\n  editI18nKey,\n  viewI18nKey,\n  removeI18nKey,\n  addI18nKey\n}) => {\n  const { t } = useTranslation()\n  const [newEntry, setNewEntry] = useState('')\n\n  const addEntry = () => {\n    createEntry(newEntry)\n    setNewEntry('')\n  }\n\n  return (\n    <ul className={'list-group'}>\n      {list.map((entry) => (\n        <li key={entry.id} className={'list-group-item d-flex flex-row justify-content-between align-items-center'}>\n          {identifier(entry)}\n          <div>\n            <Button\n              variant='light'\n              className={'text-danger mr-2'}\n              title={t(removeI18nKey, { name: entry.name })}\n              onClick={() => removeEntry(entry.id)}>\n              <ForkAwesomeIcon icon={'times'} />\n            </Button>\n            <ToggleButtonGroup\n              type='radio'\n              name='edit-mode'\n              value={entry.canEdit ? EditMode.EDIT : EditMode.VIEW}\n              onChange={(value: EditMode) => changeEditMode(entry.id, value === EditMode.EDIT)}>\n              <ToggleButton\n                title={t(viewI18nKey, { name: entry.name })}\n                variant={'light'}\n                className={'text-secondary'}\n                value={EditMode.VIEW}>\n                <ForkAwesomeIcon icon='eye' />\n              </ToggleButton>\n              <ToggleButton\n                title={t(editI18nKey, { name: entry.name })}\n                variant={'light'}\n                className={'text-secondary'}\n                value={EditMode.EDIT}>\n                <ForkAwesomeIcon icon='pencil' />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </li>\n      ))}\n      <li className={'list-group-item'}>\n        <form\n          onSubmit={(event) => {\n            event.preventDefault()\n            addEntry()\n          }}>\n          <InputGroup className={'mr-1 mb-1'}>\n            <FormControl\n              value={newEntry}\n              placeholder={t(addI18nKey)}\n              aria-label={t(addI18nKey)}\n              onChange={(event) => setNewEntry(event.currentTarget.value)}\n            />\n            <Button variant='light' className={'text-secondary ml-2'} title={t(addI18nKey)} onClick={addEntry}>\n              <ForkAwesomeIcon icon={'plus'} />\n            </Button>\n          </InputGroup>\n        </form>\n      </li>\n    </ul>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport './active-indicator.scss'\n\nexport enum ActiveIndicatorStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive'\n}\n\nexport interface ActiveIndicatorProps {\n  status: ActiveIndicatorStatus\n}\n\nexport const ActiveIndicator: React.FC<ActiveIndicatorProps> = ({ status }) => {\n  return <span className={`activeIndicator ${status}`} />\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useEffect, useState } from 'react'\nimport { Alert, Modal } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { getUserById } from '../../../../api/users'\nimport { CommonModal } from '../../../common/modals/common-modal'\nimport { ShowIf } from '../../../common/show-if/show-if'\nimport { UserAvatar, UserAvatarProps } from '../../../common/user-avatar/user-avatar'\nimport { GroupMode, PermissionGroupEntry } from './permission-group-entry'\nimport { PermissionList } from './permission-list'\n\nexport interface PermissionsModalProps {\n  show: boolean\n  onHide: () => void\n}\n\nexport interface Principal {\n  id: string\n  name: string\n  photo: string\n  canEdit: boolean\n}\n\ninterface NotePermissions {\n  owner: string\n  sharedTo: {\n    username: string\n    canEdit: boolean\n  }[]\n  sharedToGroup: {\n    id: string\n    canEdit: boolean\n  }[]\n}\n\nexport const EVERYONE_GROUP_ID = '1'\nexport const EVERYONE_LOGGED_IN_GROUP_ID = '2'\n\nconst permissionsApiResponse: NotePermissions = {\n  owner: 'dermolly',\n  sharedTo: [\n    {\n      username: 'emcrx',\n      canEdit: true\n    },\n    {\n      username: 'mrdrogdrog',\n      canEdit: false\n    }\n  ],\n  sharedToGroup: [\n    {\n      id: EVERYONE_GROUP_ID,\n      canEdit: true\n    },\n    {\n      id: EVERYONE_LOGGED_IN_GROUP_ID,\n      canEdit: false\n    }\n  ]\n}\n\nexport const PermissionModal: React.FC<PermissionsModalProps> = ({ show, onHide }) => {\n  useTranslation()\n  const [error, setError] = useState(false)\n  const [userList, setUserList] = useState<Principal[]>([])\n  const [owner, setOwner] = useState<UserAvatarProps>()\n  const [allUserPermissions, setAllUserPermissions] = useState(GroupMode.NONE)\n  const [allLoggedInUserPermissions, setAllLoggedInUserPermissions] = useState(GroupMode.NONE)\n\n  useEffect(() => {\n    // set owner\n    getUserById(permissionsApiResponse.owner)\n      .then((response) => {\n        setOwner({\n          name: response.name,\n          photo: response.photo\n        })\n      })\n      .catch(() => setError(true))\n    // set user List\n    permissionsApiResponse.sharedTo.forEach((shareUser) => {\n      getUserById(shareUser.username)\n        .then((response) => {\n          setUserList((list) =>\n            list.concat([\n              {\n                id: response.id,\n                name: response.name,\n                photo: response.photo,\n                canEdit: shareUser.canEdit\n              }\n            ])\n          )\n        })\n        .catch(() => setError(true))\n    })\n    // set group List\n    permissionsApiResponse.sharedToGroup.forEach((sharedGroup) => {\n      if (sharedGroup.id === EVERYONE_GROUP_ID) {\n        setAllUserPermissions(sharedGroup.canEdit ? GroupMode.EDIT : GroupMode.VIEW)\n      } else if (sharedGroup.id === EVERYONE_LOGGED_IN_GROUP_ID) {\n        setAllLoggedInUserPermissions(sharedGroup.canEdit ? GroupMode.EDIT : GroupMode.VIEW)\n      }\n    })\n  }, [])\n\n  const changeUserMode = (userId: Principal['id'], canEdit: Principal['canEdit']) => {\n    setUserList((list) =>\n      list.map((user) => {\n        if (user.id === userId) {\n          user.canEdit = canEdit\n        }\n        return user\n      })\n    )\n  }\n\n  const removeUser = (userId: Principal['id']) => {\n    setUserList((list) => list.filter((user) => user.id !== userId))\n  }\n\n  const addUser = (name: Principal['name']) => {\n    setUserList((list) =>\n      list.concat({\n        id: name,\n        photo: '/img/avatar.png',\n        name: name,\n        canEdit: false\n      })\n    )\n  }\n\n  return (\n    <CommonModal show={show} onHide={onHide} closeButton={true} titleI18nKey={'editor.modal.permissions.title'}>\n      <Modal.Body>\n        <h5 className={'mb-3'}>\n          <Trans i18nKey={'editor.modal.permissions.owner'} />\n        </h5>\n        <ShowIf condition={error}>\n          <Alert variant='danger'>\n            <Trans i18nKey='editor.modal.permissions.error' />\n          </Alert>\n        </ShowIf>\n        <ul className={'list-group'}>\n          <li className={'list-group-item d-flex flex-row align-items-center'}>\n            <UserAvatar name={owner?.name ?? ''} photo={owner?.photo ?? ''} />\n          </li>\n        </ul>\n        <h5 className={'my-3'}>\n          <Trans i18nKey={'editor.modal.permissions.sharedWithUsers'} />\n        </h5>\n        <PermissionList\n          list={userList}\n          identifier={(entry) => <UserAvatar name={entry.name} photo={entry.photo} />}\n          changeEditMode={changeUserMode}\n          removeEntry={removeUser}\n          createEntry={addUser}\n          editI18nKey={'editor.modal.permissions.editUser'}\n          viewI18nKey={'editor.modal.permissions.viewOnlyUser'}\n          removeI18nKey={'editor.modal.permissions.removeUser'}\n          addI18nKey={'editor.modal.permissions.addUser'}\n        />\n        <h5 className={'my-3'}>\n          <Trans i18nKey={'editor.modal.permissions.sharedWithGroups'} />\n        </h5>\n        <ul className={'list-group'}>\n          <PermissionGroupEntry\n            title={'editor.modal.permissions.allUser'}\n            editMode={allUserPermissions}\n            onChangeEditMode={setAllUserPermissions}\n          />\n          <PermissionGroupEntry\n            title={'editor.modal.permissions.allLoggedInUser'}\n            editMode={allLoggedInUserPermissions}\n            onChangeEditMode={setAllLoggedInUserPermissions}\n          />\n        </ul>\n      </Modal.Body>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { PermissionModal } from '../document-bar/permissions/permission-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const PermissionsSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ className, hide }) => {\n  const [showModal, setShowModal] = useState(false)\n  useTranslation()\n\n  return (\n    <Fragment>\n      <SidebarButton hide={hide} className={className} icon={'lock'} onClick={() => setShowModal(true)}>\n        <Trans i18nKey={'editor.modal.permissions.title'} />\n      </SidebarButton>\n      <PermissionModal show={showModal} onHide={() => setShowModal(false)} />\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useMemo } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\nimport { useParams } from 'react-router-dom'\nimport { EditorPagePathParams } from '../editor-page'\nimport { toggleHistoryEntryPinning } from '../../../redux/history/methods'\nimport { showErrorNotification } from '../../../redux/ui-notifications/methods'\nimport { useApplicationState } from '../../../hooks/common/use-application-state'\n\nexport const PinNoteSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ className, hide }) => {\n  const { t } = useTranslation()\n  const { id } = useParams<EditorPagePathParams>()\n  const history = useApplicationState((state) => state.history)\n\n  const isPinned = useMemo(() => {\n    const entry = history.find((entry) => entry.identifier === id)\n    if (!entry) {\n      return false\n    }\n    return entry.pinStatus\n  }, [id, history])\n\n  const onPinClicked = useCallback(() => {\n    toggleHistoryEntryPinning(id).catch(showErrorNotification(t('landing.history.error.updateEntry.text')))\n  }, [id, t])\n\n  return (\n    <SidebarButton\n      icon={'thumb-tack'}\n      hide={hide}\n      onClick={onPinClicked}\n      className={`${className ?? ''} ${isPinned ? 'icon-highlighted' : ''}`}>\n      <Trans i18nKey={isPinned ? 'editor.documentBar.pinnedToHistory' : 'editor.documentBar.pinNoteToHistory'} />\n    </SidebarButton>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Cache } from '../../components/common/cache/cache'\nimport { defaultFetchConfig, expectResponseCode, getApiUrl } from '../utils'\nimport { Revision, RevisionListEntry } from './types'\n\nconst revisionCache = new Cache<string, Revision>(3600)\n\nexport const getRevision = async (noteId: string, timestamp: number): Promise<Revision> => {\n  const cacheKey = `${noteId}:${timestamp}`\n  if (revisionCache.has(cacheKey)) {\n    return revisionCache.get(cacheKey)\n  }\n  const response = await fetch(getApiUrl() + `notes/${noteId}/revisions/${timestamp}`, {\n    ...defaultFetchConfig\n  })\n  expectResponseCode(response)\n  const revisionData = (await response.json()) as Revision\n  revisionCache.put(cacheKey, revisionData)\n  return revisionData\n}\n\nexport const getAllRevisions = async (noteId: string): Promise<RevisionListEntry[]> => {\n  // TODO Change 'revisions-list' to 'revisions' as soon as the backend is ready to serve some data!\n  const response = await fetch(getApiUrl() + `notes/${noteId}/revisions-list`, {\n    ...defaultFetchConfig\n  })\n  expectResponseCode(response)\n  return (await response.json()) as Promise<RevisionListEntry[]>\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { DateTime } from 'luxon'\nimport React from 'react'\nimport { ListGroup } from 'react-bootstrap'\nimport { Trans } from 'react-i18next'\nimport { RevisionListEntry } from '../../../../api/revisions/types'\nimport { UserResponse } from '../../../../api/users/types'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\nimport { UserAvatar } from '../../../common/user-avatar/user-avatar'\n\nexport interface RevisionModalListEntryProps {\n  active: boolean\n  onClick: () => void\n  revision: RevisionListEntry\n  revisionAuthorListMap: Map<number, UserResponse[]>\n}\n\nexport const RevisionModalListEntry: React.FC<RevisionModalListEntryProps> = ({\n  active,\n  onClick,\n  revision,\n  revisionAuthorListMap\n}) => (\n  <ListGroup.Item\n    as='li'\n    active={active}\n    onClick={onClick}\n    className='user-select-none revision-item d-flex flex-column'>\n    <span>\n      <ForkAwesomeIcon icon={'clock-o'} className='mx-2' />\n      {DateTime.fromMillis(revision.timestamp * 1000).toFormat('DDDD T')}\n    </span>\n    <span>\n      <ForkAwesomeIcon icon={'file-text-o'} className='mx-2' />\n      <Trans i18nKey={'editor.modal.revision.length'} />: {revision.length}\n    </span>\n    <span className={'d-flex flex-row my-1 align-items-center'}>\n      <ForkAwesomeIcon icon={'user-o'} className={'mx-2'} />\n      {revisionAuthorListMap.get(revision.timestamp)?.map((user, index) => {\n        return (\n          <UserAvatar name={user.name} photo={user.photo} showName={false} additionalClasses={'mx-1'} key={index} />\n        )\n      })}\n    </span>\n  </ListGroup.Item>\n)\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Alert, Button, Col, ListGroup, Modal, Row } from 'react-bootstrap'\nimport ReactDiffViewer, { DiffMethod } from 'react-diff-viewer'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { useParams } from 'react-router'\nimport { getAllRevisions, getRevision } from '../../../../api/revisions'\nimport { Revision, RevisionListEntry } from '../../../../api/revisions/types'\nimport { UserResponse } from '../../../../api/users/types'\nimport { useIsDarkModeActivated } from '../../../../hooks/common/use-is-dark-mode-activated'\nimport { useNoteMarkdownContent } from '../../../../hooks/common/use-note-markdown-content'\nimport { CommonModal } from '../../../common/modals/common-modal'\nimport { ShowIf } from '../../../common/show-if/show-if'\nimport { RevisionModalListEntry } from './revision-modal-list-entry'\nimport './revision-modal.scss'\nimport { downloadRevision, getUserDataForRevision } from './utils'\n\nexport interface PermissionsModalProps {\n  show: boolean\n  onHide: () => void\n}\n\nexport const RevisionModal: React.FC<PermissionsModalProps> = ({ show, onHide }) => {\n  useTranslation()\n  const [revisions, setRevisions] = useState<RevisionListEntry[]>([])\n  const [selectedRevisionTimestamp, setSelectedRevisionTimestamp] = useState<number | null>(null)\n  const [selectedRevision, setSelectedRevision] = useState<Revision | null>(null)\n  const [error, setError] = useState(false)\n  const revisionAuthorListMap = useRef(new Map<number, UserResponse[]>())\n  const darkModeEnabled = useIsDarkModeActivated()\n  const { id } = useParams<{ id: string }>()\n\n  useEffect(() => {\n    getAllRevisions(id)\n      .then((fetchedRevisions) => {\n        fetchedRevisions.forEach((revision) => {\n          const authorData = getUserDataForRevision(revision.authors)\n          revisionAuthorListMap.current.set(revision.timestamp, authorData)\n        })\n        setRevisions(fetchedRevisions)\n        if (fetchedRevisions.length >= 1) {\n          setSelectedRevisionTimestamp(fetchedRevisions[0].timestamp)\n        }\n      })\n      .catch(() => setError(true))\n  }, [setRevisions, setError, id])\n\n  useEffect(() => {\n    if (selectedRevisionTimestamp === null) {\n      return\n    }\n    getRevision(id, selectedRevisionTimestamp)\n      .then((fetchedRevision) => {\n        setSelectedRevision(fetchedRevision)\n      })\n      .catch(() => setError(true))\n  }, [selectedRevisionTimestamp, id])\n\n  const markdownContent = useNoteMarkdownContent()\n\n  return (\n    <CommonModal\n      show={show}\n      onHide={onHide}\n      titleI18nKey={'editor.modal.revision.title'}\n      icon={'history'}\n      closeButton={true}\n      size={'xl'}\n      additionalClasses='revision-modal'>\n      <Modal.Body>\n        <Row>\n          <Col lg={4} className={'scroll-col'}>\n            <ListGroup as='ul'>\n              {revisions.map((revision, revisionIndex) => (\n                <RevisionModalListEntry\n                  key={revisionIndex}\n                  active={selectedRevisionTimestamp === revision.timestamp}\n                  revision={revision}\n                  revisionAuthorListMap={revisionAuthorListMap.current}\n                  onClick={() => setSelectedRevisionTimestamp(revision.timestamp)}\n                />\n              ))}\n            </ListGroup>\n          </Col>\n          <Col lg={8} className={'scroll-col'}>\n            <ShowIf condition={error}>\n              <Alert variant='danger'>\n                <Trans i18nKey='editor.modal.revision.error' />\n              </Alert>\n            </ShowIf>\n            <ShowIf condition={!error && !!selectedRevision}>\n              <ReactDiffViewer\n                oldValue={selectedRevision?.content}\n                newValue={markdownContent}\n                splitView={false}\n                compareMethod={DiffMethod.WORDS}\n                useDarkTheme={darkModeEnabled}\n              />\n            </ShowIf>\n          </Col>\n        </Row>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant='secondary' onClick={onHide}>\n          <Trans i18nKey={'common.close'} />\n        </Button>\n        <Button\n          variant='danger'\n          disabled={!selectedRevisionTimestamp}\n          onClick={() => window.alert('Not yet implemented. Requires websocket.')}>\n          <Trans i18nKey={'editor.modal.revision.revertButton'} />\n        </Button>\n        <Button\n          variant='primary'\n          disabled={!selectedRevisionTimestamp}\n          onClick={() => downloadRevision(id, selectedRevision)}>\n          <Trans i18nKey={'editor.modal.revision.download'} />\n        </Button>\n      </Modal.Footer>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Revision } from '../../../../api/revisions/types'\nimport { getUserById } from '../../../../api/users'\nimport { UserResponse } from '../../../../api/users/types'\nimport { download } from '../../../common/download/download'\n\nexport const downloadRevision = (noteId: string, revision: Revision | null): void => {\n  if (!revision) {\n    return\n  }\n  download(revision.content, `${noteId}-${revision.timestamp}.md`, 'text/markdown')\n}\n\nexport const getUserDataForRevision = (authors: string[]): UserResponse[] => {\n  const users: UserResponse[] = []\n  authors.forEach((author, index) => {\n    if (index > 9) {\n      return\n    }\n    getUserById(author)\n      .then((userData) => {\n        users.push(userData)\n      })\n      .catch((error) => console.error(error))\n  })\n  return users\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans } from 'react-i18next'\nimport { RevisionModal } from '../document-bar/revisions/revision-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const RevisionSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ className, hide }) => {\n  const [showModal, setShowModal] = useState(false)\n\n  return (\n    <Fragment>\n      <SidebarButton hide={hide} className={className} icon={'history'} onClick={() => setShowModal(true)}>\n        <Trans i18nKey={'editor.modal.revision.title'} />\n      </SidebarButton>\n      <RevisionModal show={showModal} onHide={() => setShowModal(false)} />\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { Modal } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { useParams } from 'react-router-dom'\nimport { useFrontendBaseUrl } from '../../../../hooks/common/use-frontend-base-url'\nimport { CopyableField } from '../../../common/copyable/copyable-field/copyable-field'\nimport { CommonModal } from '../../../common/modals/common-modal'\nimport { ShowIf } from '../../../common/show-if/show-if'\nimport { EditorPagePathParams } from '../../editor-page'\nimport { NoteType } from '../../note-frontmatter/note-frontmatter'\nimport { useApplicationState } from '../../../../hooks/common/use-application-state'\n\nexport interface ShareModalProps {\n  show: boolean\n  onHide: () => void\n}\n\nexport const ShareModal: React.FC<ShareModalProps> = ({ show, onHide }) => {\n  useTranslation()\n  const noteFrontmatter = useApplicationState((state) => state.noteDetails.frontmatter)\n  const editorMode = useApplicationState((state) => state.editorConfig.editorMode)\n  const baseUrl = useFrontendBaseUrl()\n  const { id } = useParams<EditorPagePathParams>()\n\n  return (\n    <CommonModal show={show} onHide={onHide} closeButton={true} titleI18nKey={'editor.modal.shareLink.title'}>\n      <Modal.Body>\n        <Trans i18nKey={'editor.modal.shareLink.editorDescription'} />\n        <CopyableField\n          content={`${baseUrl}n/${id}?${editorMode}`}\n          nativeShareButton={true}\n          url={`${baseUrl}n/${id}?${editorMode}`}\n        />\n        <ShowIf condition={noteFrontmatter.type === NoteType.SLIDE}>\n          <Trans i18nKey={'editor.modal.shareLink.slidesDescription'} />\n          <CopyableField content={`${baseUrl}p/${id}`} nativeShareButton={true} url={`${baseUrl}p/${id}`} />\n        </ShowIf>\n        <ShowIf condition={noteFrontmatter.type === ''}>\n          <Trans i18nKey={'editor.modal.shareLink.viewOnlyDescription'} />\n          <CopyableField content={`${baseUrl}s/${id}`} nativeShareButton={true} url={`${baseUrl}s/${id}`} />\n        </ShowIf>\n      </Modal.Body>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { ShareModal } from '../document-bar/share/share-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const ShareSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ className, hide }) => {\n  const [showModal, setShowModal] = useState(false)\n  useTranslation()\n\n  return (\n    <Fragment>\n      <SidebarButton hide={hide} className={className} icon={'share'} onClick={() => setShowModal(true)}>\n        <Trans i18nKey={'editor.modal.shareLink.title'} />\n      </SidebarButton>\n      <ShareModal show={showModal} onHide={() => setShowModal(false)} />\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useMemo, useRef, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useApplyDarkMode } from '../../hooks/common/use-apply-dark-mode'\nimport { useDocumentTitleWithNoteTitle } from '../../hooks/common/use-document-title-with-note-title'\nimport { useNoteMarkdownContent } from '../../hooks/common/use-note-markdown-content'\nimport {\n  setCheckboxInMarkdownContent,\n  setNoteFrontmatter,\n  setNoteMarkdownContent,\n  updateNoteTitleByFirstHeading\n} from '../../redux/note-details/methods'\nimport { MotdBanner } from '../common/motd-banner/motd-banner'\nimport { ShowIf } from '../common/show-if/show-if'\nimport { ErrorWhileLoadingNoteAlert } from '../document-read-only-page/ErrorWhileLoadingNoteAlert'\nimport { LoadingNoteAlert } from '../document-read-only-page/LoadingNoteAlert'\nimport { AppBar, AppBarMode } from './app-bar/app-bar'\nimport { EditorMode } from './app-bar/editor-view-mode'\nimport { EditorPane } from './editor-pane/editor-pane'\nimport { useLoadNoteFromServer } from './hooks/useLoadNoteFromServer'\nimport { useViewModeShortcuts } from './hooks/useViewModeShortcuts'\nimport { RenderIframe } from './renderer-pane/render-iframe'\nimport { Sidebar } from './sidebar/sidebar'\nimport { Splitter } from './splitter/splitter'\nimport { DualScrollState, ScrollState } from './synced-scroll/scroll-props'\nimport { RendererType } from '../render-page/rendering-message'\nimport { useEditorModeFromUrl } from './hooks/useEditorModeFromUrl'\nimport { UiNotifications } from '../notifications/ui-notifications'\nimport { useNotificationTest } from './use-notification-test'\nimport { IframeEditorToRendererCommunicatorContextProvider } from './render-context/iframe-editor-to-renderer-communicator-context-provider'\nimport { useUpdateLocalHistoryEntry } from './hooks/useUpdateLocalHistoryEntry'\nimport { useApplicationState } from '../../hooks/common/use-application-state'\n\nexport interface EditorPagePathParams {\n  id: string\n}\n\nexport enum ScrollSource {\n  EDITOR,\n  RENDERER\n}\n\nexport const EditorPage: React.FC = () => {\n  useTranslation()\n  const markdownContent = useNoteMarkdownContent()\n  const scrollSource = useRef<ScrollSource>(ScrollSource.EDITOR)\n\n  const editorMode: EditorMode = useApplicationState((state) => state.editorConfig.editorMode)\n  const editorSyncScroll: boolean = useApplicationState((state) => state.editorConfig.syncScroll)\n\n  const [scrollState, setScrollState] = useState<DualScrollState>(() => ({\n    editorScrollState: { firstLineInView: 1, scrolledPercentage: 0 },\n    rendererScrollState: { firstLineInView: 1, scrolledPercentage: 0 }\n  }))\n\n  const onMarkdownRendererScroll = useCallback(\n    (newScrollState: ScrollState) => {\n      if (scrollSource.current === ScrollSource.RENDERER && editorSyncScroll) {\n        setScrollState((old) => ({ editorScrollState: newScrollState, rendererScrollState: old.rendererScrollState }))\n      }\n    },\n    [editorSyncScroll]\n  )\n\n  const onEditorScroll = useCallback(\n    (newScrollState: ScrollState) => {\n      if (scrollSource.current === ScrollSource.EDITOR && editorSyncScroll) {\n        setScrollState((old) => ({ rendererScrollState: newScrollState, editorScrollState: old.editorScrollState }))\n      }\n    },\n    [editorSyncScroll]\n  )\n\n  useViewModeShortcuts()\n  useApplyDarkMode()\n  useDocumentTitleWithNoteTitle()\n  useEditorModeFromUrl()\n\n  const [error, loading] = useLoadNoteFromServer()\n\n  useUpdateLocalHistoryEntry(!error && !loading)\n\n  const setRendererToScrollSource = useCallback(() => {\n    scrollSource.current = ScrollSource.RENDERER\n  }, [])\n\n  const setEditorToScrollSource = useCallback(() => {\n    scrollSource.current = ScrollSource.EDITOR\n  }, [])\n\n  useNotificationTest()\n\n  const leftPane = useMemo(\n    () => (\n      <EditorPane\n        onContentChange={setNoteMarkdownContent}\n        content={markdownContent}\n        scrollState={scrollState.editorScrollState}\n        onScroll={onEditorScroll}\n        onMakeScrollSource={setEditorToScrollSource}\n      />\n    ),\n    [markdownContent, onEditorScroll, scrollState.editorScrollState, setEditorToScrollSource]\n  )\n\n  const rightPane = useMemo(\n    () => (\n      <RenderIframe\n        frameClasses={'h-100 w-100'}\n        markdownContent={markdownContent}\n        onMakeScrollSource={setRendererToScrollSource}\n        onFirstHeadingChange={updateNoteTitleByFirstHeading}\n        onTaskCheckedChange={setCheckboxInMarkdownContent}\n        onFrontmatterChange={setNoteFrontmatter}\n        onScroll={onMarkdownRendererScroll}\n        scrollState={scrollState.rendererScrollState}\n        rendererType={RendererType.DOCUMENT}\n      />\n    ),\n    [markdownContent, onMarkdownRendererScroll, scrollState.rendererScrollState, setRendererToScrollSource]\n  )\n\n  return (\n    <IframeEditorToRendererCommunicatorContextProvider>\n      <UiNotifications />\n      <MotdBanner />\n      <div className={'d-flex flex-column vh-100'}>\n        <AppBar mode={AppBarMode.EDITOR} />\n        <div className={'container'}>\n          <ErrorWhileLoadingNoteAlert show={error} />\n          <LoadingNoteAlert show={loading} />\n        </div>\n        <ShowIf condition={!error && !loading}>\n          <div className={'flex-fill d-flex h-100 w-100 overflow-hidden flex-row'}>\n            <Splitter\n              showLeft={editorMode === EditorMode.EDITOR || editorMode === EditorMode.BOTH}\n              left={leftPane}\n              showRight={editorMode === EditorMode.PREVIEW || editorMode === EditorMode.BOTH}\n              right={rightPane}\n              additionalContainerClassName={'overflow-hidden'}\n            />\n            <Sidebar />\n          </div>\n        </ShowIf>\n      </div>\n    </IframeEditorToRendererCommunicatorContextProvider>\n  )\n}\n\nexport default EditorPage\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { UserAvatar } from '../../../common/user-avatar/user-avatar'\nimport { ActiveIndicator, ActiveIndicatorStatus } from './active-indicator'\nimport './user-line.scss'\n\nexport interface UserLineProps {\n  name: string\n  photo: string\n  color: string\n  status: ActiveIndicatorStatus\n}\n\nexport const UserLine: React.FC<UserLineProps> = ({ name, photo, color, status }) => {\n  return (\n    <div className={'d-flex align-items-center h-100 w-100'}>\n      <div className='d-inline-flex align-items-bottom user-line-color-indicator' style={{ borderLeftColor: color }} />\n      <UserAvatar photo={photo} name={name} additionalClasses={'flex-fill overflow-hidden px-2 text-nowrap w-100'} />\n      <div className={'active-indicator-container'}>\n        <ActiveIndicator status={status} />\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useCallback, useEffect, useRef, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { SidebarButton } from '../sidebar-button'\nimport { SidebarMenu } from '../sidebar-menu'\nimport { DocumentSidebarMenuSelection, SpecificSidebarMenuProps } from '../types'\nimport { ActiveIndicatorStatus } from './active-indicator'\nimport './online-counter.scss'\nimport { UserLine } from './user-line'\n\nexport const UsersOnlineSidebarMenu: React.FC<SpecificSidebarMenuProps> = ({\n  className,\n  menuId,\n  onClick,\n  selectedMenuId\n}) => {\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const [counter] = useState(2)\n  useTranslation()\n\n  useEffect(() => {\n    const value = `${counter}`\n    buttonRef.current?.style.setProperty('--users-online', `\"${value}\"`)\n  }, [counter])\n\n  const hide = selectedMenuId !== DocumentSidebarMenuSelection.NONE && selectedMenuId !== menuId\n  const expand = selectedMenuId === menuId\n  const onClickHandler = useCallback(() => {\n    onClick(menuId)\n  }, [menuId, onClick])\n\n  return (\n    <Fragment>\n      <SidebarButton\n        hide={hide}\n        buttonRef={buttonRef}\n        onClick={onClickHandler}\n        icon={expand ? 'arrow-left' : 'users'}\n        variant={'primary'}\n        className={`online-entry ${className ?? ''}`}>\n        <Trans i18nKey={'editor.onlineStatus.online'} />\n      </SidebarButton>\n      <SidebarMenu expand={expand}>\n        <SidebarButton>\n          <UserLine name='Philip Molares' photo='/img/avatar.png' color='red' status={ActiveIndicatorStatus.INACTIVE} />\n        </SidebarButton>\n        <SidebarButton>\n          <UserLine\n            name='Tilman Vatteroth'\n            photo='/img/avatar.png'\n            color='blue'\n            status={ActiveIndicatorStatus.ACTIVE}\n          />\n        </SidebarButton>\n      </SidebarMenu>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useRef, useState } from 'react'\nimport { useClickAway } from 'react-use'\nimport { DeleteNoteSidebarEntry } from './delete-note-sidebar-entry'\nimport { DocumentInfoSidebarEntry } from './document-info-sidebar-entry'\nimport { ExportMenuSidebarMenu } from './export-menu-sidebar-menu'\nimport { ImportMenuSidebarMenu } from './import-menu-sidebar-menu'\nimport { PermissionsSidebarEntry } from './permissions-sidebar-entry'\nimport { PinNoteSidebarEntry } from './pin-note-sidebar-entry'\nimport { RevisionSidebarEntry } from './revision-sidebar-entry'\nimport { ShareSidebarEntry } from './share-sidebar-entry'\nimport './style/theme.scss'\nimport { DocumentSidebarMenuSelection } from './types'\nimport { UsersOnlineSidebarMenu } from './users-online-sidebar-menu/users-online-sidebar-menu'\n\nexport const Sidebar: React.FC = () => {\n  const sideBarRef = useRef<HTMLDivElement>(null)\n  const [selectedMenu, setSelectedMenu] = useState<DocumentSidebarMenuSelection>(DocumentSidebarMenuSelection.NONE)\n\n  useClickAway(sideBarRef, () => {\n    setSelectedMenu(DocumentSidebarMenuSelection.NONE)\n  })\n\n  const toggleValue = useCallback(\n    (toggleValue: DocumentSidebarMenuSelection): void => {\n      const newValue = selectedMenu === toggleValue ? DocumentSidebarMenuSelection.NONE : toggleValue\n      setSelectedMenu(newValue)\n    },\n    [selectedMenu]\n  )\n\n  const selectionIsNotNone = selectedMenu !== DocumentSidebarMenuSelection.NONE\n\n  return (\n    <div className='slide-sidebar'>\n      <div ref={sideBarRef} className={`sidebar-inner ${selectionIsNotNone ? 'show' : ''}`}>\n        <UsersOnlineSidebarMenu\n          menuId={DocumentSidebarMenuSelection.USERS_ONLINE}\n          selectedMenuId={selectedMenu}\n          onClick={toggleValue}\n        />\n        <DocumentInfoSidebarEntry hide={selectionIsNotNone} />\n        <RevisionSidebarEntry hide={selectionIsNotNone} />\n        <PermissionsSidebarEntry hide={selectionIsNotNone} />\n        <ImportMenuSidebarMenu\n          menuId={DocumentSidebarMenuSelection.IMPORT}\n          selectedMenuId={selectedMenu}\n          onClick={toggleValue}\n        />\n        <ExportMenuSidebarMenu\n          menuId={DocumentSidebarMenuSelection.EXPORT}\n          selectedMenuId={selectedMenu}\n          onClick={toggleValue}\n        />\n        <ShareSidebarEntry hide={selectionIsNotNone} />\n        <DeleteNoteSidebarEntry hide={selectionIsNotNone} />\n        <PinNoteSidebarEntry hide={selectionIsNotNone} />\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport './split-divider.scss'\n\nexport interface SplitDividerProps {\n  onGrab: () => void\n}\n\nexport const SplitDivider: React.FC<SplitDividerProps> = ({ onGrab }) => {\n  return <div onMouseDown={() => onGrab()} onTouchStart={() => onGrab()} className={'split-divider'} />\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { ReactElement, useCallback, useEffect, useRef, useState } from 'react'\nimport { ShowIf } from '../../common/show-if/show-if'\nimport { SplitDivider } from './split-divider/split-divider'\nimport './splitter.scss'\n\nexport interface SplitterProps {\n  left: ReactElement\n  right: ReactElement\n  additionalContainerClassName?: string\n  showLeft: boolean\n  showRight: boolean\n}\n\n/**\n * Checks if the given {@link Event} is a {@link MouseEvent}\n * @param event the event to check\n * @return {@code true} if the given event is a {@link MouseEvent}\n */\nconst isMouseEvent = (event: Event): event is MouseEvent => {\n  return (event as MouseEvent).buttons !== undefined\n}\n\nconst isLeftMouseButtonClicked = (mouseEvent: MouseEvent): boolean => {\n  return mouseEvent.buttons === 1\n}\n\n/**\n * Extracts the absolute horizontal position of the mouse or touch point from the event.\n * If no position could be found or\n *\n * @param moveEvent\n */\nconst extractHorizontalPosition = (moveEvent: MouseEvent | TouchEvent): number => {\n  if (isMouseEvent(moveEvent)) {\n    return moveEvent.pageX\n  } else {\n    return moveEvent.touches[0]?.pageX\n  }\n}\n\n/**\n * Creates a Left/Right splitter react component.\n *\n * @param additionalContainerClassName css classes that are added to the split container.\n * @param left the react component that should be shown on the left side.\n * @param right the react component that should be shown on the right side.\n * @param showLeft defines if the left component should be shown or hidden. Settings this prop will hide the component with css.\n * @param showRight defines if the right component should be shown or hidden. Settings this prop will hide the component with css.\n * @return the created component\n */\nexport const Splitter: React.FC<SplitterProps> = ({\n  additionalContainerClassName,\n  left,\n  right,\n  showLeft,\n  showRight\n}) => {\n  const [relativeSplitValue, setRelativeSplitValue] = useState(50)\n  const cappedRelativeSplitValue = Math.max(0, Math.min(100, showRight ? relativeSplitValue : 100))\n  const resizingInProgress = useRef(false)\n  const splitContainer = useRef<HTMLDivElement>(null)\n\n  /**\n   * Starts the splitter resizing\n   */\n  const onStartResizing = useCallback(() => {\n    resizingInProgress.current = true\n  }, [])\n\n  /**\n   * Stops the splitter resizing\n   */\n  const onStopResizing = useCallback(() => {\n    if (resizingInProgress.current) {\n      resizingInProgress.current = false\n    }\n  }, [])\n\n  /**\n   * Recalculates the panel split based on the absolute mouse/touch position.\n   *\n   * @param moveEvent is a {@link MouseEvent} or {@link TouchEvent} that got triggered.\n   */\n  const onMove = useCallback((moveEvent: MouseEvent | TouchEvent) => {\n    if (!resizingInProgress.current || !splitContainer.current) {\n      return\n    }\n    if (isMouseEvent(moveEvent) && !isLeftMouseButtonClicked(moveEvent)) {\n      resizingInProgress.current = false\n      moveEvent.preventDefault()\n      return undefined\n    }\n\n    const horizontalPosition = extractHorizontalPosition(moveEvent)\n    const horizontalPositionInSplitContainer = horizontalPosition - splitContainer.current.offsetLeft\n    const newRelativeSize = horizontalPositionInSplitContainer / splitContainer.current.clientWidth\n    setRelativeSplitValue(newRelativeSize * 100)\n    moveEvent.preventDefault()\n  }, [])\n\n  /**\n   * Registers and unregisters necessary event listeners on the body so you can use the split even if the mouse isn't moving over it.\n   */\n  useEffect(() => {\n    const moveHandler = onMove\n    const stopResizeHandler = onStopResizing\n    window.addEventListener('touchmove', moveHandler)\n    window.addEventListener('mousemove', moveHandler)\n    window.addEventListener('touchcancel', stopResizeHandler)\n    window.addEventListener('touchend', stopResizeHandler)\n    window.addEventListener('mouseup', stopResizeHandler)\n\n    return () => {\n      window.removeEventListener('touchmove', moveHandler)\n      window.removeEventListener('mousemove', moveHandler)\n      window.removeEventListener('touchcancel', stopResizeHandler)\n      window.removeEventListener('touchend', stopResizeHandler)\n      window.removeEventListener('mouseup', stopResizeHandler)\n    }\n  }, [resizingInProgress, onMove, onStopResizing])\n\n  return (\n    <div ref={splitContainer} className={`flex-fill flex-row d-flex ${additionalContainerClassName || ''}`}>\n      <div\n        className={`splitter left ${!showLeft ? 'd-none' : ''}`}\n        style={{ width: `calc(${cappedRelativeSplitValue}% - 5px)` }}>\n        {left}\n      </div>\n      <ShowIf condition={showLeft && showRight}>\n        <div className='splitter separator'>\n          <SplitDivider onGrab={onStartResizing} />\n        </div>\n      </ShowIf>\n      <div\n        className={`splitter right ${!showRight ? 'd-none' : ''}`}\n        style={{ width: `calc(100% - ${cappedRelativeSplitValue}%)` }}>\n        {right}\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { useEffect } from 'react'\nimport { DEFAULT_DURATION_IN_SECONDS, dispatchUiNotification } from '../../redux/ui-notifications/methods'\n\nconst localStorageKey = 'dontshowtestnotification'\n\nexport const useNotificationTest = (): void => {\n  useEffect(() => {\n    if (window.localStorage.getItem(localStorageKey)) {\n      return\n    }\n    console.debug('[Notifications] Dispatched test notification')\n    dispatchUiNotification('Notification-Test!', 'It Works!', DEFAULT_DURATION_IN_SECONDS, 'info-circle', [\n      {\n        label: \"Don't show again\",\n        onClick: () => {\n          window.localStorage.setItem(localStorageKey, '1')\n        }\n      }\n    ])\n  }, [])\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { useEffect } from 'react'\nimport { EditorMode } from '../app-bar/editor-view-mode'\nimport { setEditorMode } from '../../../redux/editor/methods'\nimport { useLocation } from 'react-router'\n\nexport const useEditorModeFromUrl = (): void => {\n  const { search } = useLocation()\n\n  useEffect(() => {\n    const requestedMode = search.substr(1)\n    const mode = Object.values(EditorMode).find((mode) => mode === requestedMode)\n    if (mode) {\n      setEditorMode(mode)\n    }\n  }, [search])\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport equal from 'fast-deep-equal'\nimport { useEffect, useRef } from 'react'\nimport { store } from '../../../redux'\nimport { useParams } from 'react-router-dom'\nimport { EditorPagePathParams } from '../editor-page'\nimport { HistoryEntry, HistoryEntryOrigin } from '../../../redux/history/types'\nimport { updateLocalHistoryEntry } from '../../../redux/history/methods'\nimport { useApplicationState } from '../../../hooks/common/use-application-state'\n\nexport const useUpdateLocalHistoryEntry = (updateReady: boolean): void => {\n  const { id } = useParams<EditorPagePathParams>()\n  const userExists = useApplicationState((state) => !!state.user)\n  const currentNoteTitle = useApplicationState((state) => state.noteDetails.noteTitle)\n  const currentNoteTags = useApplicationState((state) => state.noteDetails.frontmatter.tags)\n\n  const lastNoteTitle = useRef('')\n  const lastNoteTags = useRef<string[]>([])\n\n  useEffect(() => {\n    if (!updateReady || userExists) {\n      return\n    }\n    if (currentNoteTitle === lastNoteTitle.current && equal(currentNoteTags, lastNoteTags.current)) {\n      return\n    }\n    const history = store.getState().history\n    const entry: HistoryEntry = history.find((entry) => entry.identifier === id) ?? {\n      identifier: id,\n      title: '',\n      pinStatus: false,\n      lastVisited: '',\n      tags: [],\n      origin: HistoryEntryOrigin.LOCAL\n    }\n    if (entry.origin === HistoryEntryOrigin.REMOTE) {\n      return\n    }\n    entry.title = currentNoteTitle\n    entry.tags = currentNoteTags\n    entry.lastVisited = new Date().toISOString()\n    updateLocalHistoryEntry(id, entry)\n    lastNoteTitle.current = currentNoteTitle\n    lastNoteTags.current = currentNoteTags\n  }, [updateReady, id, userExists, currentNoteTitle, currentNoteTags])\n}\n"],"sourceRoot":""}