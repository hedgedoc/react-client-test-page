{"version":3,"sources":["components/common/copyable/copy-to-clipboard-button/copy-to-clipboard-button.tsx","components/markdown-renderer/replace-components/highlighted-fence/highlighted-code/highlighted-code.tsx"],"names":["CopyToClipboardButton","content","size","variant","props","t","useTranslation","button","useRef","Button","ref","title","data-cy","icon","clickComponent","HighlightedCode","code","language","startLineNumber","wrapLines","useState","dom","setDom","useEffect","then","hljs","lang","replacedDom","split","filter","line","map","ReactHtmlParser","replaceCode","default","listLanguages","includes","highlight","value","replaceAll","index","className","catch","console","error","undefined"],"mappings":"0TAoBaA,EAA8D,SAAC,GAKrE,IAJLC,EAII,EAJJA,QAII,IAHJC,YAGI,MAHG,KAGH,MAFJC,eAEI,MAFM,OAEN,EADDC,EACC,4CACIC,EAAMC,cAAND,EACFE,EAASC,iBAA0B,MAEzC,OACE,eAAC,WAAD,WACE,cAACC,EAAA,EAAD,CAAQC,IAAMH,EAASL,KAAOA,EAAOC,QAAUA,EAAUQ,MAAQN,EAAE,mCAC3DO,UAAUR,EAAM,WADxB,SAEE,cAAC,IAAD,CAAiBS,KAAK,cAExB,cAAC,IAAD,CAAaZ,QAAUA,EAAUa,eAAiBP,QCE3CQ,G,cAAkD,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,gBAAiBC,EAAgB,EAAhBA,UAAgB,EAC3FC,qBAD2F,mBAC1GC,EAD0G,KACrGC,EADqG,KA0BjH,OAvBAC,qBAAU,WACR,sDAA8EC,MAAK,SAACC,GAClF,IAA2BC,EAGrBC,EAdQ,SAACX,GACnB,OAAOA,EAAKY,MAAM,MACNC,QAAO,SAAAC,GAAI,QAAMA,KACjBC,KAAI,SAAAD,GAAI,OAAIE,IAAgBF,MAWhBG,CADKhB,IAFES,EAE4BT,EAFXQ,EAAKS,QAAQC,gBACRC,SAASV,IACSD,EAAKS,QAAQG,UAAUpB,EAAUD,GAAMsB,MAAmBtB,EApB9HuB,WAAW,KAAM,SACjBA,WAAW,KAAM,QACjBA,WAAW,KAAM,QACjBA,WAAW,KAAM,UACjBA,WAAW,KAAM,WAkBbR,KAAI,SAACD,EAAMU,GAAP,OACH,eAAC,WAAD,WACA,sBAAMC,UAAY,aAAlB,UACKvB,GAAmB,GAAKsB,IAE3B,qBAAKC,UAAY,WAAjB,SACIX,MALUU,MASpBlB,EAAOK,MAEqEe,OAAM,WACLC,QAAQC,MAAM,yCAE5F,CAAC5B,EAAMC,EAAUC,IAGlB,eAAC,WAAD,WACE,sBACEuB,UAAS,oBAAgCI,IAApB3B,EAAgC,aAAe,GAA3D,YAAmEC,EAAY,YAAc,IADxG,SAEIE,IAEJ,qBAAKoB,UAAY,2BAAjB,SACE,cAAC,EAAD,CAAuBxC,QAAUe,EAAOJ,UAAQ,4BAKzCG","file":"static/js/24.188f0e80.chunk.js","sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useRef } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { Variant } from 'react-bootstrap/types'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../fork-awesome/fork-awesome-icon'\nimport { CopyOverlay } from '../copy-overlay'\n\nexport interface CopyToClipboardButtonProps {\n  content: string\n  size?: 'sm' | 'lg'\n  variant?: Variant\n  'data-cy'?: string\n}\n\nexport const CopyToClipboardButton: React.FC<CopyToClipboardButtonProps> = ({\n  content,\n  size = 'sm',\n  variant = 'dark',\n  ...props\n}) => {\n  const { t } = useTranslation()\n  const button = useRef<HTMLButtonElement>(null)\n\n  return (\n    <Fragment>\n      <Button ref={ button } size={ size } variant={ variant } title={ t('renderer.highlightCode.copyCode') }\n              data-cy={ props['data-cy'] }>\n        <ForkAwesomeIcon icon='files-o'/>\n      </Button>\n      <CopyOverlay content={ content } clickComponent={ button }/>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, ReactElement, useEffect, useState } from 'react'\nimport ReactHtmlParser from 'react-html-parser'\nimport { CopyToClipboardButton } from '../../../../common/copyable/copy-to-clipboard-button/copy-to-clipboard-button'\nimport '../../../utils/button-inside.scss'\nimport './highlighted-code.scss'\n\nexport interface HighlightedCodeProps {\n  code: string,\n  language?: string,\n  startLineNumber?: number\n  wrapLines: boolean\n}\n\n/*\n TODO: Test method or rewrite code so this is not necessary anymore\n */\nconst escapeHtml = (unsafe: string): string => {\n  return unsafe\n    .replaceAll(/&/g, '&amp;')\n    .replaceAll(/</g, '&lt;')\n    .replaceAll(/>/g, '&gt;')\n    .replaceAll(/\"/g, '&quot;')\n    .replaceAll(/'/g, '&#039;')\n}\n\nconst replaceCode = (code: string): ReactElement[][] => {\n  return code.split('\\n')\n             .filter(line => !!line)\n             .map(line => ReactHtmlParser(line))\n}\n\nexport const HighlightedCode: React.FC<HighlightedCodeProps> = ({ code, language, startLineNumber, wrapLines }) => {\n  const [dom, setDom] = useState<ReactElement[]>()\n\n  useEffect(() => {\n    import(/* webpackChunkName: \"highlight.js\" */ '../../../../common/hljs/hljs').then((hljs) => {\n      const languageSupported = (lang: string) => hljs.default.listLanguages()\n                                                      .includes(lang)\n      const unreplacedCode = !!language && languageSupported(language) ? hljs.default.highlight(language, code).value : escapeHtml(code)\n      const replacedDom = replaceCode(unreplacedCode)\n        .map((line, index) => (\n          <Fragment key={ index }>\n          <span className={ 'linenumber' }>\n            { (startLineNumber || 1) + index }\n          </span>\n            <div className={ 'codeline' }>\n              { line }\n            </div>\n          </Fragment>\n        ))\n      setDom(replacedDom)\n    })\n                                                                                 .catch(() => {\n                                                                                   console.error('error while loading highlight.js')\n                                                                                 })\n  }, [code, language, startLineNumber])\n\n  return (\n    <Fragment>\n      <code\n        className={ `hljs ${ startLineNumber !== undefined ? 'showGutter' : '' } ${ wrapLines ? 'wrapLines' : '' }` }>\n        { dom }\n      </code>\n      <div className={ 'text-right button-inside' }>\n        <CopyToClipboardButton content={ code } data-cy=\"copy-code-button\"/>\n      </div>\n    </Fragment>)\n}\n\nexport default HighlightedCode\n"],"sourceRoot":""}