{"version":3,"sources":["components/common/copyable/copy-to-clipboard-button/copy-to-clipboard-button.tsx","components/markdown-renderer/replace-components/highlighted-fence/highlighted-code/highlighted-code.tsx"],"names":["CopyToClipboardButton","content","size","variant","props","t","useTranslation","button","useRef","Button","ref","title","data-cy","icon","clickComponent","HighlightedCode","code","language","startLineNumber","wrapLines","useState","dom","setDom","useEffect","then","hljs","lang","replacedDom","split","filter","line","map","convertHtmlToReact","replaceCode","default","listLanguages","includes","highlight","value","replaceAll","index","className","catch","console","error","undefined"],"mappings":"qUAoBaA,EAA8D,SAAC,GAKrE,IAJLC,EAII,EAJJA,QAII,IAHJC,YAGI,MAHG,KAGH,MAFJC,eAEI,MAFM,OAEN,EADDC,EACC,iBACIC,EAAMC,cAAND,EACFE,EAASC,iBAA0B,MAEzC,OACE,eAAC,WAAD,WACE,cAACC,EAAA,EAAD,CACEC,IAAKH,EACLL,KAAMA,EACNC,QAASA,EACTQ,MAAON,EAAE,mCACTO,UAASR,EAAM,WALjB,SAME,cAAC,IAAD,CAAiBS,KAAK,cAExB,cAAC,IAAD,CAAaZ,QAASA,EAASa,eAAgBP,QCDxCQ,G,cAAkD,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,gBAAiBC,EAAgB,EAAhBA,UACjG,EAAsBC,qBAAtB,mBAAOC,EAAP,KAAYC,EAAZ,KAuBA,OArBAC,qBAAU,WACR,sDACGC,MAAK,SAACC,GACL,IAA2BC,EAKrBC,EAlBM,SAACX,GACnB,OAAOA,EACJY,MAAM,MACNC,QAAO,SAACC,GAAD,QAAYA,KACnBC,KAAI,SAACD,GAAD,OAAUE,IAAmBF,EAAM,OAchBG,CAHhBhB,IAFuBS,EAEOT,EAFUQ,EAAKS,QAAQC,gBAAgBC,SAASV,IAG5ED,EAAKS,QAAQG,UAAUrB,EAAM,CAAEC,aAAYqB,MAChCtB,EAxBpBuB,WAAW,KAAM,SACjBA,WAAW,KAAM,QACjBA,WAAW,KAAM,QACjBA,WAAW,KAAM,UACjBA,WAAW,KAAM,WAqBkCR,KAAI,SAACD,EAAMU,GAAP,OAClD,eAAC,WAAD,WACE,sBAAMC,UAAW,aAAjB,UAAiCvB,GAAmB,GAAKsB,IACzD,qBAAKC,UAAW,WAAhB,SAA6BX,MAFhBU,MAKjBlB,EAAOK,MAERe,OAAM,WACLC,QAAQC,MAAM,yCAEjB,CAAC5B,EAAMC,EAAUC,IAGlB,eAAC,WAAD,WACE,sBAAMuB,UAAS,oBAA8BI,IAApB3B,EAAgC,aAAe,GAAzD,YAA+DC,EAAY,YAAc,IAAxG,SACGE,IAEH,qBAAKoB,UAAW,2BAAhB,SACE,cAAC,EAAD,CAAuBxC,QAASe,EAAMJ,UAAQ,4BAMvCG","file":"static/js/26.9cc309b1.chunk.js","sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useRef } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { Variant } from 'react-bootstrap/types'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../fork-awesome/fork-awesome-icon'\nimport { CopyOverlay } from '../copy-overlay'\n\nexport interface CopyToClipboardButtonProps {\n  content: string\n  size?: 'sm' | 'lg'\n  variant?: Variant\n  'data-cy'?: string\n}\n\nexport const CopyToClipboardButton: React.FC<CopyToClipboardButtonProps> = ({\n  content,\n  size = 'sm',\n  variant = 'dark',\n  ...props\n}) => {\n  const { t } = useTranslation()\n  const button = useRef<HTMLButtonElement>(null)\n\n  return (\n    <Fragment>\n      <Button\n        ref={button}\n        size={size}\n        variant={variant}\n        title={t('renderer.highlightCode.copyCode')}\n        data-cy={props['data-cy']}>\n        <ForkAwesomeIcon icon='files-o' />\n      </Button>\n      <CopyOverlay content={content} clickComponent={button} />\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, ReactElement, useEffect, useState } from 'react'\nimport convertHtmlToReact from '@hedgedoc/html-to-react'\nimport { CopyToClipboardButton } from '../../../../common/copyable/copy-to-clipboard-button/copy-to-clipboard-button'\nimport '../../../utils/button-inside.scss'\nimport './highlighted-code.scss'\n\nexport interface HighlightedCodeProps {\n  code: string\n  language?: string\n  startLineNumber?: number\n  wrapLines: boolean\n}\n\n/*\n TODO: Test method or rewrite code so this is not necessary anymore\n */\nconst escapeHtml = (unsafe: string): string => {\n  return unsafe\n    .replaceAll(/&/g, '&amp;')\n    .replaceAll(/</g, '&lt;')\n    .replaceAll(/>/g, '&gt;')\n    .replaceAll(/\"/g, '&quot;')\n    .replaceAll(/'/g, '&#039;')\n}\n\nconst replaceCode = (code: string): (ReactElement | null | string)[][] => {\n  return code\n    .split('\\n')\n    .filter((line) => !!line)\n    .map((line) => convertHtmlToReact(line, {}))\n}\n\nexport const HighlightedCode: React.FC<HighlightedCodeProps> = ({ code, language, startLineNumber, wrapLines }) => {\n  const [dom, setDom] = useState<ReactElement[]>()\n\n  useEffect(() => {\n    import(/* webpackChunkName: \"highlight.js\" */ '../../../../common/hljs/hljs')\n      .then((hljs) => {\n        const languageSupported = (lang: string) => hljs.default.listLanguages().includes(lang)\n        const unreplacedCode =\n          !!language && languageSupported(language)\n            ? hljs.default.highlight(code, { language }).value\n            : escapeHtml(code)\n        const replacedDom = replaceCode(unreplacedCode).map((line, index) => (\n          <Fragment key={index}>\n            <span className={'linenumber'}>{(startLineNumber || 1) + index}</span>\n            <div className={'codeline'}>{line}</div>\n          </Fragment>\n        ))\n        setDom(replacedDom)\n      })\n      .catch(() => {\n        console.error('error while loading highlight.js')\n      })\n  }, [code, language, startLineNumber])\n\n  return (\n    <Fragment>\n      <code className={`hljs ${startLineNumber !== undefined ? 'showGutter' : ''} ${wrapLines ? 'wrapLines' : ''}`}>\n        {dom}\n      </code>\n      <div className={'text-right button-inside'}>\n        <CopyToClipboardButton content={code} data-cy='copy-code-button' />\n      </div>\n    </Fragment>\n  )\n}\n\nexport default HighlightedCode\n"],"sourceRoot":""}