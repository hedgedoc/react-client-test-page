{"version":3,"sources":["components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-input.tsx","components/editor-page/editor-modals/max-length-warning-modal.tsx","components/editor-page/editor-pane/autocompletion/code-block.ts","components/editor-page/editor-pane/autocompletion/collapsable-block.ts","components/editor-page/editor-pane/autocompletion/container.ts","components/editor-page/editor-pane/tool-bar/emoji-picker/forkawesome.png","components/editor-page/editor-pane/tool-bar/emoji-picker/emoji-picker.tsx","components/editor-page/editor-pane/tool-bar/utils/emojiUtils.ts","components/editor-page/editor-pane/autocompletion/emoji.ts","components/editor-page/editor-pane/autocompletion/header.ts","components/editor-page/editor-pane/autocompletion/image.ts","components/editor-page/editor-pane/autocompletion/link-and-extra-tag.ts","components/editor-page/editor-pane/autocompletion/pdf.ts","components/editor-page/editor-pane/autocompletion/index.ts","components/common/number-range/number-range.ts","components/editor-page/editor-pane/tool-bar/utils/toolbarButtonUtils.ts","components/editor-page/editor-pane/key-map.ts","components/editor-page/editor-pane/status-bar/status-bar.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-property.ts","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-boolean-property.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-ligatures-select.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-number-property.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-select-property.tsx","components/editor-page/sidebar/types.ts","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preferences.tsx","components/editor-page/editor-pane/tool-bar/emoji-picker/emoji-picker-button.tsx","components/editor-page/editor-pane/tool-bar/table-picker/custom-table-size-modal.tsx","components/editor-page/editor-pane/tool-bar/table-picker/table-picker.tsx","components/editor-page/editor-pane/tool-bar/table-picker/table-picker-button.tsx","components/editor-page/sidebar/upload-input.tsx","components/editor-page/editor-pane/tool-bar/utils/upload-image-mimetypes.ts","components/editor-page/editor-pane/upload-handler.ts","components/editor-page/editor-pane/tool-bar/upload-image-button.tsx","components/editor-page/editor-pane/tool-bar/tool-bar.tsx","components/editor-page/editor-pane/editor-pane.tsx","components/editor-page/hooks/useViewModeShortcuts.ts","components/editor-page/sidebar/sidebar-button.tsx","components/editor-page/sidebar/delete-note-sidebar-entry.tsx","components/editor-page/document-bar/document-info/unitalic-bold-text.tsx","components/editor-page/document-bar/document-info/document-info-modal.tsx","components/editor-page/sidebar/document-info-sidebar-entry.tsx","components/editor-page/sidebar/export-markdown-sidebar-entry.tsx","components/editor-page/sidebar/sidebar-menu.tsx","components/editor-page/sidebar/export-menu-sidebar-menu.tsx","components/editor-page/document-bar/permissions/permission-group-entry.tsx","components/editor-page/sidebar/import-markdown-sidebar-entry.tsx","components/editor-page/sidebar/import-menu-sidebar-menu.tsx","components/common/cache/cache.ts","api/users/index.ts","components/editor-page/document-bar/permissions/permission-list.tsx","components/editor-page/sidebar/users-online-sidebar-menu/active-indicator.tsx","components/editor-page/document-bar/permissions/permission-modal.tsx","components/editor-page/sidebar/permissions-sidebar-entry.tsx","components/editor-page/sidebar/pin-note-sidebar-entry.tsx","api/revisions/index.ts","components/editor-page/document-bar/revisions/revision-modal-list-entry.tsx","components/editor-page/document-bar/revisions/revision-modal.tsx","components/editor-page/document-bar/revisions/utils.ts","components/editor-page/sidebar/revision-sidebar-entry.tsx","components/editor-page/document-bar/share/share-modal.tsx","components/editor-page/sidebar/share-sidebar-entry.tsx","components/editor-page/editor-page.tsx","components/editor-page/sidebar/users-online-sidebar-menu/user-line.tsx","components/editor-page/sidebar/users-online-sidebar-menu/users-online-sidebar-menu.tsx","components/editor-page/sidebar/sidebar.tsx","components/editor-page/splitter/split-divider/split-divider.tsx","components/editor-page/splitter/splitter.tsx"],"names":["EditorPreferenceInputType","MaxLengthWarningModal","show","onHide","maxLength","useTranslation","data-cy","titleI18nKey","closeButton","Modal","Body","Trans","i18nKey","values","className","Footer","Button","onClick","wordRegExp","allSupportedLanguages","CodeBlockHinter","hint","editor","then","hljs","Promise","resolve","searchTerm","findWordAtCursor","searchResult","exec","text","term","length","default","listLanguages","concat","suggestions","search","cursor","getCursor","list","map","suggestion","displayText","from","Pos","line","start","to","end","CollapsableBlockHinter","validAlertLevels","ContainerHinter","filter","startsWith","emojiPickerConfig","customEmoji","Object","keys","ForkAwesomeIcons","name","shortcodes","toLowerCase","url","forkawesomeIcon","category","dataSource","EmojiPicker","onEmojiSelected","onDismiss","darkModeEnabled","useIsDarkModeActivated","pickerContainerRef","useRef","pickerRef","useClickAway","useEffect","current","picker","Picker","shadowRoot","appendChild","style","document","createElement","textContent","twemojiStyle","remove","undefined","emojiClick","event","detail","addEventListener","removeEventListener","setAttribute","removeAttribute","ref","getEmojiShortCode","emoji","skinToneModifier","skins","skinTone","emojiIndex","Database","emojiWordRegex","findEmojiInDatabase","a","getTopFavoriteEmoji","getEmojiBySearchQuery","queryResult","console","error","convertEmojiEventToHint","emojiData","shortCode","render","parent","wrapper","innerHTML","unicode","generateEmojiHints","suggestionList","getPreferredSkinTone","emojiEventDetails","hints","o","EmojiHinter","allSupportedHeaders","allSupportedHeadersTextToInsert","HeaderHinter","indexOf","allSupportedImages","ImageHinter","allSupportedLinks","LinkAndExtraTagHinter","user","getUser","userName","DateTime","local","toFormat","PDFHinter","allowedChars","getLine","ch","test","charAt","slice","forEach","item","push","allHinters","createNumberRangeArray","Array","makeSelectionBold","wrapTextWith","makeSelectionItalic","strikeThroughSelection","underlineSelection","markSelection","symbol","endSymbol","getSelection","ranges","listSelections","range","empty","selection","getRange","replaceRange","head","anchor","setSelections","wrapTextWithOrJustPut","lineNumber","replacement","insertOnStartOfLines","lines","split","join","changeLines","replaceFunction","createList","listMark","i","addLink","prefix","insertAtCursor","f10","setOption","getOption","esc","keyMapName","substr","CodeMirror","Pass","suppressKey","tab","match","spaces","getSelections","execCommand","pos","replaceSelection","defaultKeyMap","isMac","F9","F10","Esc","Enter","Tab","Home","End","defaultState","position","selectedColumns","selectedLines","linesInDocument","charactersInDocument","remainingCharacters","createStatusInfo","maxDocumentLength","getValue","lineCount","StatusBar","t","getLengthTooltip","useMemo","exceeded","remaining","columns","condition","count","title","EditorPreferenceProperty","EditorPreferenceInput","property","type","onChange","value","children","Form","Group","controlId","Label","NUMBER","Control","as","size","EditorPreferenceBooleanProperty","preference","useSelector","state","editorConfig","preferences","toString","equal","selectItem","useCallback","selectedItem","target","mergeEditorPreferences","i18nPrefix","SELECT","EditorPreferenceLigaturesSelect","ligaturesEnabled","Boolean","ligatures","saveLigatures","ligaturesActivated","setEditorLigatures","BOOLEAN","EditorPreferenceNumberProperty","Number","parseInt","DocumentSidebarMenuSelection","EditorPreferenceSelectProperty","selections","EditorPreferences","useState","showModal","setShowModal","indentWithTabs","variant","icon","ListGroup","Item","THEME","KEYMAP","INDENT_WITH_TABS","INDENT_UNIT","alert","SPELL_CHECK","EmojiPickerButton","showEmojiPicker","setShowEmojiPicker","addEmoji","old","CustomTableSizeModal","onTablePicked","rows","tableSize","setTableSize","min","placeholder","isInvalid","currentTarget","isNaN","fixedWidth","ModalFooter","disabled","TablePicker","containerRef","showDialog","setShowDialog","role","cols","row","col","onMouseEnter","TablePickerButton","showTablePicker","setShowTablePicker","rowArray","colArray","divider","body","table","addTable","UploadInput","onLoad","acceptedFiles","onClickRef","props","fileInputReference","fileInput","files","file","catch","click","accept","supportedMimeTypes","supportedMimeTypesJoined","handleUpload","mimeType","includes","uploadPlaceholder","i18n","fileName","noteId","store","getState","noteDetails","id","uploadFile","link","getCorrectSyntaxForLink","UploadImageButton","clickRef","buttonClick","onUploadImage","ToolBar","ButtonToolbar","ButtonGroup","subscriptSelection","superscriptSelection","addHeaderLevel","addCodeFences","addQuotes","addList","j","addOrderedList","addTaskList","addImage","addLine","addCollapsableBlock","addComment","hinter","showHint","completeSingle","completeOnSingleClick","alignWithWord","onPaste","pasteEditor","clipboardData","preventDefault","EditorPane","onContentChange","content","scrollState","onScroll","onMakeScrollSource","config","showMaxLengthWarning","setShowMaxLengthWarning","maxLengthWarningAlreadyShown","setEditor","statusBarInfo","setStatusBarInfo","editorPreferences","lastScrollPosition","editorScroll","setEditorScroll","onEditorScroll","data","scrollEventValue","top","lineAtHeight","startYOfLine","heightAtLine","lineInfo","heightOfLine","handle","height","percentageRaw","Math","max","percentage","floor","firstLineInView","scrolledPercentage","newPositionRaw","newPosition","scrollTo","onBeforeChange","onEditorDidMount","mountedEditor","onCursorActivity","editorWithActivity","onDrop","dropEditor","pageX","pageY","dataTransfer","left","newCursor","coordsChar","setCursor","onMaxLengthHide","codeMirrorOptions","mode","viewportMargin","styleActiveLine","lineNumbers","lineWrapping","showCursorWhenSelecting","highlightSelectionMatches","inputStyle","matchBrackets","autoCloseBrackets","matchTags","bothTags","autoCloseTags","foldGutter","gutters","extraKeys","flattenSpans","addModeClass","autoRefresh","options","editorDidMount","shortcutHandler","ctrlKey","altKey","key","setEditorMode","EditorMode","BOTH","PREVIEW","EDITOR","SidebarButton","buttonRef","hide","DeleteNoteSidebarEntry","onConfirm","deletionButtonI18nKey","UnitalicBoldText","DocumentInfoModal","DocumentInfoLineWithTimeMode","CREATED","time","minus","days","profileImageSrc","EDITED","minutes","DocumentInfoSidebarEntry","ExportMarkdownSidebarEntry","markdownContent","useNoteMarkdownContent","download","SidebarMenu","expand","GroupMode","ExportMenuSidebarMenu","menuId","selectedMenuId","NONE","onClickHandler","dir","href","links","faq","rel","ImportMarkdownSidebarEntry","onImportMarkdown","reject","fileReader","FileReader","newContent","result","setNoteMarkdownContent","readAsText","ImportMenuSidebarMenu","Cache","lifetime","maxEntries","Map","entryLifetime","Error","this","has","entry","get","entryCreated","Date","now","delete","next","set","cache","getUserById","userid","fetch","getApiUrl","defaultFetchConfig","response","expectResponseCode","json","userData","put","EditMode","PermissionGroupEntry","editMode","onChangeEditMode","ToggleButtonGroup","ToggleButton","VIEW","EDIT","ActiveIndicatorStatus","PermissionList","identifier","changeEditMode","removeEntry","createEntry","editI18nKey","viewI18nKey","removeI18nKey","addI18nKey","newEntry","setNewEntry","addEntry","canEdit","onSubmit","InputGroup","FormControl","aria-label","permissionsApiResponse","owner","sharedTo","username","sharedToGroup","PermissionModal","setError","userList","setUserList","setOwner","allUserPermissions","setAllUserPermissions","allLoggedInUserPermissions","setAllLoggedInUserPermissions","photo","shareUser","sharedGroup","Alert","userId","PermissionsSidebarEntry","PinNoteSidebarEntry","revisionCache","getRevision","timestamp","cacheKey","revisionData","getAllRevisions","RevisionModalListEntry","active","revision","revisionAuthorListMap","fromMillis","index","showName","additionalClasses","RevisionModal","revisions","setRevisions","selectedRevisionTimestamp","setSelectedRevisionTimestamp","selectedRevision","setSelectedRevision","useParams","fetchedRevisions","authorData","authors","users","author","getUserDataForRevision","fetchedRevision","Row","Col","lg","revisionIndex","oldValue","newValue","splitView","compareMethod","DiffMethod","WORDS","useDarkTheme","window","RevisionSidebarEntry","ShareModal","noteFrontmatter","frontmatter","editorMode","baseUrl","useFrontendBaseUrl","nativeShareButton","ShareSidebarEntry","ScrollSource","ActiveIndicator","status","UserLine","color","borderLeftColor","UsersOnlineSidebarMenu","counter","setProperty","INACTIVE","ACTIVE","Sidebar","sideBarRef","selectedMenu","setSelectedMenu","toggleValue","selectionIsNotNone","USERS_ONLINE","IMPORT","EXPORT","SplitDivider","onGrab","onMouseDown","onTouchStart","Splitter","containerClassName","right","showLeft","showRight","setSplit","realSplit","doResizing","setDoResizing","splitContainer","recalculateSize","mouseXPosition","newSize","offsetLeft","clientWidth","stopResizing","onMouseMove","mouseEvent","onTouchMove","touchEvent","touches","onMouseUp","onTouchEnd","flexBasis","EditorPage","useLocation","scrollSource","editorSyncScroll","syncScroll","editorScrollState","rendererScrollState","setScrollState","requestedMode","find","onMarkdownRendererScroll","newScrollState","RENDERER","useApplyDarkMode","useDocumentTitleWithNoteTitle","useLoadNoteFromServer","loading","setRendererToScrollSource","setEditorToScrollSource","AppBarMode","ErrorWhileLoadingNoteAlert","LoadingNoteAlert","onFirstHeadingChange","updateNoteTitleByFirstHeading","onTaskCheckedChange","SetCheckboxInMarkdownContent","onFrontmatterChange","setNoteFrontmatter"],"mappings":"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","file":"static/js/15.45d1da5e.chunk.js","sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React from 'react'\nimport { Form } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\n\nexport enum EditorPreferenceInputType {\n  SELECT,\n  BOOLEAN,\n  NUMBER\n}\n\nexport interface EditorPreferenceInputProps {\n  property: string\n  type: EditorPreferenceInputType\n  onChange: React.ChangeEventHandler<HTMLSelectElement>\n  value?: string | number | string[]\n}\n\nexport const EditorPreferenceInput: React.FC<EditorPreferenceInputProps> = ({ property, type, onChange, value, children }) => {\n  useTranslation()\n  return (\n    <Form.Group controlId={`editor-pref-${property}`}>\n      <Form.Label>\n        <Trans i18nKey={`editor.modal.preferences.${property}${type===EditorPreferenceInputType.NUMBER ? '' : '.label'}`}/>\n      </Form.Label>\n      <Form.Control\n        as={type === EditorPreferenceInputType.NUMBER ? 'input' : 'select'}\n        size='sm'\n        value={value}\n        onChange={onChange}\n        type={type === EditorPreferenceInputType.NUMBER ? 'number' : ''}>\n        {children}\n      </Form.Control>\n    </Form.Group>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { Button, Modal } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { CommonModal } from '../../common/modals/common-modal'\n\nexport interface MaxLengthWarningModalProps {\n  show: boolean\n  onHide: () => void\n  maxLength: number\n}\n\nexport const MaxLengthWarningModal: React.FC<MaxLengthWarningModalProps> = ({ show, onHide, maxLength }) => {\n  useTranslation()\n\n  return (\n    <CommonModal data-cy={'limitReachedModal'} show={show} onHide={onHide} titleI18nKey={'editor.error.limitReached.title'} closeButton={true}>\n      <Modal.Body>\n        <Trans i18nKey={'editor.error.limitReached.description'} values={{ maxLength }} />\n        <strong className='mt-2 d-block'><Trans i18nKey={'editor.error.limitReached.advice'}/></strong>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}><Trans i18nKey={'common.close'}/></Button>\n      </Modal.Footer>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, Hinter, search } from './index'\n\nconst wordRegExp = /^```((\\w|-|_|\\+)*)$/\nlet allSupportedLanguages: string[] = []\n\nconst codeBlockHint = (editor: Editor): Promise< Hints| null > => {\n  return import(/* webpackChunkName: \"highlight.js\" */ '../../../common/hljs/hljs').then((hljs) =>\n    new Promise((resolve) => {\n      const searchTerm = findWordAtCursor(editor)\n      const searchResult = wordRegExp.exec(searchTerm.text)\n      if (searchResult === null) {\n        resolve(null)\n        return\n      }\n      const term = searchResult[1]\n      if (allSupportedLanguages.length === 0) {\n        allSupportedLanguages = hljs.default.listLanguages().concat('csv', 'flow', 'html', 'js', 'markmap', 'abc', 'graphviz', 'mermaid', 'vega-lite')\n      }\n      const suggestions = search(term, allSupportedLanguages)\n      const cursor = editor.getCursor()\n      if (!suggestions) {\n        resolve(null)\n      } else {\n        resolve({\n          list: suggestions.map((suggestion: string): Hint => ({\n            text: '```' + suggestion + '\\n\\n```\\n',\n            displayText: suggestion\n          })),\n          from: Pos(cursor.line, searchTerm.start),\n          to: Pos(cursor.line, searchTerm.end)\n        })\n      }\n    }))\n}\n\nexport const CodeBlockHinter: Hinter = {\n  wordRegExp,\n  hint: codeBlockHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^(<d(?:e|et|eta|etai|etail|etails)?)$/\n\nconst collapsableBlockHint = (editor: Editor): Promise< Hints| null > => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const suggestions = ['<details>\\n  <summary>Toggle label</summary>\\n  Toggled content\\n</details>']\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map((suggestion: string): Hint => ({\n          text: suggestion\n        })),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end + 1)\n      })\n    }\n  })\n}\n\nexport const CollapsableBlockHinter: Hinter = {\n  wordRegExp,\n  hint: collapsableBlockHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { validAlertLevels } from '../../../markdown-renderer/markdown-it-plugins/alert-container'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^:::((\\w|-|_|\\+)*)$/\nconst spoilerSuggestion: Hint = {\n  text: ':::spoiler Toggle label\\nToggled content\\n::: \\n',\n  displayText: 'spoiler'\n}\nconst suggestions = validAlertLevels.map((suggestion: string): Hint => ({\n  text: ':::' + suggestion + '\\n\\n::: \\n',\n  displayText: suggestion\n})).concat(spoilerSuggestion)\n\nconst containerHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.filter((suggestion) => suggestion.displayText?.startsWith(searchResult[1])),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end)\n      })\n    }\n  })\n}\n\nexport const ContainerHinter: Hinter = {\n  wordRegExp,\n  hint: containerHint\n}\n","export default __webpack_public_path__ + \"static/media/forkawesome.da7d0f53.png\";","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Picker } from 'emoji-picker-element'\nimport { CustomEmoji, EmojiClickEvent, EmojiClickEventDetail } from 'emoji-picker-element/shared'\nimport React, { useEffect, useRef } from 'react'\nimport { useClickAway } from 'react-use'\nimport { useIsDarkModeActivated } from '../../../../../hooks/common/use-is-dark-mode-activated'\nimport './emoji-picker.scss'\nimport forkawesomeIcon from './forkawesome.png'\nimport { ForkAwesomeIcons } from './icon-names'\n\nexport interface EmojiPickerProps {\n  show: boolean\n  onEmojiSelected: (emoji: EmojiClickEventDetail) => void\n  onDismiss: () => void\n}\n\nexport const customEmojis: CustomEmoji[] = Object.keys(ForkAwesomeIcons).map((name) => ({\n  name: `fa-${name}`,\n  shortcodes: [`fa-${name.toLowerCase()}`],\n  url: forkawesomeIcon,\n  category: 'ForkAwesome'\n}))\n\nexport const EMOJI_DATA_PATH = '/static/js/emoji-data.json'\n\nexport const emojiPickerConfig = {\n  customEmoji: customEmojis,\n  dataSource: EMOJI_DATA_PATH\n}\n\nconst twemojiStyle = (): HTMLStyleElement => {\n  const style = document.createElement('style')\n  style.textContent = 'section.picker { --font-family: \"Twemoji Mozilla\" !important; }'\n  return style\n}\n\nexport const EmojiPicker: React.FC<EmojiPickerProps> = ({ show, onEmojiSelected, onDismiss }) => {\n  const darkModeEnabled = useIsDarkModeActivated()\n  const pickerContainerRef = useRef<HTMLDivElement>(null)\n  const pickerRef = useRef<Picker>()\n\n  useClickAway(pickerContainerRef, () => {\n    onDismiss()\n  })\n\n  useEffect(() => {\n    if (!pickerContainerRef.current) {\n      return\n    }\n    const picker = new Picker(emojiPickerConfig)\n    if (picker.shadowRoot) {\n      picker.shadowRoot.appendChild(twemojiStyle())\n    }\n    pickerContainerRef.current.appendChild(picker)\n\n    pickerRef.current = picker\n    return () => {\n      picker.remove()\n      pickerRef.current = undefined\n    }\n  }, [])\n\n  useEffect(() => {\n    if (!pickerRef.current) {\n      return\n    }\n    const emojiClick = (event: EmojiClickEvent): void => {\n      onEmojiSelected(event.detail)\n    }\n    const picker = pickerRef.current\n    picker.addEventListener('emoji-click', emojiClick, true)\n    return () => {\n      picker.removeEventListener('emoji-click', emojiClick, true)\n    }\n  }, [onEmojiSelected])\n\n  useEffect(() => {\n    if (!pickerRef.current) {\n      return\n    }\n    pickerRef.current.setAttribute('class', darkModeEnabled ? 'dark' : 'light')\n    if (darkModeEnabled) {\n      pickerRef.current.removeAttribute('style')\n    } else {\n      pickerRef.current.setAttribute('style', '--background: #f8f9fa')\n    }\n  }, [darkModeEnabled])\n\n  return (\n    <div className={`position-absolute emoji-picker-container ${!show ? 'd-none' : ''}`} ref={pickerContainerRef}/>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { EmojiClickEventDetail, NativeEmoji } from 'emoji-picker-element/shared'\n\nexport const getEmojiIcon = (emoji: EmojiClickEventDetail): string => {\n  if (emoji.unicode) {\n    return emoji.unicode\n  }\n  if (emoji.name) {\n    // noinspection CheckTagEmptyBody\n    return `<i class=\"fa ${emoji.name}\"></i>`\n  }\n  return ''\n}\n\nexport const getEmojiShortCode = (emoji: EmojiClickEventDetail): string|undefined => {\n  if (!emoji.emoji.shortcodes) {\n    return undefined\n  }\n  let skinToneModifier = ''\n  if ((emoji.emoji as NativeEmoji).skins && emoji.skinTone !== 0) {\n    skinToneModifier = `:skin-tone-${emoji.skinTone as number}:`\n  }\n  return `:${emoji.emoji.shortcodes[0]}:${skinToneModifier}`\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport Database from 'emoji-picker-element/database'\nimport { Emoji, EmojiClickEventDetail, NativeEmoji } from 'emoji-picker-element/shared'\nimport { emojiPickerConfig } from '../tool-bar/emoji-picker/emoji-picker'\nimport { getEmojiIcon, getEmojiShortCode } from '../tool-bar/utils/emojiUtils'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst emojiIndex = new Database(emojiPickerConfig)\nconst emojiWordRegex = /^:([\\w-_+]*)$/\n\nconst findEmojiInDatabase = async (emojiIndex: Database, term: string): Promise<Emoji[]> => {\n  try {\n    if (term === '') {\n      return await emojiIndex.getTopFavoriteEmoji(7)\n    }\n    const queryResult = await emojiIndex.getEmojiBySearchQuery(term)\n    if (queryResult.length === 0) {\n      return await emojiIndex.getTopFavoriteEmoji(7)\n    } else {\n      return queryResult\n    }\n  } catch (error) {\n    console.error(error)\n    return []\n  }\n}\n\nconst convertEmojiEventToHint = (emojiData:EmojiClickEventDetail): Hint | undefined => {\n  const shortCode = getEmojiShortCode(emojiData)\n  if (!shortCode) {\n    return undefined\n  }\n  return {\n    text: shortCode,\n    render: (parent: HTMLLIElement) => {\n      const wrapper = document.createElement('div')\n      wrapper.innerHTML = `${getEmojiIcon(emojiData)}   ${shortCode}`\n      parent.appendChild(wrapper)\n    }\n  }\n}\n\nconst generateEmojiHints = async (editor: Editor): Promise<Hints | null> => {\n  const searchTerm = findWordAtCursor(editor)\n  const searchResult = emojiWordRegex.exec(searchTerm.text)\n  if (searchResult === null) {\n    return null\n  }\n  const suggestionList: Emoji[] = await findEmojiInDatabase(emojiIndex, searchResult[1])\n  const cursor = editor.getCursor()\n  const skinTone = await emojiIndex.getPreferredSkinTone()\n  const emojiEventDetails: EmojiClickEventDetail[] = suggestionList\n    .filter(emoji => !!emoji.shortcodes)\n    .map((emoji) => ({\n      emoji,\n      skinTone: skinTone,\n      unicode: ((emoji as NativeEmoji).unicode ? (emoji as NativeEmoji).unicode : undefined),\n      name: emoji.name\n    }))\n\n  const hints = emojiEventDetails\n    .map(convertEmojiEventToHint)\n    .filter(o => !!o) as Hint[]\n  return {\n    list: hints,\n    from: Pos(cursor.line, searchTerm.start),\n    to: Pos(cursor.line, searchTerm.end)\n  }\n}\n\nexport const EmojiHinter: Hinter = {\n  wordRegExp: emojiWordRegex,\n  hint: generateEmojiHints\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, Hinter, search } from './index'\n\nconst wordRegExp = /^(\\s{0,3})(#{1,6})$/\nconst allSupportedHeaders = ['# h1', '## h2', '### h3', '#### h4', '##### h5', '###### h6', '###### tags: `example`']\nconst allSupportedHeadersTextToInsert = ['# ', '## ', '### ', '#### ', '##### ', '###### ', '###### tags: `example`']\n\nconst headerHint = (editor: Editor): Promise< Hints| null > => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const term = searchResult[0]\n    if (!term) {\n      resolve(null)\n      return\n    }\n    const suggestions = search(term, allSupportedHeaders)\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map((suggestion): Hint => ({\n          text: allSupportedHeadersTextToInsert[allSupportedHeaders.indexOf(suggestion)],\n          displayText: suggestion\n        })),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end)\n      })\n    }\n  })\n}\n\nexport const HeaderHinter: Hinter = {\n  wordRegExp,\n  hint: headerHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^(!(\\[.*])?)$/\nconst allSupportedImages = [\n  '![image alt](https:// \"title\")',\n  '![image alt](https:// \"title\" =WidthxHeight)',\n  '![image alt][reference]'\n]\n\nconst imageHint = (editor: Editor): Promise< Hints| null > => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const suggestions = allSupportedImages\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map((suggestion: string): Hint => ({\n          text: suggestion\n        })),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end + 1)\n      })\n    }\n  })\n}\n\nexport const ImageHinter: Hinter = {\n  wordRegExp,\n  hint: imageHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { DateTime } from 'luxon'\nimport { getUser } from '../../../../redux/user/methods'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^(\\[(.*])?)$/\nconst allSupportedLinks = [\n  '[link text](https:// \"title\")',\n  '[reference]: https:// \"title\"',\n  '[link text][reference]',\n  '[reference]',\n  '[^footnote reference]: https://',\n  '[^footnote reference]',\n  '^[inline footnote]',\n  '[TOC]',\n  'name',\n  'time',\n  '[color=#FFFFFF]'\n\n]\n\nconst linkAndExtraTagHint = (editor: Editor): Promise< Hints| null > => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const suggestions = allSupportedLinks\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map((suggestion: string): Hint => {\n          const user = getUser()\n          const userName = user ? user.name : 'Anonymous'\n          switch (suggestion) {\n            case 'name':\n              // Get the user when a completion happens, this prevents to early calls resulting in 'Anonymous'\n              return {\n                text: `[name=${userName}]`\n              }\n            case 'time':\n              // show the current time when the autocompletion is opened and not when the function is loaded\n              return {\n                text: `[time=${DateTime.local().toFormat('DDDD T')}]`\n              }\n            default:\n              return {\n                text: suggestion + ' ',\n                displayText: suggestion\n              }\n          }\n        }),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end + 1)\n      })\n    }\n  })\n}\n\nexport const LinkAndExtraTagHinter: Hinter = {\n  wordRegExp,\n  hint: linkAndExtraTagHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^({[%}]?)$/\n\nconst pdfHint = (editor: Editor): Promise< Hints| null > => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const suggestions = ['{%pdf https:// %}']\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map((suggestion: string): Hint => ({\n          text: suggestion\n        })),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end + 1)\n      })\n    }\n  })\n}\n\nexport const PDFHinter: Hinter = {\n  wordRegExp,\n  hint: pdfHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hints } from 'codemirror'\nimport { CodeBlockHinter } from './code-block'\nimport { CollapsableBlockHinter } from './collapsable-block'\nimport { ContainerHinter } from './container'\nimport { EmojiHinter } from './emoji'\nimport { HeaderHinter } from './header'\nimport { ImageHinter } from './image'\nimport { LinkAndExtraTagHinter } from './link-and-extra-tag'\nimport { PDFHinter } from './pdf'\n\ninterface findWordAtCursorResponse {\n  start: number,\n  end: number,\n  text: string\n}\n\nexport interface Hinter {\n  wordRegExp: RegExp,\n  hint: (editor: Editor) => Promise< Hints| null >\n}\n\nconst allowedChars = /[^\\s]/\n\nexport const findWordAtCursor = (editor: Editor): findWordAtCursorResponse => {\n  const cursor = editor.getCursor()\n  const line = editor.getLine(cursor.line)\n  let start = cursor.ch\n  let end = cursor.ch\n  while (start && allowedChars.test(line.charAt(start - 1))) {\n    --start\n  }\n  while (end < line.length && allowedChars.test(line.charAt(end))) {\n    ++end\n  }\n\n  return {\n    text: line.slice(start, end).toLowerCase(),\n    start: start,\n    end: end\n  }\n}\n\nexport const search = (term: string, list: string[]): string[] => {\n  const suggestions: string[] = []\n  list.forEach(item => {\n    if (item.toLowerCase().startsWith(term.toLowerCase())) {\n      suggestions.push(item)\n    }\n  })\n  return suggestions.slice(0, 7)\n}\n\nexport const allHinters: Hinter[] = [\n  CodeBlockHinter,\n  ContainerHinter,\n  EmojiHinter,\n  HeaderHinter,\n  ImageHinter,\n  LinkAndExtraTagHinter,\n  PDFHinter,\n  CollapsableBlockHinter,\n]\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport const createNumberRangeArray = (length: number) : number[] => {\n  return Array.from(Array(length).keys())\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport { EmojiClickEventDetail } from 'emoji-picker-element/shared'\nimport { createNumberRangeArray } from '../../../../common/number-range/number-range'\nimport { getEmojiShortCode } from './emojiUtils'\n\nexport const makeSelectionBold = (editor: Editor): void => wrapTextWith(editor, '**')\nexport const makeSelectionItalic = (editor: Editor): void => wrapTextWith(editor, '*')\nexport const strikeThroughSelection = (editor: Editor): void => wrapTextWith(editor, '~~')\nexport const underlineSelection = (editor: Editor): void => wrapTextWith(editor, '++')\nexport const subscriptSelection = (editor: Editor): void => wrapTextWith(editor, '~')\nexport const superscriptSelection = (editor: Editor): void => wrapTextWith(editor, '^')\nexport const markSelection = (editor: Editor): void => wrapTextWith(editor, '==')\n\nexport const addHeaderLevel = (editor: Editor): void => changeLines(editor, line => line.startsWith('#') ? `#${line}` : `# ${line}`)\nexport const addCodeFences = (editor: Editor): void => wrapTextWithOrJustPut(editor, '```\\n', '\\n```')\nexport const addQuotes = (editor: Editor): void => insertOnStartOfLines(editor, '> ')\n\nexport const addList = (editor: Editor): void => createList(editor, () => '- ')\nexport const addOrderedList = (editor: Editor): void => createList(editor, j => `${j}. `)\nexport const addTaskList = (editor: Editor): void => createList(editor, () => '- [ ] ')\n\nexport const addImage = (editor: Editor): void => addLink(editor, '!')\n\nexport const addLine = (editor: Editor): void => changeLines(editor, line => `${line}\\n----`)\nexport const addCollapsableBlock = (editor: Editor): void => changeLines(editor, line => `${line}\\n:::spoiler Toggle label\\n  Toggled content\\n:::`)\nexport const addComment = (editor: Editor): void => changeLines(editor, line => `${line}\\n> []`)\nexport const addTable = (editor: Editor, rows: number, columns: number): void => {\n  const rowArray = createNumberRangeArray(rows)\n  const colArray = createNumberRangeArray(columns).map(col => col + 1)\n  const head = '|  # ' + colArray.join(' |  # ') + ' |'\n  const divider = '| ' + colArray.map(() => '----').join(' | ') + ' |'\n  const body = rowArray.map(() => '| ' + colArray.map(() => 'Text').join(' | ') + ' |').join('\\n')\n  const table = `${head}\\n${divider}\\n${body}`\n  changeLines(editor, line => `${line}\\n${table}`)\n}\n\nexport const addEmoji = (emoji: EmojiClickEventDetail, editor: Editor): void => {\n  const shortCode = getEmojiShortCode(emoji)\n  if (shortCode) {\n    insertAtCursor(editor, shortCode)\n  }\n}\n\nexport const wrapTextWith = (editor: Editor, symbol: string, endSymbol?: string): void => {\n  if (!editor.getSelection()) {\n    return\n  }\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    if (range.empty()) {\n      continue\n    }\n    const from = range.from()\n    const to = range.to()\n\n    const selection = editor.getRange(from, to)\n    editor.replaceRange(symbol + selection + (endSymbol || symbol), from, to, '+input')\n    range.head.ch += symbol.length\n    range.anchor.ch += endSymbol ? endSymbol.length : symbol.length\n  }\n  editor.setSelections(ranges)\n}\n\nconst wrapTextWithOrJustPut = (editor: Editor, symbol: string, endSymbol?: string): void => {\n  if (!editor.getSelection()) {\n    const cursor = editor.getCursor()\n    const lineNumber = cursor.line\n    const line = editor.getLine(lineNumber)\n    const replacement = /\\s*\\\\n/.exec(line) ? `${symbol}${endSymbol ?? ''}` : `${symbol}${line}${endSymbol ?? ''}`\n    editor.replaceRange(replacement,\n      { line: cursor.line, ch: 0 },\n      { line: cursor.line, ch: line.length },\n      '+input')\n  }\n  wrapTextWith(editor, symbol, endSymbol ?? symbol)\n}\n\nexport const insertOnStartOfLines = (editor: Editor, symbol: string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const from = range.empty() ? { line: cursor.line, ch: 0 } : range.from()\n    const to = range.empty() ? { line: cursor.line, ch: editor.getLine(cursor.line).length } : range.to()\n    const selection = editor.getRange(from, to)\n    const lines = selection.split('\\n')\n    editor.replaceRange(lines.map(line => `${symbol}${line}`).join('\\n'), from, to, '+input')\n  }\n  editor.setSelections(ranges)\n}\n\nexport const changeLines = (editor: Editor, replaceFunction: (line: string) => string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const lineNumber = range.empty() ? cursor.line : range.from().line\n    const line = editor.getLine(lineNumber)\n    editor.replaceRange(replaceFunction(line), { line: lineNumber, ch: 0 }, {\n      line: lineNumber,\n      ch: line.length\n    }, '+input')\n  }\n  editor.setSelections(ranges)\n}\n\nexport const createList = (editor: Editor, listMark: (i: number) => string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const from = range.empty() ? { line: cursor.line, ch: 0 } : range.from()\n    const to = range.empty() ? { line: cursor.line, ch: editor.getLine(cursor.line).length } : range.to()\n\n    const selection = editor.getRange(from, to)\n    const lines = selection.split('\\n')\n    editor.replaceRange(lines.map((line, i) => `${listMark(i + 1)}${line}`).join('\\n'), from, to, '+input')\n  }\n  editor.setSelections(ranges)\n}\n\nexport const addLink = (editor: Editor, prefix?: string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const from = range.empty() ? { line: cursor.line, ch: cursor.ch } : range.from()\n    const to = range.empty() ? { line: cursor.line, ch: cursor.ch } : range.to()\n    const selection = editor.getRange(from, to)\n    const linkRegex = /^(?:https?|ftp|mailto):/\n    if (linkRegex.exec(selection)) {\n      editor.replaceRange(`${prefix || ''}[](${selection})`, from, to, '+input')\n    } else {\n      editor.replaceRange(`${prefix || ''}[${selection}](https://)`, from, to, '+input')\n    }\n  }\n}\n\nexport const insertAtCursor = (editor: Editor, text: string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const from = range.empty() ? { line: cursor.line, ch: cursor.ch } : range.from()\n    const to = range.empty() ? { line: cursor.line, ch: cursor.ch } : range.to()\n    editor.replaceRange(`${text}`, from, to, '+input')\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport CodeMirror, { Editor, KeyMap, Pass } from 'codemirror'\nimport { isMac } from '../utils'\nimport {\n  addLink,\n  makeSelectionBold,\n  makeSelectionItalic,\n  markSelection,\n  strikeThroughSelection,\n  underlineSelection\n} from './tool-bar/utils/toolbarButtonUtils'\n\nconst isVim = (keyMapName?: string) => (keyMapName?.substr(0, 3) === 'vim')\n\nconst f10 = (editor: Editor): void | typeof Pass => editor.setOption('fullScreen', !editor.getOption('fullScreen'))\nconst esc = (editor: Editor): void | typeof Pass => {\n  if (editor.getOption('fullScreen') && !isVim(editor.getOption('keyMap'))) {\n    editor.setOption('fullScreen', false)\n  } else {\n    return CodeMirror.Pass\n  }\n}\nconst suppressKey = (): undefined => undefined\nconst tab = (editor: Editor) => {\n  const tab = '\\t'\n\n  // contruct x length spaces\n  const spaces = Array((editor.getOption('indentUnit') ?? 0) + 1).join(' ')\n\n  // auto indent whole line when in list or blockquote\n  const cursor = editor.getCursor()\n  const line = editor.getLine(cursor.line)\n\n  // this regex match the following patterns\n  // 1. blockquote starts with \"> \" or \">>\"\n  // 2. unorder list starts with *+-parseInt\n  // 3. order list starts with \"1.\" or \"1)\"\n  const regex = /^(\\s*)(>[> ]*|[*+-]\\s|(\\d+)([.)]))/\n\n  let match\n  const multiple = editor.getSelection().split('\\n').length > 1 ||\n    editor.getSelections().length > 1\n\n  if (multiple) {\n    editor.execCommand('defaultTab')\n  } else if ((match = regex.exec(line)) !== null) {\n    const ch = match[1].length\n    const pos = {\n      line: cursor.line,\n      ch: ch\n    }\n    if (editor.getOption('indentWithTabs')) {\n      editor.replaceRange(tab, pos, pos, '+input')\n    } else {\n      editor.replaceRange(spaces, pos, pos, '+input')\n    }\n  } else {\n    if (editor.getOption('indentWithTabs')) {\n      editor.execCommand('defaultTab')\n    } else {\n      editor.replaceSelection(spaces)\n    }\n  }\n}\n\nexport const defaultKeyMap: KeyMap = !isMac\n  ? {\n      F9: suppressKey,\n      F10: f10,\n      Esc: esc,\n      'Ctrl-S': suppressKey,\n      Enter: 'newlineAndIndentContinueMarkdownList',\n      Tab: tab,\n      Home: 'goLineLeftSmart',\n      End: 'goLineRight',\n      'Ctrl-I': makeSelectionItalic,\n      'Ctrl-B': makeSelectionBold,\n      'Ctrl-U': underlineSelection,\n      'Ctrl-D': strikeThroughSelection,\n      'Ctrl-M': markSelection,\n      'Ctrl-K': addLink\n    }\n  : {\n      F9: suppressKey,\n      F10: f10,\n      Esc: esc,\n      'Cmd-S': suppressKey,\n      Enter: 'newlineAndIndentContinueMarkdownList',\n      Tab: tab,\n      'Cmd-Left': 'goLineLeftSmart',\n      'Cmd-Right': 'goLineRight',\n      Home: 'goLineLeftSmart',\n      End: 'goLineRight',\n      'Cmd-I': makeSelectionItalic,\n      'Cmd-B': makeSelectionBold,\n      'Cmd-U': underlineSelection,\n      'Cmd-D': strikeThroughSelection,\n      'Cmd-M': markSelection\n    }\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Position } from 'codemirror'\nimport React, { useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { ShowIf } from '../../../common/show-if/show-if'\nimport './status-bar.scss'\n\nexport interface StatusBarInfo {\n  position: Position\n  selectedColumns: number\n  selectedLines: number\n  linesInDocument: number\n  charactersInDocument: number\n  remainingCharacters: number\n}\n\nexport const defaultState: StatusBarInfo = {\n  position: { line: 0, ch: 0 },\n  selectedColumns: 0,\n  selectedLines: 0,\n  linesInDocument: 0,\n  charactersInDocument: 0,\n  remainingCharacters: 0\n}\n\nexport const createStatusInfo = (editor: Editor, maxDocumentLength: number): StatusBarInfo => ({\n  position: editor.getCursor(),\n  charactersInDocument: editor.getValue().length,\n  remainingCharacters: maxDocumentLength - editor.getValue().length,\n  linesInDocument: editor.lineCount(),\n  selectedColumns: editor.getSelection().length,\n  selectedLines: editor.getSelection().split('\\n').length\n})\n\nexport const StatusBar: React.FC<StatusBarInfo> = ({ position, selectedColumns, selectedLines, charactersInDocument, linesInDocument, remainingCharacters }) => {\n  const { t } = useTranslation()\n\n  const getLengthTooltip = useMemo(() => {\n    if (remainingCharacters === 0) {\n      return t('editor.statusBar.lengthTooltip.maximumReached')\n    }\n    if (remainingCharacters < 0) {\n      return t('editor.statusBar.lengthTooltip.exceeded', { exceeded: -remainingCharacters })\n    }\n    return t('editor.statusBar.lengthTooltip.remaining', { remaining: remainingCharacters })\n  }, [remainingCharacters, t])\n\n  return (\n    <div className=\"d-flex flex-row status-bar px-2\">\n      <div>\n        <span>{t('editor.statusBar.cursor', { line: position.line + 1, columns: position.ch + 1 })}</span>\n        <ShowIf condition={selectedColumns !== 0 && selectedLines !== 0}>\n          <ShowIf condition={selectedLines === 1}>\n            <span>&nbsp;–&nbsp;{t('editor.statusBar.selection.column', { count: selectedColumns })}</span>\n          </ShowIf>\n          <ShowIf condition={selectedLines > 1}>\n            <span>&nbsp;–&nbsp;{t('editor.statusBar.selection.line', { count: selectedLines })}</span>\n          </ShowIf>\n        </ShowIf>\n      </div>\n      <div className=\"ml-auto\">\n        <span>{t('editor.statusBar.lines', { lines: linesInDocument })}</span>\n        &nbsp;–&nbsp;\n        <span\n          data-cy={'remainingCharacters'}\n          title={getLengthTooltip}\n          className={remainingCharacters <= 0 ? 'text-danger' : remainingCharacters <= 100 ? 'text-warning' : ''}\n        >\n          {t('editor.statusBar.length', { length: charactersInDocument })}\n        </span>\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport enum EditorPreferenceProperty {\n  KEYMAP = 'keyMap',\n  THEME = 'theme',\n  INDENT_WITH_TABS = 'indentWithTabs',\n  INDENT_UNIT = 'indentUnit',\n  SPELL_CHECK = 'spellcheck'\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { EditorConfiguration } from 'codemirror'\nimport equal from \"fast-deep-equal\"\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\nimport { ApplicationState } from '../../../../../redux'\nimport { mergeEditorPreferences } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\nimport { EditorPreferenceProperty } from './editor-preference-property'\n\nexport interface EditorPreferenceBooleanProps {\n  property: EditorPreferenceProperty\n}\n\nexport const EditorPreferenceBooleanProperty: React.FC<EditorPreferenceBooleanProps> = ({ property }) => {\n  const preference = useSelector((state: ApplicationState) => state.editorConfig.preferences[property]?.toString() || '', equal)\n\n  const { t } = useTranslation()\n  const selectItem = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const selectedItem: boolean = event.target.value === 'true'\n\n    mergeEditorPreferences({\n      [property]: selectedItem\n    } as EditorConfiguration)\n  }, [property])\n\n  const i18nPrefix = `editor.modal.preferences.${property}`\n\n  return (\n    <EditorPreferenceInput onChange={selectItem} property={property} type={EditorPreferenceInputType.SELECT} value={preference}>\n      <option value={'true'}>\n        {t(`${i18nPrefix}.on`)}\n      </option>\n      <option value={'false'}>\n        {t(`${i18nPrefix}.off`)}\n      </option>\n    </EditorPreferenceInput>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\nimport { ApplicationState } from '../../../../../redux'\nimport { setEditorLigatures } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\n\nexport const EditorPreferenceLigaturesSelect: React.FC = () => {\n  const ligaturesEnabled = useSelector((state: ApplicationState) => Boolean(state.editorConfig.ligatures).toString())\n  const saveLigatures = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const ligaturesActivated: boolean = event.target.value === 'true'\n    setEditorLigatures(ligaturesActivated)\n  }, [])\n  const { t } = useTranslation()\n\n  return (\n    <EditorPreferenceInput onChange={saveLigatures} value={ligaturesEnabled} property={\"ligatures\"}\n                           type={EditorPreferenceInputType.BOOLEAN}>\n      <option value='true'>{t(`common.yes`)}</option>\n      <option value='false'>{t(`common.no`)}</option>\n    </EditorPreferenceInput>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { EditorConfiguration } from 'codemirror'\nimport equal from \"fast-deep-equal\"\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { useSelector } from 'react-redux'\nimport { ApplicationState } from '../../../../../redux'\nimport { mergeEditorPreferences } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\nimport { EditorPreferenceProperty } from './editor-preference-property'\n\nexport interface EditorPreferenceNumberProps {\n  property: EditorPreferenceProperty\n}\n\nexport const EditorPreferenceNumberProperty: React.FC<EditorPreferenceNumberProps> = ({ property }) => {\n  const preference = useSelector((state: ApplicationState) => state.editorConfig.preferences[property]?.toString() || '', equal)\n\n  const selectItem = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const selectedItem: number = Number.parseInt(event.target.value)\n\n    mergeEditorPreferences({\n      [property]: selectedItem\n    } as EditorConfiguration)\n  }, [property])\n\n  return (\n    <EditorPreferenceInput onChange={selectItem} property={property} type={EditorPreferenceInputType.NUMBER} value={preference}/>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { EditorConfiguration } from 'codemirror'\nimport equal from \"fast-deep-equal\"\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\nimport { ApplicationState } from '../../../../../redux'\nimport { mergeEditorPreferences } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\nimport { EditorPreferenceProperty } from './editor-preference-property'\n\nexport interface EditorPreferenceSelectPropertyProps {\n  property: EditorPreferenceProperty\n  selections: string[]\n}\n\nexport const EditorPreferenceSelectProperty: React.FC<EditorPreferenceSelectPropertyProps> = ({ property, selections }) => {\n  const preference = useSelector((state: ApplicationState) => state.editorConfig.preferences[property]?.toString() || '', equal)\n\n  const { t } = useTranslation()\n\n  const selectItem = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const selectedItem: string = event.target.value\n\n    mergeEditorPreferences({\n      [property]: selectedItem\n    } as EditorConfiguration)\n  }, [property])\n\n  const i18nPrefix = `editor.modal.preferences.${property}`\n\n  return (\n    <EditorPreferenceInput onChange={selectItem} property={property} type={EditorPreferenceInputType.SELECT} value={preference}>\n      {selections.map(selection =>\n        <option key={selection} value={selection}>\n          {t(`${i18nPrefix}.${selection}`) }\n        </option>)}\n    </EditorPreferenceInput>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { RefObject } from 'react'\nimport { IconName } from '../../common/fork-awesome/types'\nimport { SidebarEntryVariant } from './sidebar-button'\n\nexport interface SpecificSidebarEntryProps {\n  className?: string\n  hide?: boolean\n  onClick?: () => void\n}\n\nexport interface SidebarEntryProps {\n  icon?: IconName\n  variant?: SidebarEntryVariant\n  buttonRef?: RefObject<HTMLButtonElement>\n  hide?: boolean\n  className?: string\n  onClick?: () => void\n  \"data-cy\"?: string\n}\n\nexport interface SidebarMenuProps {\n  expand?: boolean\n}\n\nexport enum DocumentSidebarMenuSelection {\n  NONE,\n  USERS_ONLINE,\n  IMPORT,\n  EXPORT\n}\n\nexport interface SpecificSidebarMenuProps {\n  className?: string\n  onClick: (menuId: DocumentSidebarMenuSelection) => void\n  selectedMenuId: DocumentSidebarMenuSelection\n  menuId: DocumentSidebarMenuSelection\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport equal from \"fast-deep-equal\"\nimport React, { Fragment, useState } from 'react'\nimport { Button, Form, ListGroup } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\nimport { ApplicationState } from '../../../../../redux'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { CommonModal } from '../../../../common/modals/common-modal'\nimport { ShowIf } from '../../../../common/show-if/show-if'\nimport { EditorPreferenceBooleanProperty } from './editor-preference-boolean-property'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\nimport { EditorPreferenceLigaturesSelect } from './editor-preference-ligatures-select'\nimport { EditorPreferenceNumberProperty } from './editor-preference-number-property'\nimport { EditorPreferenceProperty } from \"./editor-preference-property\"\nimport { EditorPreferenceSelectProperty } from \"./editor-preference-select-property\"\n\nexport const EditorPreferences: React.FC = () => {\n  const { t } = useTranslation()\n  const [showModal, setShowModal] = useState(false)\n  const indentWithTabs = useSelector((state: ApplicationState) => state.editorConfig.preferences.indentWithTabs ?? false, equal)\n\n  return (\n    <Fragment>\n      <Button variant='light' onClick={() => setShowModal(true)} title={t('editor.editorToolbar.preferences')}>\n        <ForkAwesomeIcon icon=\"wrench\"/>\n      </Button>\n      <CommonModal\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        titleI18nKey={'editor.modal.preferences.title'}\n        closeButton={true}\n        icon={'wrench'}>\n        <Form>\n          <ListGroup>\n            <ListGroup.Item>\n              <EditorPreferenceSelectProperty property={EditorPreferenceProperty.THEME} selections={['one-dark', 'neat']}/>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <EditorPreferenceSelectProperty property={EditorPreferenceProperty.KEYMAP} selections={['sublime', 'emacs', 'vim']}/>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <EditorPreferenceBooleanProperty property={EditorPreferenceProperty.INDENT_WITH_TABS}/>\n            </ListGroup.Item>\n            <ShowIf condition={!indentWithTabs}>\n              <ListGroup.Item>\n                <EditorPreferenceNumberProperty property={EditorPreferenceProperty.INDENT_UNIT}/>\n              </ListGroup.Item>\n            </ShowIf>\n            <ListGroup.Item>\n              <EditorPreferenceLigaturesSelect/>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <EditorPreferenceInput onChange={() => alert('This feature is not yet implemented.')} property={EditorPreferenceProperty.SPELL_CHECK} type={EditorPreferenceInputType.SELECT}>\n                <option value='off'>Off</option>\n                <option value='en'>English</option>\n              </EditorPreferenceInput>\n            </ListGroup.Item>\n          </ListGroup>\n        </Form>\n      </CommonModal>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport CodeMirror from 'codemirror'\nimport React, { Fragment, useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { addEmoji } from '../utils/toolbarButtonUtils'\nimport { EmojiPicker } from './emoji-picker'\n\nexport interface EmojiPickerButtonProps {\n  editor: CodeMirror.Editor\n}\n\nexport const EmojiPickerButton: React.FC<EmojiPickerButtonProps> = ({ editor }) => {\n  const { t } = useTranslation()\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false)\n\n  return (\n    <Fragment>\n      <EmojiPicker\n        show={showEmojiPicker}\n        onEmojiSelected={(emoji) => {\n          setShowEmojiPicker(false)\n          addEmoji(emoji, editor)\n        }}\n        onDismiss={() => setShowEmojiPicker(false)}/>\n      <Button data-cy={'show-emoji-picker'} variant='light' onClick={() => setShowEmojiPicker(old => !old)} title={t('editor.editorToolbar.emoji')}>\n        <ForkAwesomeIcon icon=\"smile-o\"/>\n      </Button>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { Button, Form, ModalFooter } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { CommonModal } from '../../../../common/modals/common-modal'\nimport { TableSize } from './table-picker'\n\nexport interface CustomTableSizeModalProps {\n  showModal: boolean\n  onDismiss: () => void\n  onTablePicked: (row: number, cols: number) => void\n}\n\nexport const CustomTableSizeModal: React.FC<CustomTableSizeModalProps> = ({ showModal, onDismiss, onTablePicked }) => {\n  const { t } = useTranslation()\n  const [tableSize, setTableSize] = useState<TableSize>({\n    rows: 0,\n    columns: 0\n  })\n\n  useEffect(() => {\n    setTableSize({\n      rows: 0,\n      columns: 0\n    })\n  }, [showModal])\n\n  const onClick = useCallback(() => {\n    onTablePicked(tableSize.rows, tableSize.columns)\n    onDismiss()\n  }, [onDismiss, tableSize, onTablePicked])\n\n  return (\n    <CommonModal\n      show={showModal}\n      onHide={() => onDismiss()}\n      titleI18nKey={'editor.editorToolbar.table.customSize'}\n      closeButton={true}\n      icon={'table'}>\n      <div className={'col-lg-10 d-flex flex-row p-3 align-items-center'}>\n        <Form.Control\n          type={'number'}\n          min={1}\n          placeholder={t('editor.editorToolbar.table.cols')}\n          isInvalid={tableSize.columns <= 0}\n          onChange={(event) => {\n            const value = Number.parseInt(event.currentTarget.value)\n            setTableSize(old => ({\n              rows: old.rows,\n              columns: isNaN(value) ? 0 : value\n            }))\n          }}\n        />\n        <ForkAwesomeIcon icon='times' className='mx-2' fixedWidth={true}/>\n        <Form.Control\n          type={'number'}\n          min={1}\n          placeholder={t('editor.editorToolbar.table.rows')}\n          isInvalid={tableSize.rows <= 0}\n          onChange={(event) => {\n            const value = Number.parseInt(event.currentTarget.value)\n            setTableSize(old => ({\n              rows: isNaN(value) ? 0 : value,\n              columns: old.columns\n            }))\n          }}/>\n      </div>\n      <ModalFooter>\n        <Button onClick={onClick} disabled={tableSize.rows <= 0 || tableSize.columns <= 0}>\n          {t('editor.editorToolbar.table.create')}\n        </Button>\n      </ModalFooter>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { useClickAway } from 'react-use'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { createNumberRangeArray } from '../../../../common/number-range/number-range'\nimport { CustomTableSizeModal } from './custom-table-size-modal'\nimport './table-picker.scss'\n\nexport interface TablePickerProps {\n  show: boolean\n  onDismiss: () => void\n  onTablePicked: (row: number, cols: number) => void\n}\n\nexport type TableSize = {\n  rows: number,\n  columns: number\n}\n\nexport const TablePicker: React.FC<TablePickerProps> = ({ show, onDismiss, onTablePicked }) => {\n  const { t } = useTranslation()\n  const containerRef = useRef<HTMLDivElement>(null)\n  const [tableSize, setTableSize] = useState<TableSize>()\n  const [showDialog, setShowDialog] = useState(false)\n\n  useClickAway(containerRef, () => {\n    onDismiss()\n  })\n\n  useEffect(() => {\n    setTableSize(undefined)\n  }, [show])\n\n  const onClick = useCallback(() => {\n    if (tableSize) {\n      onTablePicked(tableSize.rows, tableSize.columns)\n    }\n  }, [onTablePicked, tableSize])\n\n  return (\n    <div className={`position-absolute table-picker-container p-2 ${!show || showDialog ? 'd-none' : ''} bg-light`} ref={containerRef} role=\"grid\">\n      <p className={'lead'}>\n        { tableSize\n          ? t('editor.editorToolbar.table.size', { cols: tableSize?.columns, rows: tableSize.rows })\n          : t('editor.editorToolbar.table.title')\n        }\n      </p>\n      <div className={'table-container'}>\n        {createNumberRangeArray(8).map((row: number) => (\n          createNumberRangeArray(10).map((col: number) => (\n            <div\n              key={`${row}_${col}`}\n              className={`table-cell ${tableSize && row < tableSize.rows && col < tableSize.columns ? 'bg-primary' : ''}`}\n              onMouseEnter={() => {\n                setTableSize({\n                  rows: row + 1,\n                  columns: col + 1\n                })\n              }}\n              title={t('editor.editorToolbar.table.size', { cols: col + 1, rows: row + 1 })}\n              onClick={onClick}\n            />\n          )\n          )\n        ))}\n      </div>\n      <div className=\"d-flex justify-content-center mt-2\">\n        <Button data-cy={'show-custom-table-modal'} className={'text-center'} onClick={() => setShowDialog(true)}>\n          <ForkAwesomeIcon icon=\"table\"/>&nbsp;{t('editor.editorToolbar.table.customSize')}\n        </Button>\n        <CustomTableSizeModal\n          showModal={showDialog}\n          onDismiss={() => setShowDialog(false)}\n          onTablePicked={onTablePicked}\n        />\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport CodeMirror from 'codemirror'\nimport React, { Fragment, useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { addTable } from '../utils/toolbarButtonUtils'\nimport { TablePicker } from './table-picker'\n\nexport interface TablePickerButtonProps {\n  editor: CodeMirror.Editor\n}\n\nexport const TablePickerButton: React.FC<TablePickerButtonProps> = ({ editor }) => {\n  const { t } = useTranslation()\n  const [showTablePicker, setShowTablePicker] = useState(false)\n\n  return (\n    <Fragment>\n      <TablePicker\n        show={showTablePicker}\n        onDismiss={() => setShowTablePicker(false)}\n        onTablePicked={(rows, cols) => {\n          setShowTablePicker(false)\n          addTable(editor, rows, cols)\n        }}\n      />\n      <Button data-cy={'show-table-overlay'} variant='light' onClick={() => setShowTablePicker(old => !old)} title={t('editor.editorToolbar.table.title')}>\n        <ForkAwesomeIcon icon=\"table\"/>\n      </Button>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { MutableRefObject, useCallback, useEffect, useRef } from 'react'\n\nexport interface UploadInputProps {\n  onLoad: (file: File) => Promise<void>\n  acceptedFiles: string\n  onClickRef: MutableRefObject<(() => void) | undefined>\n  \"data-cy\"?: string\n}\n\nexport const UploadInput: React.FC<UploadInputProps> = ({ onLoad, acceptedFiles, onClickRef, ...props }) => {\n  const fileInputReference = useRef<HTMLInputElement>(null)\n  const onClick = useCallback(() => {\n    const fileInput = fileInputReference.current\n    if (!fileInput) {\n      return\n    }\n    fileInput.addEventListener('change', () => {\n      if (!fileInput.files || fileInput.files.length < 1) {\n        return\n      }\n      const file = fileInput.files[0]\n      onLoad(file).then(() => {\n        fileInput.value = ''\n      }).catch((error) => {\n        console.error(error)\n      })\n    })\n    fileInput.click()\n  }, [onLoad])\n\n  useEffect(() => {\n    onClickRef.current = onClick\n  })\n\n  return (\n    <input data-cy={props[\"data-cy\"]} type='file' ref={fileInputReference} className='d-none' accept={acceptedFiles}/>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport const supportedMimeTypes: string[] = [\n  'application/pdf',\n  'image/apng',\n  'image/bmp',\n  'image/gif',\n  'image/heif',\n  'image/heic',\n  'image/heif-sequence',\n  'image/heic-sequence',\n  'image/jpeg',\n  'image/png',\n  'image/svg+xml',\n  'image/tiff',\n  'image/webp'\n]\n\nexport const supportedMimeTypesJoined = supportedMimeTypes.join(', ')\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport i18n from 'i18next'\nimport { uploadFile } from '../../../api/media'\nimport { store } from '../../../redux'\nimport { supportedMimeTypes } from './tool-bar/utils/upload-image-mimetypes'\n\nexport const handleUpload = (file: File, editor: Editor): void => {\n  if (!file) {\n    return\n  }\n  const mimeType = file.type\n  if (!supportedMimeTypes.includes(mimeType)) {\n    // this mimetype is not supported\n    return\n  }\n  const cursor = editor.getCursor()\n  const uploadPlaceholder = `![${i18n.t('editor.upload.uploadFile', { fileName: file.name })}]()`\n  const noteId = store.getState().noteDetails.id\n  editor.replaceRange(uploadPlaceholder, cursor, cursor, '+input')\n  uploadFile(noteId, mimeType, file)\n    .then(({ link }) => {\n      editor.replaceRange(getCorrectSyntaxForLink(mimeType, link), cursor, {\n        line: cursor.line,\n        ch: cursor.ch + uploadPlaceholder.length\n      }, '+input')\n    })\n    .catch(() => {\n      editor.replaceRange('', cursor, {\n        line: cursor.line,\n        ch: cursor.ch + uploadPlaceholder.length\n      }, '+input')\n    })\n}\n\nconst getCorrectSyntaxForLink = (mimeType: string, link: string): string => {\n  switch (mimeType) {\n    case 'application/pdf':\n      return `{%pdf ${link} %}`\n    default:\n      return `![](${link})`\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport React, { Fragment, useCallback, useRef } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\nimport { UploadInput } from '../../sidebar/upload-input'\nimport { handleUpload } from '../upload-handler'\nimport { supportedMimeTypesJoined } from './utils/upload-image-mimetypes'\n\nexport interface UploadImageButtonProps {\n  editor?: Editor\n}\n\nexport const UploadImageButton: React.FC<UploadImageButtonProps> = ({ editor }) => {\n  const { t } = useTranslation()\n  const clickRef = useRef<(() => void)>()\n  const buttonClick = useCallback(() => {\n    clickRef.current?.()\n  }, [])\n\n  const onUploadImage = useCallback((file: File) => {\n    if (editor) {\n      handleUpload(file, editor)\n    }\n    return Promise.resolve()\n  }, [editor])\n\n  if (!editor) {\n    return null\n  }\n\n  return (\n    <Fragment>\n      <Button variant='light' onClick={buttonClick} title={t('editor.editorToolbar.uploadImage')}>\n        <ForkAwesomeIcon icon={'upload'}/>\n      </Button>\n      <UploadInput onLoad={onUploadImage} acceptedFiles={supportedMimeTypesJoined} onClickRef={clickRef}/>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport React from 'react'\nimport { Button, ButtonGroup, ButtonToolbar } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\nimport { EditorPreferences } from './editor-preferences/editor-preferences'\nimport { EmojiPickerButton } from './emoji-picker/emoji-picker-button'\nimport { TablePickerButton } from './table-picker/table-picker-button'\nimport './tool-bar.scss'\nimport { UploadImageButton } from './upload-image-button'\nimport {\n  addCodeFences,\n  addCollapsableBlock,\n  addComment,\n  addHeaderLevel,\n  addImage,\n  addLine,\n  addLink,\n  addList,\n  addOrderedList,\n  addQuotes,\n  addTaskList,\n  makeSelectionBold,\n  makeSelectionItalic,\n  strikeThroughSelection,\n  subscriptSelection,\n  superscriptSelection,\n  underlineSelection\n} from './utils/toolbarButtonUtils'\n\nexport interface ToolBarProps {\n  editor?: Editor\n}\n\nexport const ToolBar: React.FC<ToolBarProps> = ({ editor }) => {\n  const { t } = useTranslation()\n\n  if (!editor) {\n    return null\n  }\n\n  return (\n    <ButtonToolbar className='bg-light'>\n      <ButtonGroup className={'mx-1 flex-wrap'}>\n        <Button data-cy={'format-bold'} variant='light' onClick={() => makeSelectionBold(editor)} title={t('editor.editorToolbar.bold')}>\n          <ForkAwesomeIcon icon=\"bold\"/>\n        </Button>\n        <Button data-cy={'format-italic'} variant='light' onClick={() => makeSelectionItalic(editor)} title={t('editor.editorToolbar.italic')}>\n          <ForkAwesomeIcon icon=\"italic\"/>\n        </Button>\n        <Button data-cy={'format-underline'} variant='light' onClick={() => underlineSelection(editor)} title={t('editor.editorToolbar.underline')}>\n          <ForkAwesomeIcon icon=\"underline\"/>\n        </Button>\n        <Button data-cy={'format-strikethrough'} variant='light' onClick={() => strikeThroughSelection(editor)} title={t('editor.editorToolbar.strikethrough')}>\n          <ForkAwesomeIcon icon=\"strikethrough\"/>\n        </Button>\n        <Button data-cy={'format-subscript'} variant='light' onClick={() => subscriptSelection(editor)} title={t('editor.editorToolbar.subscript')}>\n          <ForkAwesomeIcon icon=\"subscript\"/>\n        </Button>\n        <Button data-cy={'format-superscript'} variant='light' onClick={() => superscriptSelection(editor)} title={t('editor.editorToolbar.superscript')}>\n          <ForkAwesomeIcon icon=\"superscript\"/>\n        </Button>\n      </ButtonGroup>\n      <ButtonGroup className={'mx-1 flex-wrap'}>\n        <Button data-cy={'format-heading'} variant='light' onClick={() => addHeaderLevel(editor)} title={t('editor.editorToolbar.header')}>\n          <ForkAwesomeIcon icon=\"header\"/>\n        </Button>\n        <Button data-cy={'format-code-block'} variant='light' onClick={() => addCodeFences(editor)} title={t('editor.editorToolbar.code')}>\n          <ForkAwesomeIcon icon=\"code\"/>\n        </Button>\n        <Button data-cy={'format-block-quote'} variant='light' onClick={() => addQuotes(editor)} title={t('editor.editorToolbar.blockquote')}>\n          <ForkAwesomeIcon icon=\"quote-right\"/>\n        </Button>\n        <Button data-cy={'format-unordered-list'} variant='light' onClick={() => addList(editor)} title={t('editor.editorToolbar.unorderedList')}>\n          <ForkAwesomeIcon icon=\"list\"/>\n        </Button>\n        <Button data-cy={'format-ordered-list'} variant='light' onClick={() => addOrderedList(editor)} title={t('editor.editorToolbar.orderedList')}>\n          <ForkAwesomeIcon icon=\"list-ol\"/>\n        </Button>\n        <Button data-cy={'format-check-list'} variant='light' onClick={() => addTaskList(editor)} title={t('editor.editorToolbar.checkList')}>\n          <ForkAwesomeIcon icon=\"check-square\"/>\n        </Button>\n      </ButtonGroup>\n      <ButtonGroup className={'mx-1 flex-wrap'}>\n        <Button data-cy={'format-link'} variant='light' onClick={() => addLink(editor)} title={t('editor.editorToolbar.link')}>\n          <ForkAwesomeIcon icon=\"link\"/>\n        </Button>\n        <Button data-cy={'format-image'} variant='light' onClick={() => addImage(editor)} title={t('editor.editorToolbar.image')}>\n          <ForkAwesomeIcon icon=\"picture-o\"/>\n        </Button>\n        <UploadImageButton editor={editor}/>\n      </ButtonGroup>\n      <ButtonGroup className={'mx-1 flex-wrap'}>\n        <TablePickerButton editor={editor}/>\n        <Button data-cy={'format-add-line'} variant='light' onClick={() => addLine(editor)} title={t('editor.editorToolbar.line')}>\n          <ForkAwesomeIcon icon=\"minus\"/>\n        </Button>\n        <Button data-cy={'format-collapsable-block'} variant='light' onClick={() => addCollapsableBlock(editor)} title={t('editor.editorToolbar.collapsableBlock')}>\n          <ForkAwesomeIcon icon=\"caret-square-o-down\"/>\n        </Button>\n        <Button data-cy={'format-add-comment'} variant='light' onClick={() => addComment(editor)} title={t('editor.editorToolbar.comment')}>\n          <ForkAwesomeIcon icon=\"comment\"/>\n        </Button>\n        <EmojiPickerButton editor={editor}/>\n      </ButtonGroup>\n      <ButtonGroup className={'mx-1 flex-wrap'}>\n        <EditorPreferences/>\n      </ButtonGroup>\n    </ButtonToolbar>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, EditorChange, EditorConfiguration, ScrollInfo } from 'codemirror'\nimport 'codemirror/addon/comment/comment'\nimport 'codemirror/addon/dialog/dialog'\nimport 'codemirror/addon/display/autorefresh'\nimport 'codemirror/addon/display/fullscreen'\nimport 'codemirror/addon/display/placeholder'\nimport 'codemirror/addon/edit/closebrackets'\nimport 'codemirror/addon/edit/closetag'\nimport 'codemirror/addon/edit/continuelist'\nimport 'codemirror/addon/edit/matchbrackets'\nimport 'codemirror/addon/edit/matchtags'\nimport 'codemirror/addon/fold/foldcode'\nimport 'codemirror/addon/fold/foldgutter'\nimport 'codemirror/addon/fold/markdown-fold'\nimport 'codemirror/addon/hint/show-hint'\nimport 'codemirror/addon/search/jump-to-line'\nimport 'codemirror/addon/search/match-highlighter'\nimport 'codemirror/addon/search/search'\nimport 'codemirror/addon/selection/active-line'\nimport 'codemirror/keymap/emacs'\nimport 'codemirror/keymap/sublime'\nimport 'codemirror/keymap/vim'\nimport 'codemirror/mode/gfm/gfm'\nimport equal from 'fast-deep-equal'\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { Controlled as ControlledCodeMirror } from 'react-codemirror2'\nimport { useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\nimport { ApplicationState } from '../../../redux'\nimport { MaxLengthWarningModal } from '../editor-modals/max-length-warning-modal'\nimport { ScrollProps, ScrollState } from '../synced-scroll/scroll-props'\nimport { allHinters, findWordAtCursor } from './autocompletion'\nimport './editor-pane.scss'\nimport { defaultKeyMap } from './key-map'\nimport { createStatusInfo, defaultState, StatusBar, StatusBarInfo } from './status-bar/status-bar'\nimport { ToolBar } from './tool-bar/tool-bar'\nimport { handleUpload } from './upload-handler'\n\nexport interface EditorPaneProps {\n  onContentChange: (content: string) => void\n  content: string\n}\n\nconst onChange = (editor: Editor) => {\n  for (const hinter of allHinters) {\n    const searchTerm = findWordAtCursor(editor)\n    if (hinter.wordRegExp.test(searchTerm.text)) {\n      editor.showHint({\n        hint: hinter.hint,\n        completeSingle: false,\n        completeOnSingleClick: false,\n        alignWithWord: true\n      })\n      return\n    }\n  }\n}\n\ninterface PasteEvent {\n  clipboardData: {\n    files: FileList\n  },\n  preventDefault: () => void\n}\n\nconst onPaste = (pasteEditor: Editor, event: PasteEvent) => {\n  if (event && event.clipboardData && event.clipboardData.files && event.clipboardData.files.length > 0) {\n    event.preventDefault()\n    const files: FileList = event.clipboardData.files\n    if (files && files.length >= 1) {\n      handleUpload(files[0], pasteEditor)\n    }\n  }\n}\n\ninterface DropEvent {\n  pageX: number,\n  pageY: number,\n  dataTransfer: {\n    files: FileList\n    effectAllowed: string\n  } | null\n  preventDefault: () => void\n}\n\nexport const EditorPane: React.FC<EditorPaneProps & ScrollProps> = ({ onContentChange, content, scrollState, onScroll, onMakeScrollSource }) => {\n  const { t } = useTranslation()\n  const maxLength = useSelector((state: ApplicationState) => state.config.maxDocumentLength)\n  const [showMaxLengthWarning, setShowMaxLengthWarning] = useState(false)\n  const maxLengthWarningAlreadyShown = useRef(false)\n  const [editor, setEditor] = useState<Editor>()\n  const [statusBarInfo, setStatusBarInfo] = useState<StatusBarInfo>(defaultState)\n  const editorPreferences = useSelector((state: ApplicationState) => state.editorConfig.preferences, equal)\n  const ligaturesEnabled = useSelector((state: ApplicationState) => state.editorConfig.ligatures, equal)\n\n  const lastScrollPosition = useRef<number>()\n  const [editorScroll, setEditorScroll] = useState<ScrollInfo>()\n  const onEditorScroll = useCallback((editor: Editor, data: ScrollInfo) => setEditorScroll(data), [])\n\n  useEffect(() => {\n    if (!editor || !onScroll || !editorScroll) {\n      return\n    }\n    const scrollEventValue = editorScroll.top as number\n    const line = editor.lineAtHeight(scrollEventValue, 'local')\n    const startYOfLine = editor.heightAtLine(line, 'local')\n    const lineInfo = editor.lineInfo(line)\n    if (lineInfo === null) {\n      return\n    }\n    const heightOfLine = (lineInfo.handle as { height: number }).height\n    const percentageRaw = (Math.max(scrollEventValue - startYOfLine, 0)) / heightOfLine\n    const percentage = Math.floor(percentageRaw * 100)\n\n    const newScrollState: ScrollState = { firstLineInView: line + 1, scrolledPercentage: percentage }\n    onScroll(newScrollState)\n  }, [editor, editorScroll, onScroll])\n\n  useEffect(() => {\n    if (!editor || !scrollState) {\n      return\n    }\n    const startYOfLine = editor.heightAtLine(scrollState.firstLineInView - 1, 'local')\n    const heightOfLine = (editor.lineInfo(scrollState.firstLineInView - 1).handle as { height: number }).height\n    const newPositionRaw = startYOfLine + (heightOfLine * scrollState.scrolledPercentage / 100)\n    const newPosition = Math.floor(newPositionRaw)\n    if (newPosition !== lastScrollPosition.current) {\n      lastScrollPosition.current = newPosition\n      editor.scrollTo(0, newPosition)\n    }\n  }, [editor, scrollState])\n\n  const onBeforeChange = useCallback((editor: Editor, data: EditorChange, value: string) => {\n    if (value.length > maxLength && !maxLengthWarningAlreadyShown.current) {\n      setShowMaxLengthWarning(true)\n      maxLengthWarningAlreadyShown.current = true\n    }\n    if (value.length <= maxLength) {\n      maxLengthWarningAlreadyShown.current = false\n    }\n    onContentChange(value)\n  }, [onContentChange, maxLength, maxLengthWarningAlreadyShown])\n  const onEditorDidMount = useCallback(mountedEditor => {\n    setStatusBarInfo(createStatusInfo(mountedEditor, maxLength))\n    setEditor(mountedEditor)\n  }, [maxLength])\n\n  const onCursorActivity = useCallback((editorWithActivity) => {\n    setStatusBarInfo(createStatusInfo(editorWithActivity, maxLength))\n  }, [maxLength])\n\n  const onDrop = useCallback((dropEditor: Editor, event: DropEvent) => {\n    if (event && dropEditor && event.pageX && event.pageY && event.dataTransfer &&\n      event.dataTransfer.files && event.dataTransfer.files.length >= 1) {\n      event.preventDefault()\n      const top: number = event.pageY\n      const left: number = event.pageX\n      const newCursor = dropEditor.coordsChar({ top, left }, 'page')\n      dropEditor.setCursor(newCursor)\n      const files: FileList = event.dataTransfer.files\n      handleUpload(files[0], dropEditor)\n    }\n  }, [])\n\n  const onMaxLengthHide = useCallback(() => setShowMaxLengthWarning(false), [])\n\n  const codeMirrorOptions: EditorConfiguration = useMemo<EditorConfiguration>(() => ({\n    ...editorPreferences,\n    mode: 'gfm',\n    viewportMargin: 20,\n    styleActiveLine: true,\n    lineNumbers: true,\n    lineWrapping: true,\n    showCursorWhenSelecting: true,\n    highlightSelectionMatches: true,\n    inputStyle: 'textarea',\n    matchBrackets: true,\n    autoCloseBrackets: true,\n    matchTags: {\n      bothTags: true\n    },\n    autoCloseTags: true,\n    foldGutter: true,\n    gutters: [\n      'CodeMirror-linenumbers',\n      'authorship-gutters',\n      'CodeMirror-foldgutter'\n    ],\n    extraKeys: defaultKeyMap,\n    flattenSpans: true,\n    addModeClass: true,\n    autoRefresh: true,\n    // otherCursors: true,\n    placeholder: t('editor.placeholder')\n  }), [t, editorPreferences])\n\n  return (\n    <div className={'d-flex flex-column h-100 position-relative'} onMouseEnter={onMakeScrollSource}>\n      <MaxLengthWarningModal show={showMaxLengthWarning} onHide={onMaxLengthHide} maxLength={maxLength}/>\n      <ToolBar editor={editor}/>\n      <ControlledCodeMirror\n        className={`overflow-hidden w-100 flex-fill ${ligaturesEnabled ? '' : 'no-ligatures'}`}\n        value={content}\n        options={codeMirrorOptions}\n        onChange={onChange}\n        onPaste={onPaste}\n        onDrop={onDrop}\n        onCursorActivity={onCursorActivity}\n        editorDidMount={onEditorDidMount}\n        onBeforeChange={onBeforeChange}\n        onScroll={onEditorScroll}\n      />\n      <StatusBar {...statusBarInfo} />\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { useEffect } from 'react'\nimport { setEditorMode } from '../../../redux/editor/methods'\nimport { EditorMode } from '../app-bar/editor-view-mode'\n\nconst shortcutHandler = (event: KeyboardEvent): void => {\n  if (event.ctrlKey && event.altKey && event.key === 'b') {\n    setEditorMode(EditorMode.BOTH)\n    event.preventDefault()\n  }\n\n  if (event.ctrlKey && event.altKey && event.key === 'v') {\n    setEditorMode(EditorMode.PREVIEW)\n    event.preventDefault()\n  }\n\n  if (event.ctrlKey && event.altKey && (event.key === 'e' || event.key === '€')) {\n    setEditorMode(EditorMode.EDITOR)\n    event.preventDefault()\n  }\n}\n\nexport const useViewModeShortcuts = ():void => {\n  useEffect(() => {\n    document.addEventListener('keydown', shortcutHandler, false)\n    return () => {\n      document.removeEventListener('keydown', shortcutHandler, false)\n    }\n  }, [])\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { ForkAwesomeIcon } from '../../common/fork-awesome/fork-awesome-icon'\nimport { IconName } from '../../common/fork-awesome/types'\nimport { ShowIf } from '../../common/show-if/show-if'\nimport { SidebarEntryProps } from './types'\n\nexport type SidebarEntryVariant = \"primary\"\n\nexport const SidebarButton: React.FC<SidebarEntryProps> = ({children,  icon,  className, variant,buttonRef, hide, ...props }) => {\n  return (\n    <button ref={buttonRef}\n            className={`sidebar-entry ${hide ? 'hide' : ''} ${variant ? `sidebar-entry-${variant}` : ''} ${className ?? ''}`} {...props} >\n      <ShowIf condition={!!icon}>\n        <span className={'sidebar-icon'}>\n          <ForkAwesomeIcon icon={icon as IconName}/>\n        </span>\n      </ShowIf>\n      <span className={'sidebar-text'}>\n        {children}\n      </span>\n    </button>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { DeletionModal } from '../../common/modals/deletion-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const DeleteNoteSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ hide, className }) => {\n  useTranslation()\n  const [showDialog, setShowDialog] = useState(false)\n\n  return (\n    <Fragment>\n      <SidebarButton icon={\"trash\"} className={className} hide={hide} onClick={() => setShowDialog(true)}>\n        <Trans i18nKey={'landing.history.menu.deleteNote'}/>\n      </SidebarButton>\n      <DeletionModal\n        onConfirm={() => setShowDialog(false)}\n        deletionButtonI18nKey={'editor.modal.deleteNote.button'}\n        show={showDialog}\n        onHide={() => setShowDialog(false)}\n        titleI18nKey={'editor.modal.deleteNote.title'}>\n        <h5><Trans i18nKey={'editor.modal.deleteNote.question'}/></h5>\n        <ul>\n          <li> noteTitle</li>\n        </ul>\n        <h6>\n          <Trans i18nKey={'editor.modal.deleteNote.warning'}/>\n        </h6>\n      </DeletionModal>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\n\nexport interface UnitalicBoldTextProps {\n  text: string ;\n}\n\nexport const UnitalicBoldText: React.FC<UnitalicBoldTextProps> = ({ text }) => {\n  return <b className={'font-style-normal mr-1'}>{text}</b>\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { DateTime } from 'luxon'\nimport React from 'react'\nimport { ListGroup, Modal } from 'react-bootstrap'\nimport { Trans } from 'react-i18next'\nimport { CommonModal } from '../../../common/modals/common-modal'\nimport { DocumentInfoLine } from './document-info-line'\nimport { DocumentInfoLineWithTimeMode, DocumentInfoTimeLine } from './document-info-time-line'\nimport { UnitalicBoldText } from './unitalic-bold-text'\n\nexport interface DocumentInfoModalProps {\n  show: boolean,\n  onHide: () => void\n}\n\nexport const DocumentInfoModal: React.FC<DocumentInfoModalProps> = ({show, onHide}) => {\n    return (\n      <CommonModal\n        show={show}\n        onHide={onHide}\n        closeButton={true}\n        titleI18nKey={'editor.modal.documentInfo.title'}>\n        <Modal.Body>\n          <ListGroup>\n            <ListGroup.Item>\n              <DocumentInfoTimeLine\n                size={'2x'}\n                mode={DocumentInfoLineWithTimeMode.CREATED}\n                time={DateTime.local().minus({ days: 11 })}\n                userName={'Tilman'}\n                profileImageSrc={'/img/avatar.png'}/>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <DocumentInfoTimeLine\n                size={'2x'}\n                mode={DocumentInfoLineWithTimeMode.EDITED}\n                time={DateTime.local().minus({ minutes: 3 })}\n                userName={'Philip'}\n                profileImageSrc={'/img/avatar.png'}/>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <DocumentInfoLine icon={'users'} size={'2x'}>\n                <Trans i18nKey='editor.modal.documentInfo.usersContributed'>\n                  <UnitalicBoldText text={'42'}/>\n                </Trans>\n              </DocumentInfoLine>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <DocumentInfoLine icon={'history'} size={'2x'}>\n                <Trans i18nKey='editor.modal.documentInfo.revisions'>\n                  <UnitalicBoldText text={'192'}/>\n                </Trans>\n              </DocumentInfoLine>\n            </ListGroup.Item>\n          </ListGroup>\n        </Modal.Body>\n      </CommonModal>\n    );\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { DocumentInfoModal } from '../document-bar/document-info/document-info-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const DocumentInfoSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({className, hide}) => {\n  const [showModal, setShowModal] = useState(false)\n  useTranslation()\n\n  return (\n    <Fragment>\n      <SidebarButton hide={hide} className={className} icon={\"line-chart\"} onClick={() => setShowModal(true)}>\n        <Trans i18nKey={'editor.modal.documentInfo.title'} />\n      </SidebarButton>\n      <DocumentInfoModal show={showModal} onHide={() => setShowModal(false)}/>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { useNoteMarkdownContent } from '../../../hooks/common/use-note-markdown-content'\nimport { download } from '../../common/download/download'\nimport { SidebarButton } from './sidebar-button'\n\nexport const ExportMarkdownSidebarEntry: React.FC = () => {\n  useTranslation()\n\n  const markdownContent = useNoteMarkdownContent()\n  const onClick = useCallback(() => {\n    download(markdownContent, `title.md`, 'text/markdown') //todo: replace hard coded title with redux\n  }, [markdownContent])\n\n  return (\n    <SidebarButton data-cy={\"menu-export-markdown\"} onClick={onClick} icon={'file-text'}>\n      <Trans i18nKey={'editor.export.markdown-file'}/>\n    </SidebarButton>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { SidebarMenuProps } from './types'\n\nexport const SidebarMenu: React.FC<SidebarMenuProps> = ({children, expand}) => {\n    return (\n      <div className={`sidebar-menu ${expand ? 'show' : ''}`}>\n        <div className={`d-flex flex-column`}>\n          {children}\n        </div>\n      </div>\n    );\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useCallback } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport links from '../../../links.json'\nimport { ExportMarkdownSidebarEntry } from './export-markdown-sidebar-entry'\nimport { SidebarButton } from './sidebar-button'\nimport { SidebarMenu } from './sidebar-menu'\nimport { DocumentSidebarMenuSelection, SpecificSidebarMenuProps } from './types'\n\nexport const ExportMenuSidebarMenu: React.FC<SpecificSidebarMenuProps> = (\n  {\n    className,\n    menuId,\n    onClick,\n    selectedMenuId\n  }) => {\n  useTranslation()\n\n  const hide = selectedMenuId !== DocumentSidebarMenuSelection.NONE && selectedMenuId !== menuId\n  const expand = selectedMenuId === menuId\n  const onClickHandler = useCallback(() => {\n    onClick(menuId)\n  }, [menuId, onClick])\n\n  return (\n    <Fragment>\n      <SidebarButton data-cy={\"menu-export\"} hide={hide} icon={expand ? \"arrow-left\" : \"cloud-download\"}\n                     className={className} onClick={onClickHandler}>\n        <Trans i18nKey={'editor.documentBar.export'}/>\n      </SidebarButton>\n      <SidebarMenu expand={expand}>\n        <SidebarButton icon={\"github\"}>\n          Gist\n        </SidebarButton>\n        <SidebarButton icon={\"gitlab\"}>\n          Gitlab Snippet\n        </SidebarButton>\n\n        <ExportMarkdownSidebarEntry/>\n\n        <SidebarButton icon={\"file-code-o\"}>\n          HTML\n        </SidebarButton>\n        <SidebarButton icon={\"file-code-o\"}>\n          <Trans i18nKey='editor.export.rawHtml'/>\n        </SidebarButton>\n        <SidebarButton icon={\"file-pdf-o\"}>\n          <a className='small text-muted' dir={'auto'} href={links.faq} target={'_blank'} rel='noopener noreferrer'>\n            <Trans i18nKey={'editor.export.pdf'}/>\n            &nbsp;\n            <span className={'text-primary'}>\n                <Trans i18nKey={'common.why'}/>\n              </span>\n          </a>\n        </SidebarButton>\n      </SidebarMenu>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { ToggleButton, ToggleButtonGroup } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\n\nexport interface PermissionGroupEntryProps {\n  title: string\n  editMode: GroupMode\n  onChangeEditMode: (newMode: GroupMode) => void\n}\n\nexport enum GroupMode {\n  NONE,\n  VIEW,\n  EDIT,\n}\n\nexport const PermissionGroupEntry: React.FC<PermissionGroupEntryProps> = ({ title, editMode, onChangeEditMode }) => {\n  const { t } = useTranslation()\n\n  return (\n    <li className={'list-group-item d-flex flex-row justify-content-between align-items-center'}>\n      <Trans i18nKey={title}/>\n      <ToggleButtonGroup\n        type='radio'\n        name='edit-mode'\n        value={editMode}\n        onChange={onChangeEditMode}\n      >\n        <ToggleButton\n          title={ t('editor.modal.permissions.denyGroup', { name: t(title) })}\n          variant={'light'}\n          className={'text-secondary'}\n          value={GroupMode.NONE}\n        >\n          <ForkAwesomeIcon icon='ban'/>\n        </ToggleButton>\n        <ToggleButton\n          title={ t('editor.modal.permissions.viewOnlyGroup', { name: t(title) })}\n          variant={'light'}\n          className={'text-secondary'}\n          value={GroupMode.VIEW}\n        >\n          <ForkAwesomeIcon icon='eye'/>\n        </ToggleButton>\n        <ToggleButton\n          title={t('editor.modal.permissions.editGroup', { name: t(title) })}\n          variant={'light'}\n          className={'text-secondary'}\n          value={GroupMode.EDIT}\n        >\n          <ForkAwesomeIcon icon='pencil'/>\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </li>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useCallback, useRef } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { useNoteMarkdownContent } from '../../../hooks/common/use-note-markdown-content'\nimport { setNoteMarkdownContent } from '../../../redux/note-details/methods'\nimport { SidebarButton } from './sidebar-button'\nimport { UploadInput } from './upload-input'\n\nexport const ImportMarkdownSidebarEntry: React.FC = () => {\n  const markdownContent = useNoteMarkdownContent()\n  useTranslation()\n\n  const onImportMarkdown = useCallback((file: File) => {\n    return new Promise<void>((resolve, reject) => {\n      const fileReader = new FileReader()\n      fileReader.addEventListener('load', () => {\n        const newContent = fileReader.result as string\n        setNoteMarkdownContent(markdownContent.length === 0 ? newContent : `${markdownContent}\\n${newContent}`)\n      })\n      fileReader.addEventListener('loadend', () => {\n        resolve()\n      })\n      fileReader.addEventListener('error', (error) => {\n        reject(error)\n      })\n      fileReader.readAsText(file)\n    })\n  }, [markdownContent])\n\n  const clickRef = useRef<(() => void)>()\n  const buttonClick = useCallback(() => {\n    clickRef.current?.()\n  }, [])\n\n  return (\n    <Fragment>\n      <SidebarButton data-cy={\"menu-import-markdown\"} icon={\"file-text-o\"} onClick={buttonClick}>\n        <Trans i18nKey={'editor.import.file'}/>\n      </SidebarButton>\n      <UploadInput onLoad={onImportMarkdown} data-cy={\"menu-import-markdown-input\"}\n                   acceptedFiles={'.md, text/markdown, text/plain'} onClickRef={clickRef}/>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useCallback } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { ImportMarkdownSidebarEntry } from './import-markdown-sidebar-entry'\nimport { SidebarButton } from './sidebar-button'\nimport { SidebarMenu } from './sidebar-menu'\nimport { DocumentSidebarMenuSelection, SpecificSidebarMenuProps } from './types'\n\nexport const ImportMenuSidebarMenu: React.FC<SpecificSidebarMenuProps> = (\n  {\n    className,\n    menuId,\n    onClick,\n    selectedMenuId\n  }) => {\n\n  useTranslation()\n\n  const hide = selectedMenuId !== DocumentSidebarMenuSelection.NONE && selectedMenuId !== menuId\n  const expand = selectedMenuId === menuId\n  const onClickHandler = useCallback(() => {\n    onClick(menuId)\n  }, [menuId, onClick])\n\n  return (\n    <Fragment>\n      <SidebarButton data-cy={\"menu-import\"} hide={hide} icon={expand ? \"arrow-left\" : \"cloud-upload\"}\n                     className={className} onClick={onClickHandler}>\n        <Trans i18nKey={'editor.documentBar.import'}/>\n      </SidebarButton>\n      <SidebarMenu expand={expand}>\n        <SidebarButton icon={\"github\"}>\n          Gist\n        </SidebarButton>\n        <SidebarButton icon={\"gitlab\"}>\n          Gitlab Snippet\n        </SidebarButton>\n        <SidebarButton icon={\"clipboard\"}>\n          <Trans i18nKey={'editor.import.clipboard'}/>\n        </SidebarButton>\n        <ImportMarkdownSidebarEntry/>\n      </SidebarMenu>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport interface CacheEntry<T> {\n  entryCreated: number\n  data: T\n}\n\nexport class Cache<K, V> {\n  private store = new Map<K, CacheEntry<V>>()\n\n  readonly entryLifetime: number\n  readonly maxEntries: number\n\n  constructor (lifetime: number, maxEntries = 0) {\n    if (lifetime < 0) {\n      throw new Error('Cache entry lifetime can not be less than 0 seconds.')\n    }\n    this.entryLifetime = lifetime\n    this.maxEntries = maxEntries\n  }\n\n  has (key: K): boolean {\n    if (!this.store.has(key)) {\n      return false\n    }\n    const entry = this.store.get(key)\n    return (!!entry && entry.entryCreated >= (Date.now() - this.entryLifetime * 1000))\n  }\n\n  get (key: K): V {\n    const entry = this.store.get(key)\n    if (!entry) {\n      throw new Error('This cache entry does not exist. Check with \".has()\" before using \".get()\".')\n    }\n    return entry.data\n  }\n\n  put (key: K, value: V): void {\n    if (this.maxEntries > 0 && this.store.size === this.maxEntries) {\n      this.store.delete(this.store.keys().next().value)\n    }\n    this.store.set(key, {\n      entryCreated: Date.now(),\n      data: value\n    })\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Cache } from '../../components/common/cache/cache'\nimport { defaultFetchConfig, expectResponseCode, getApiUrl } from '../utils'\nimport { UserResponse } from './types'\n\nconst cache = new Cache<string, UserResponse>(600)\n\nexport const getUserById = async (userid: string): Promise<UserResponse> => {\n  if (cache.has(userid)) {\n    return cache.get(userid)\n  }\n  const response = await fetch(`${getApiUrl()}/users/${userid}`, {\n    ...defaultFetchConfig\n  })\n  expectResponseCode(response)\n  const userData = (await response.json()) as UserResponse\n  cache.put(userid, userData)\n  return userData\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { ReactElement, useState } from 'react'\nimport { Button, FormControl, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\nimport { Principal } from './permission-modal'\n\nexport interface PermissionListProps {\n  list: Principal[]\n  identifier: (entry: Principal) => ReactElement\n  changeEditMode: (id: Principal['id'], canEdit: Principal['canEdit']) => void\n  removeEntry: (id: Principal['id']) => void\n  createEntry: (name: Principal['name']) => void\n  editI18nKey: string\n  viewI18nKey: string\n  removeI18nKey: string\n  addI18nKey: string\n}\n\nexport enum EditMode {\n  VIEW,\n  EDIT\n}\n\nexport const PermissionList: React.FC<PermissionListProps> = ({ list, identifier, changeEditMode, removeEntry, createEntry, editI18nKey, viewI18nKey, removeI18nKey, addI18nKey }) => {\n  const { t } = useTranslation()\n  const [newEntry, setNewEntry] = useState('')\n\n  const addEntry = () => {\n    createEntry(newEntry)\n    setNewEntry('')\n  }\n\n  return (\n    <ul className={'list-group'}>\n      {list.map(entry => (\n        <li key={entry.id} className={'list-group-item d-flex flex-row justify-content-between align-items-center'}>\n          {identifier(entry)}\n          <div>\n            <Button\n              variant='light'\n              className={'text-danger mr-2'}\n              title={t(removeI18nKey, { name: entry.name })}\n              onClick={() => removeEntry(entry.id)}\n            >\n              <ForkAwesomeIcon icon={'times'}/>\n            </Button>\n            <ToggleButtonGroup\n              type='radio'\n              name='edit-mode'\n              value={entry.canEdit ? EditMode.EDIT : EditMode.VIEW}\n              onChange={(value: EditMode) => changeEditMode(entry.id, value === EditMode.EDIT)}\n            >\n              <ToggleButton\n                title={ t(viewI18nKey, { name: entry.name })}\n                variant={'light'}\n                className={'text-secondary'}\n                value={EditMode.VIEW}\n              >\n                <ForkAwesomeIcon icon='eye'/>\n              </ToggleButton>\n              <ToggleButton\n                title={t(editI18nKey, { name: entry.name })}\n                variant={'light'}\n                className={'text-secondary'}\n                value={EditMode.EDIT}\n              >\n                <ForkAwesomeIcon icon='pencil'/>\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </li>\n      ))}\n      <li className={'list-group-item'}>\n        <form onSubmit={event => {\n          event.preventDefault()\n          addEntry()\n        }}>\n          <InputGroup className={'mr-1 mb-1'}>\n            <FormControl\n              value={newEntry}\n              placeholder={t(addI18nKey)}\n              aria-label={t(addI18nKey)}\n              onChange={event => setNewEntry(event.currentTarget.value)}\n            />\n            <Button\n              variant='light'\n              className={'text-secondary ml-2'}\n              title={t(addI18nKey)}\n              onClick={addEntry}\n            >\n              <ForkAwesomeIcon icon={'plus'}/>\n            </Button>\n          </InputGroup>\n        </form>\n      </li>\n    </ul>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport './active-indicator.scss'\n\nexport enum ActiveIndicatorStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive'\n}\n\nexport interface ActiveIndicatorProps {\n  status: ActiveIndicatorStatus;\n}\n\nexport const ActiveIndicator: React.FC<ActiveIndicatorProps> = ({ status }) => {\n  return (\n    <span className={`activeIndicator ${status}`}/>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useEffect, useState } from 'react'\nimport { Alert, Modal } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { getUserById } from '../../../../api/users'\nimport { CommonModal } from '../../../common/modals/common-modal'\nimport { ShowIf } from '../../../common/show-if/show-if'\nimport { UserAvatar, UserAvatarProps } from '../../../common/user-avatar/user-avatar'\nimport { GroupMode, PermissionGroupEntry } from './permission-group-entry'\nimport { PermissionList } from './permission-list'\n\nexport interface PermissionsModalProps {\n  show: boolean,\n  onHide: () => void\n}\n\nexport interface Principal {\n  id: string\n  name: string\n  photo: string\n  canEdit: boolean\n}\n\ninterface NotePermissions {\n  owner: string\n  sharedTo: {\n    username: string\n    canEdit: boolean\n  }[],\n  sharedToGroup: {\n    id: string\n    canEdit: boolean\n  }[]\n}\n\nexport const EVERYONE_GROUP_ID = '1'\nexport const EVERYONE_LOGGED_IN_GROUP_ID = '2'\n\nconst permissionsApiResponse: NotePermissions = {\n  owner: 'dermolly',\n  sharedTo: [{\n    username: 'emcrx',\n    canEdit: true\n  }, {\n    username: 'mrdrogdrog',\n    canEdit: false\n  }],\n  sharedToGroup: [{\n    id: EVERYONE_GROUP_ID,\n    canEdit: true\n  }, {\n    id: EVERYONE_LOGGED_IN_GROUP_ID,\n    canEdit: false\n  }]\n}\n\nexport const PermissionModal: React.FC<PermissionsModalProps> = ({ show, onHide }) => {\n  useTranslation()\n  const [error, setError] = useState(false)\n  const [userList, setUserList] = useState<Principal[]>([])\n  const [owner, setOwner] = useState<UserAvatarProps>()\n  const [allUserPermissions, setAllUserPermissions] = useState(GroupMode.NONE)\n  const [allLoggedInUserPermissions, setAllLoggedInUserPermissions] = useState(GroupMode.NONE)\n\n  useEffect(() => {\n    // set owner\n    getUserById(permissionsApiResponse.owner).then(response => {\n      setOwner({\n        name: response.name,\n        photo: response.photo\n      })\n    }).catch(() => setError(true))\n    // set user List\n    permissionsApiResponse.sharedTo.forEach(shareUser => {\n      getUserById(shareUser.username).then(response => {\n        setUserList(list => list.concat([{\n          id: response.id,\n          name: response.name,\n          photo: response.photo,\n          canEdit: shareUser.canEdit\n        }]))\n      }).catch(() => setError(true))\n    })\n    // set group List\n    permissionsApiResponse.sharedToGroup.forEach(sharedGroup => {\n      if (sharedGroup.id === EVERYONE_GROUP_ID) {\n        setAllUserPermissions(sharedGroup.canEdit ? GroupMode.EDIT : GroupMode.VIEW)\n      } else if (sharedGroup.id === EVERYONE_LOGGED_IN_GROUP_ID) {\n        setAllLoggedInUserPermissions(sharedGroup.canEdit ? GroupMode.EDIT : GroupMode.VIEW)\n      }\n    })\n  }, [])\n\n  const changeUserMode = (userId: Principal['id'], canEdit: Principal['canEdit']) => {\n    setUserList(list =>\n      list\n        .map(user => {\n          if (user.id === userId) {\n            user.canEdit = canEdit\n          }\n          return user\n        }))\n  }\n\n  const removeUser = (userId: Principal['id']) => {\n    setUserList(list => list.filter(user => user.id !== userId))\n  }\n\n  const addUser = (name: Principal['name']) => {\n    setUserList(list => list.concat({\n      id: name,\n      photo: '/img/avatar.png',\n      name: name,\n      canEdit: false\n    }))\n  }\n\n  return (\n    <CommonModal\n      show={show}\n      onHide={onHide}\n      closeButton={true}\n      titleI18nKey={'editor.modal.permissions.title'}>\n      <Modal.Body>\n        <h5 className={'mb-3'}><Trans i18nKey={'editor.modal.permissions.owner'}/></h5>\n        <ShowIf condition={error}>\n          <Alert variant='danger'>\n            <Trans i18nKey='editor.modal.permissions.error'/>\n          </Alert>\n        </ShowIf>\n        <ul className={'list-group'}>\n          <li className={'list-group-item d-flex flex-row align-items-center'}>\n            <UserAvatar name={owner?.name ?? ''} photo={owner?.photo ?? ''}/>\n          </li>\n        </ul>\n        <h5 className={'my-3'}><Trans i18nKey={'editor.modal.permissions.sharedWithUsers'}/></h5>\n        <PermissionList\n          list={userList}\n          identifier={entry => (<UserAvatar name={entry.name} photo={entry.photo}/>)}\n          changeEditMode={changeUserMode}\n          removeEntry={removeUser}\n          createEntry={addUser}\n          editI18nKey={'editor.modal.permissions.editUser'}\n          viewI18nKey={'editor.modal.permissions.viewOnlyUser'}\n          removeI18nKey={'editor.modal.permissions.removeUser'}\n          addI18nKey={'editor.modal.permissions.addUser'}\n        />\n        <h5 className={'my-3'}><Trans i18nKey={'editor.modal.permissions.sharedWithGroups'}/></h5>\n        <ul className={'list-group'}>\n          <PermissionGroupEntry\n            title={'editor.modal.permissions.allUser'}\n            editMode={allUserPermissions}\n            onChangeEditMode={setAllUserPermissions}\n          />\n          <PermissionGroupEntry\n            title={'editor.modal.permissions.allLoggedInUser'}\n            editMode={allLoggedInUserPermissions}\n            onChangeEditMode={setAllLoggedInUserPermissions}\n          />\n        </ul>\n      </Modal.Body>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { PermissionModal } from '../document-bar/permissions/permission-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const PermissionsSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({className, hide}) => {\n  const [showModal, setShowModal] = useState(false)\n  useTranslation()\n\n  return (\n    <Fragment>\n      <SidebarButton hide={hide} className={className} icon={\"lock\"} onClick={() => setShowModal(true)}>\n        <Trans i18nKey={'editor.modal.permissions.title'}/>\n      </SidebarButton>\n      <PermissionModal show={showModal} onHide={() => setShowModal(false)}/>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const PinNoteSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ className, hide }) => {\n  useTranslation()\n\n  const isPinned = true\n  const i18nKey = isPinned ? 'editor.documentBar.pinNoteToHistory' : 'editor.documentBar.pinnedToHistory'\n\n  return (\n    <SidebarButton icon={'thumb-tack'} className={className} hide={hide}>\n      <Trans i18nKey={i18nKey}/>\n    </SidebarButton>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Cache } from '../../components/common/cache/cache'\nimport { defaultFetchConfig, expectResponseCode, getApiUrl } from '../utils'\nimport { Revision, RevisionListEntry } from './types'\n\nconst revisionCache = new Cache<string, Revision>(3600)\n\nexport const getRevision = async (noteId: string, timestamp: number): Promise<Revision> => {\n  const cacheKey = `${noteId}:${timestamp}`\n  if (revisionCache.has(cacheKey)) {\n    return revisionCache.get(cacheKey)\n  }\n  const response = await fetch(getApiUrl() + `/notes/${noteId}/revisions/${timestamp}`, {\n    ...defaultFetchConfig\n  })\n  expectResponseCode(response)\n  const revisionData = await response.json() as Revision\n  revisionCache.put(cacheKey, revisionData)\n  return revisionData\n}\n\nexport const getAllRevisions = async (noteId: string): Promise<RevisionListEntry[]> => {\n  // TODO Change 'revisions-list' to 'revisions' as soon as the backend is ready to serve some data!\n  const response = await fetch(getApiUrl() + `/notes/${noteId}/revisions-list`, {\n    ...defaultFetchConfig\n  })\n  expectResponseCode(response)\n  return await response.json() as Promise<RevisionListEntry[]>\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { DateTime } from 'luxon'\nimport React from 'react'\nimport { ListGroup } from 'react-bootstrap'\nimport { Trans } from 'react-i18next'\nimport { RevisionListEntry } from '../../../../api/revisions/types'\nimport { UserResponse } from '../../../../api/users/types'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\nimport { UserAvatar } from '../../../common/user-avatar/user-avatar'\n\nexport interface RevisionModalListEntryProps {\n  active: boolean\n  onClick: () => void\n  revision: RevisionListEntry\n  revisionAuthorListMap: Map<number, UserResponse[]>\n}\n\nexport const RevisionModalListEntry: React.FC<RevisionModalListEntryProps> = ({ active, onClick, revision, revisionAuthorListMap }) => (\n  <ListGroup.Item\n    as='li'\n    active={active}\n    onClick={onClick}\n    className='user-select-none revision-item d-flex flex-column'\n  >\n    <span>\n      <ForkAwesomeIcon icon={'clock-o'} className='mx-2'/>\n      {DateTime.fromMillis(revision.timestamp * 1000).toFormat('DDDD T')}\n    </span>\n    <span>\n      <ForkAwesomeIcon icon={'file-text-o'} className='mx-2'/>\n      <Trans i18nKey={'editor.modal.revision.length'}/>: {revision.length}\n    </span>\n    <span className={'d-flex flex-row my-1 align-items-center'}>\n      <ForkAwesomeIcon icon={'user-o'} className={'mx-2'}/>\n      {\n        revisionAuthorListMap.get(revision.timestamp)?.map((user, index) => {\n          return (\n            <UserAvatar name={user.name} photo={user.photo} showName={false} additionalClasses={'mx-1'} key={index}/>\n          )\n        })\n      }\n    </span>\n  </ListGroup.Item>\n)\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Alert, Button, Col, ListGroup, Modal, Row } from 'react-bootstrap'\nimport ReactDiffViewer, { DiffMethod } from 'react-diff-viewer'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { useParams } from 'react-router'\nimport { getAllRevisions, getRevision } from '../../../../api/revisions'\nimport { Revision, RevisionListEntry } from '../../../../api/revisions/types'\nimport { UserResponse } from '../../../../api/users/types'\nimport { useIsDarkModeActivated } from '../../../../hooks/common/use-is-dark-mode-activated'\nimport { useNoteMarkdownContent } from '../../../../hooks/common/use-note-markdown-content'\nimport { CommonModal } from '../../../common/modals/common-modal'\nimport { ShowIf } from '../../../common/show-if/show-if'\nimport { RevisionModalListEntry } from './revision-modal-list-entry'\nimport './revision-modal.scss'\nimport { downloadRevision, getUserDataForRevision } from './utils'\n\nexport interface PermissionsModalProps {\n  show: boolean,\n  onHide: () => void\n}\n\nexport const RevisionModal: React.FC<PermissionsModalProps> = ({ show, onHide }) => {\n  useTranslation()\n  const [revisions, setRevisions] = useState<RevisionListEntry[]>([])\n  const [selectedRevisionTimestamp, setSelectedRevisionTimestamp] = useState<number | null>(null)\n  const [selectedRevision, setSelectedRevision] = useState<Revision | null>(null)\n  const [error, setError] = useState(false)\n  const revisionAuthorListMap = useRef(new Map<number, UserResponse[]>())\n  const darkModeEnabled = useIsDarkModeActivated()\n  const { id } = useParams<{ id: string }>()\n\n  useEffect(() => {\n    getAllRevisions(id).then(fetchedRevisions => {\n      fetchedRevisions.forEach(revision => {\n        const authorData = getUserDataForRevision(revision.authors)\n        revisionAuthorListMap.current.set(revision.timestamp, authorData)\n      })\n      setRevisions(fetchedRevisions)\n      if (fetchedRevisions.length >= 1) {\n        setSelectedRevisionTimestamp(fetchedRevisions[0].timestamp)\n      }\n    }).catch(() => setError(true))\n  }, [setRevisions, setError, id])\n\n  useEffect(() => {\n    if (selectedRevisionTimestamp === null) {\n      return\n    }\n    getRevision(id, selectedRevisionTimestamp).then(fetchedRevision => {\n      setSelectedRevision(fetchedRevision)\n    }).catch(() => setError(true))\n  }, [selectedRevisionTimestamp, id])\n\n  const markdownContent = useNoteMarkdownContent()\n\n  return (\n    <CommonModal show={show} onHide={onHide} titleI18nKey={'editor.modal.revision.title'} icon={'history'} closeButton={true} size={'xl'} additionalClasses='revision-modal'>\n      <Modal.Body>\n        <Row>\n          <Col lg={4} className={'scroll-col'}>\n            <ListGroup as='ul'>\n              {\n                revisions.map((revision, revisionIndex) => (\n                  <RevisionModalListEntry\n                    key={revisionIndex}\n                    active={selectedRevisionTimestamp === revision.timestamp}\n                    revision={revision}\n                    revisionAuthorListMap={revisionAuthorListMap.current}\n                    onClick={() => setSelectedRevisionTimestamp(revision.timestamp)}\n                  />\n                ))\n              }\n            </ListGroup>\n          </Col>\n          <Col lg={8} className={'scroll-col'}>\n            <ShowIf condition={error}>\n              <Alert variant='danger'>\n                <Trans i18nKey='editor.modal.revision.error'/>\n              </Alert>\n            </ShowIf>\n            <ShowIf condition={!error && !!selectedRevision}>\n              <ReactDiffViewer\n                oldValue={selectedRevision?.content}\n                newValue={markdownContent}\n                splitView={false}\n                compareMethod={DiffMethod.WORDS}\n                useDarkTheme={darkModeEnabled}\n              />\n            </ShowIf>\n          </Col>\n        </Row>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button\n          variant='secondary'\n          onClick={onHide}>\n          <Trans i18nKey={'common.close'}/>\n        </Button>\n        <Button\n          variant='danger'\n          disabled={!selectedRevisionTimestamp}\n          onClick={() => window.alert('Not yet implemented. Requires websocket.')}>\n          <Trans i18nKey={'editor.modal.revision.revertButton'}/>\n        </Button>\n        <Button\n          variant='primary'\n          disabled={!selectedRevisionTimestamp}\n          onClick={() => downloadRevision(id, selectedRevision)}>\n          <Trans i18nKey={'editor.modal.revision.download'}/>\n        </Button>\n      </Modal.Footer>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Revision } from '../../../../api/revisions/types'\nimport { getUserById } from '../../../../api/users'\nimport { UserResponse } from '../../../../api/users/types'\nimport { download } from '../../../common/download/download'\n\nexport const downloadRevision = (noteId: string, revision: Revision | null): void => {\n  if (!revision) {\n    return\n  }\n  download(revision.content, `${noteId}-${revision.timestamp}.md`, 'text/markdown')\n}\n\nexport const getUserDataForRevision = (authors: string[]): UserResponse[] => {\n  const users: UserResponse[] = []\n  authors.forEach((author, index) => {\n    if (index > 9) {\n      return\n    }\n    getUserById(author)\n      .then(userData => {\n        users.push(userData)\n      })\n      .catch((error) => console.error(error))\n  })\n  return users\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans } from 'react-i18next'\nimport { RevisionModal } from '../document-bar/revisions/revision-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const RevisionSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({className, hide}) => {\n  const [showModal, setShowModal] = useState(false)\n\n  return (\n    <Fragment>\n      <SidebarButton hide={hide} className={className} icon={\"history\"} onClick={() => setShowModal(true)}>\n        <Trans i18nKey={'editor.modal.revision.title'}/>\n      </SidebarButton>\n      <RevisionModal show={showModal} onHide={() => setShowModal(false)}/>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport equal from 'fast-deep-equal'\nimport React from 'react'\nimport { Modal } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\nimport { useParams } from 'react-router-dom'\nimport { useFrontendBaseUrl } from '../../../../hooks/common/use-frontend-base-url'\nimport { ApplicationState } from '../../../../redux'\nimport { CopyableField } from '../../../common/copyable/copyable-field/copyable-field'\nimport { CommonModal } from '../../../common/modals/common-modal'\nimport { ShowIf } from '../../../common/show-if/show-if'\nimport { EditorPagePathParams } from '../../editor-page'\n\nexport interface ShareModalProps {\n  show: boolean,\n  onHide: () => void\n}\n\nexport const ShareModal: React.FC<ShareModalProps> = ({ show, onHide }) => {\n  useTranslation()\n  const noteFrontmatter = useSelector((state: ApplicationState) => state.noteDetails.frontmatter, equal)\n  const editorMode = useSelector((state: ApplicationState) => state.editorConfig.editorMode)\n  const baseUrl = useFrontendBaseUrl()\n  const { id } = useParams<EditorPagePathParams>()\n\n  return (\n    <CommonModal\n      show={show}\n      onHide={onHide}\n      closeButton={true}\n      titleI18nKey={'editor.modal.shareLink.title'}>\n      <Modal.Body>\n        <Trans i18nKey={'editor.modal.shareLink.editorDescription'}/>\n        <CopyableField content={`${baseUrl}/n/${id}?${editorMode}`} nativeShareButton={true}\n                       url={`${baseUrl}/n/${id}?${editorMode}`}/>\n        <ShowIf condition={noteFrontmatter.type === 'slide'}>\n          <Trans i18nKey={'editor.modal.shareLink.slidesDescription'}/>\n          <CopyableField content={`${baseUrl}/p/${id}`} nativeShareButton={true} url={`${baseUrl}/p/${id}`}/>\n        </ShowIf>\n        <ShowIf condition={noteFrontmatter.type === ''}>\n          <Trans i18nKey={'editor.modal.shareLink.viewOnlyDescription'}/>\n          <CopyableField content={`${baseUrl}/s/${id}`} nativeShareButton={true} url={`${baseUrl}/s/${id}`}/>\n        </ShowIf>\n      </Modal.Body>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { ShareModal } from '../document-bar/share/share-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const ShareSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({className, hide}) => {\n  const [showModal, setShowModal] = useState(false)\n  useTranslation()\n\n  return (\n    <Fragment>\n      <SidebarButton hide={hide} className={className} icon={\"share\"} onClick={() => setShowModal(true)}>\n        <Trans i18nKey={'editor.modal.shareLink.title'}/>\n      </SidebarButton>\n      <ShareModal show={showModal} onHide={() => setShowModal(false)}/>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useCallback, useEffect, useRef, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\nimport { useLocation } from 'react-router'\nimport { useApplyDarkMode } from '../../hooks/common/use-apply-dark-mode'\nimport { useDocumentTitleWithNoteTitle } from '../../hooks/common/use-document-title-with-note-title'\nimport { useNoteMarkdownContent } from '../../hooks/common/use-note-markdown-content'\nimport { ApplicationState } from '../../redux'\nimport { setEditorMode } from '../../redux/editor/methods'\nimport {\n  SetCheckboxInMarkdownContent,\n  setNoteFrontmatter,\n  setNoteMarkdownContent,\n  updateNoteTitleByFirstHeading\n} from '../../redux/note-details/methods'\nimport { MotdBanner } from '../common/motd-banner/motd-banner'\nimport { ShowIf } from '../common/show-if/show-if'\nimport { ErrorWhileLoadingNoteAlert } from '../document-read-only-page/ErrorWhileLoadingNoteAlert'\nimport { LoadingNoteAlert } from '../document-read-only-page/LoadingNoteAlert'\nimport { AppBar, AppBarMode } from './app-bar/app-bar'\nimport { EditorMode } from './app-bar/editor-view-mode'\nimport { EditorPane } from './editor-pane/editor-pane'\nimport { useLoadNoteFromServer } from './hooks/useLoadNoteFromServer'\nimport { useViewModeShortcuts } from './hooks/useViewModeShortcuts'\nimport { RenderIframe } from './renderer-pane/render-iframe'\nimport { Sidebar } from './sidebar/sidebar'\nimport { Splitter } from './splitter/splitter'\nimport { DualScrollState, ScrollState } from './synced-scroll/scroll-props'\n\nexport interface EditorPagePathParams {\n  id: string\n}\n\nexport enum ScrollSource {\n  EDITOR,\n  RENDERER\n}\n\nexport const EditorPage: React.FC = () => {\n  useTranslation()\n  const { search } = useLocation()\n  const markdownContent = useNoteMarkdownContent()\n  const scrollSource = useRef<ScrollSource>(ScrollSource.EDITOR)\n\n  const editorMode: EditorMode = useSelector((state: ApplicationState) => state.editorConfig.editorMode)\n  const editorSyncScroll: boolean = useSelector((state: ApplicationState) => state.editorConfig.syncScroll)\n\n  const [scrollState, setScrollState] = useState<DualScrollState>(() => ({\n    editorScrollState: { firstLineInView: 1, scrolledPercentage: 0 },\n    rendererScrollState: { firstLineInView: 1, scrolledPercentage: 0 }\n  }))\n\n  useEffect(() => {\n    const requestedMode = search.substr(1)\n    const mode = Object.values(EditorMode).find(mode => mode === requestedMode)\n    if (mode) {\n      setEditorMode(mode)\n    }\n  }, [search])\n\n  const onMarkdownRendererScroll = useCallback((newScrollState: ScrollState) => {\n    if (scrollSource.current === ScrollSource.RENDERER && editorSyncScroll) {\n      setScrollState((old) => ({ editorScrollState: newScrollState, rendererScrollState: old.rendererScrollState }))\n    }\n  }, [editorSyncScroll])\n\n  const onEditorScroll = useCallback((newScrollState: ScrollState) => {\n    if (scrollSource.current === ScrollSource.EDITOR && editorSyncScroll) {\n      setScrollState((old) => ({ rendererScrollState: newScrollState, editorScrollState: old.editorScrollState }))\n    }\n  }, [editorSyncScroll])\n\n  useViewModeShortcuts()\n  useApplyDarkMode()\n  useDocumentTitleWithNoteTitle()\n  const [error, loading] = useLoadNoteFromServer()\n\n  const setRendererToScrollSource = useCallback(() => {\n    scrollSource.current = ScrollSource.RENDERER\n  }, [])\n\n  const setEditorToScrollSource = useCallback(() => {\n    scrollSource.current = ScrollSource.EDITOR\n  }, [])\n\n  return (\n    <Fragment>\n      <MotdBanner/>\n      <div className={'d-flex flex-column vh-100'}>\n        <AppBar mode={AppBarMode.EDITOR}/>\n\n        <div className={'container'}>\n          <ErrorWhileLoadingNoteAlert show={error}/>\n          <LoadingNoteAlert show={loading}/>\n        </div>\n        <ShowIf condition={!error && !loading}>\n          <div className={\"flex-fill d-flex h-100 w-100 overflow-hidden flex-row\"}>\n            <Splitter\n              showLeft={editorMode === EditorMode.EDITOR || editorMode === EditorMode.BOTH}\n              left={\n                <EditorPane\n                  onContentChange={setNoteMarkdownContent}\n                  content={markdownContent}\n                  scrollState={scrollState.editorScrollState}\n                  onScroll={onEditorScroll}\n                  onMakeScrollSource={setEditorToScrollSource}/>\n              }\n              showRight={editorMode === EditorMode.PREVIEW || editorMode === EditorMode.BOTH}\n              right={\n                <RenderIframe\n                  markdownContent={markdownContent}\n                  onMakeScrollSource={setRendererToScrollSource}\n                  onFirstHeadingChange={updateNoteTitleByFirstHeading}\n                  onTaskCheckedChange={SetCheckboxInMarkdownContent}\n                  onFrontmatterChange={setNoteFrontmatter}\n                  onScroll={onMarkdownRendererScroll}\n                  scrollState={scrollState.rendererScrollState}/>\n              }\n              containerClassName={'overflow-hidden'}/>\n            <Sidebar/>\n          </div>\n        </ShowIf>\n      </div>\n    </Fragment>\n  )\n}\nexport default EditorPage\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { UserAvatar } from '../../../common/user-avatar/user-avatar'\nimport { ActiveIndicator, ActiveIndicatorStatus } from './active-indicator'\nimport './user-line.scss'\n\nexport interface UserLineProps {\n  name: string;\n  photo: string;\n  color: string;\n  status: ActiveIndicatorStatus;\n}\n\nexport const UserLine: React.FC<UserLineProps> = ({ name, photo, color, status }) => {\n  return (\n    <div className={'d-flex align-items-center h-100 w-100'}>\n      <div className='d-inline-flex align-items-bottom user-line-color-indicator' style={{ borderLeftColor: color }}/>\n      <UserAvatar photo={photo} name={name} additionalClasses={'flex-fill overflow-hidden px-2 text-nowrap w-100'}/>\n      <div className={\"active-indicator-container\"}>\n        <ActiveIndicator status={status} />\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useCallback, useEffect, useRef, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { SidebarButton } from '../sidebar-button'\nimport { SidebarMenu } from '../sidebar-menu'\nimport { DocumentSidebarMenuSelection, SpecificSidebarMenuProps } from '../types'\nimport { ActiveIndicatorStatus } from './active-indicator'\nimport './online-counter.scss'\nimport { UserLine } from './user-line'\n\nexport const UsersOnlineSidebarMenu: React.FC<SpecificSidebarMenuProps> = ({\n                                                                             className,\n                                                                             menuId,\n                                                                             onClick,\n                                                                             selectedMenuId\n                                                                           }) => {\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const [counter] = useState(2)\n  useTranslation()\n\n  useEffect(() => {\n    const value = `${counter}`\n    buttonRef.current?.style.setProperty('--users-online', `\"${value}\"`)\n  }, [counter])\n\n  const hide = selectedMenuId !== DocumentSidebarMenuSelection.NONE && selectedMenuId !== menuId\n  const expand = selectedMenuId === menuId\n  const onClickHandler = useCallback(() => {\n    onClick(menuId)\n  }, [menuId, onClick])\n\n  return (\n    <Fragment>\n      <SidebarButton hide={hide} buttonRef={buttonRef} onClick={onClickHandler} icon={expand ? \"arrow-left\" : \"users\"}\n                     variant={'primary'} className={`online-entry ${className ?? ''}`}>\n        <Trans i18nKey={'editor.onlineStatus.online'}/>\n      </SidebarButton>\n      <SidebarMenu expand={expand}>\n        <SidebarButton>\n          <UserLine name=\"Philip Molares\" photo=\"/img/avatar.png\" color=\"red\" status={ActiveIndicatorStatus.INACTIVE}/>\n        </SidebarButton>\n        <SidebarButton>\n          <UserLine name=\"Tilman Vatteroth\" photo=\"/img/avatar.png\" color=\"blue\" status={ActiveIndicatorStatus.ACTIVE}/>\n        </SidebarButton>\n      </SidebarMenu>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useRef, useState } from 'react'\nimport { useClickAway } from 'react-use'\nimport { DeleteNoteSidebarEntry } from './delete-note-sidebar-entry'\nimport { DocumentInfoSidebarEntry } from './document-info-sidebar-entry'\nimport { ExportMenuSidebarMenu } from './export-menu-sidebar-menu'\nimport { ImportMenuSidebarMenu } from './import-menu-sidebar-menu'\nimport { PermissionsSidebarEntry } from './permissions-sidebar-entry'\nimport { PinNoteSidebarEntry } from './pin-note-sidebar-entry'\nimport { RevisionSidebarEntry } from './revision-sidebar-entry'\nimport { ShareSidebarEntry } from './share-sidebar-entry'\nimport \"./style/theme.scss\"\nimport { DocumentSidebarMenuSelection } from './types'\nimport { UsersOnlineSidebarMenu } from './users-online-sidebar-menu/users-online-sidebar-menu'\n\nexport const Sidebar: React.FC = () => {\n\n  const sideBarRef = useRef<HTMLDivElement>(null)\n  const [selectedMenu, setSelectedMenu] = useState<DocumentSidebarMenuSelection>(DocumentSidebarMenuSelection.NONE)\n\n  useClickAway(sideBarRef, () => {\n    setSelectedMenu(DocumentSidebarMenuSelection.NONE)\n  })\n\n  const toggleValue = useCallback((toggleValue: DocumentSidebarMenuSelection): void => {\n    const newValue = selectedMenu === toggleValue ? DocumentSidebarMenuSelection.NONE : toggleValue\n    setSelectedMenu(newValue)\n  }, [selectedMenu])\n\n  const selectionIsNotNone = selectedMenu !== DocumentSidebarMenuSelection.NONE\n\n  return (\n    <div className=\"slide-sidebar\">\n      <div ref={sideBarRef} className={`sidebar-inner ${selectionIsNotNone ? 'show' : ''}`}>\n        <UsersOnlineSidebarMenu menuId={DocumentSidebarMenuSelection.USERS_ONLINE}\n                                selectedMenuId={selectedMenu} onClick={toggleValue}/>\n        <DocumentInfoSidebarEntry hide={selectionIsNotNone}/>\n        <RevisionSidebarEntry hide={selectionIsNotNone}/>\n        <PermissionsSidebarEntry hide={selectionIsNotNone}/>\n        <ImportMenuSidebarMenu menuId={DocumentSidebarMenuSelection.IMPORT}\n                               selectedMenuId={selectedMenu} onClick={toggleValue}/>\n        <ExportMenuSidebarMenu menuId={DocumentSidebarMenuSelection.EXPORT}\n                               selectedMenuId={selectedMenu} onClick={toggleValue}/>\n        <ShareSidebarEntry hide={selectionIsNotNone}/>\n        <DeleteNoteSidebarEntry hide={selectionIsNotNone}/>\n        <PinNoteSidebarEntry hide={selectionIsNotNone}/>\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport './split-divider.scss'\n\nexport interface SplitDividerProps {\n  onGrab: () => void\n}\n\nexport const SplitDivider: React.FC<SplitDividerProps> = ({ onGrab }) => {\n  return (\n    <div\n      onMouseDown={() => onGrab()}\n      onTouchStart={() => onGrab()}\n      className={'split-divider'}/>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { ReactElement, useCallback, useRef, useState } from 'react'\nimport { ShowIf } from '../../common/show-if/show-if'\nimport { SplitDivider } from './split-divider/split-divider'\nimport './splitter.scss'\n\nexport interface SplitterProps {\n  left: ReactElement\n  right: ReactElement\n  containerClassName?: string\n  showLeft: boolean\n  showRight: boolean\n}\n\nexport const Splitter: React.FC<SplitterProps> = ({ containerClassName, left, right, showLeft, showRight }) => {\n  const [split, setSplit] = useState(50)\n  const realSplit = Math.max(0, Math.min(100, (showRight ? split : 100)))\n  const [doResizing, setDoResizing] = useState(false)\n  const splitContainer = useRef<HTMLDivElement>(null)\n\n  const recalculateSize = (mouseXPosition: number): void => {\n    if (!splitContainer.current) {\n      return\n    }\n    const x = mouseXPosition - splitContainer.current.offsetLeft\n\n    const newSize = x / splitContainer.current.clientWidth\n    setSplit(newSize * 100)\n  }\n\n  const stopResizing = useCallback(() => {\n    setDoResizing(false)\n  }, [])\n\n  const onMouseMove = useCallback((mouseEvent: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (doResizing) {\n      recalculateSize(mouseEvent.pageX)\n      mouseEvent.preventDefault()\n    }\n  }, [doResizing])\n\n  const onTouchMove = useCallback((touchEvent: React.TouchEvent<HTMLDivElement>) => {\n    if (doResizing) {\n      recalculateSize(touchEvent.touches[0].pageX)\n      touchEvent.preventDefault()\n    }\n  }, [doResizing])\n\n  const onGrab = useCallback(() => setDoResizing(true), [])\n\n  return (\n    <div ref={splitContainer} className={`flex-fill flex-row d-flex ${containerClassName || ''}`}\n         onMouseUp={stopResizing} onTouchEnd={stopResizing} onMouseMove={onMouseMove} onTouchMove={onTouchMove}>\n      <div className={`splitter left ${!showLeft ? 'd-none' : ''}`} style={{ flexBasis: `calc(${realSplit}% - 5px)` }}>\n        {left}\n      </div>\n      <ShowIf condition={showLeft && showRight}>\n        <div className='splitter separator'>\n          <SplitDivider onGrab={onGrab}/>\n        </div>\n      </ShowIf>\n      <div className={`splitter right ${!showRight ? 'd-none' : ''}`}>\n        {right}\n      </div>\n    </div>\n  )\n}\n"],"sourceRoot":""}