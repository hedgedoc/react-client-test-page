{"version":3,"sources":["components/document-read-only-page/document-infobar.tsx","components/document-read-only-page/document-read-only-page.tsx"],"names":["DocumentInfobar","changedAuthor","changedTime","createdAuthor","createdTime","editable","noteId","viewCount","t","useTranslation","className","mode","DocumentInfoLineWithTimeMode","CREATED","time","userName","profileImageSrc","EDITED","Trans","i18nKey","condition","text","href","icon","title","DocumentReadOnlyPage","id","useParams","useApplyDarkMode","useDocumentTitleWithNoteTitle","onFirstHeadingChange","useCallback","updateNoteTitleByFirstHeading","onFrontmatterChange","setNoteFrontmatter","useLoadNoteFromServer","error","loading","markdownContent","useNoteMarkdownContent","noteDetails","useSelector","state","AppBarMode","BASIC","ErrorWhileLoadingNoteAlert","show","LoadingNoteAlert","lastChange","userId","timestamp","createTime","frameClasses","rendererType","RendererType","DOCUMENT"],"mappings":"uWA2BaA,EAAkD,SAAC,GAQzD,IAPLC,EAOI,EAPJA,cACAC,EAMI,EANJA,YACAC,EAKI,EALJA,cACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,OACAC,EACI,EADJA,UAEQC,EAAMC,cAAND,EAER,OACE,sBAAKE,UAAY,wCAAjB,UACE,qBAAKA,UAAY,SAAjB,kBACA,sBAAKA,UAAY,mBAAjB,UACE,sBAAKA,UAAY,qBAAjB,UACE,cAAC,IAAD,CACEC,KAAOC,IAA6BC,QACpCC,KAAOV,EACPW,SAAWZ,EACXa,gBAAkB,oBACpB,cAAC,IAAD,CACEL,KAAOC,IAA6BK,OACpCH,KAAOZ,EACPa,SAAWd,EACXe,gBAAkB,oBACpB,0BAEF,uBAAMN,UAAY,UAAlB,UACIH,EADJ,IACgB,cAACW,EAAA,EAAD,CAAOC,QAAU,6BAC/B,cAAC,IAAD,CAAQC,UAAYf,EAApB,SACE,cAAC,IAAD,CAAcgB,KAAO,GAAKC,KAAI,aAAUhB,GAAYiB,KAAO,SAC7Cb,UAAY,yCACZc,MAAQhB,EAAE,qCAI9B,qBAAKE,UAAY,SAAjB,sB,0BCtCOe,EAAiC,WAAO,IAAD,EAElDhB,cAFkD,IAG1CiB,EAAOC,cAAPD,GAERE,cACAC,cAEA,IAAMC,EAAuBC,sBAAYC,IAA+B,IAClEC,EAAsBF,sBAAYG,IAAoB,IATV,EAUzBC,cAVyB,mBAU3CC,EAV2C,KAUpCC,EAVoC,KAW5CC,EAAkBC,cAClBC,EAAcC,aAAY,SAACC,GAAD,OAA6BA,EAAMF,eAEnE,OACE,sBAAK9B,UAAY,sCAAjB,UACE,cAAC,IAAD,IACA,cAAC,IAAD,CAAQC,KAAOgC,IAAWC,QAC1B,sBAAKlC,UAAY,YAAjB,UACE,cAACmC,EAAA,EAAD,CAA4BC,KAAOV,IACnC,cAACW,EAAA,EAAD,CAAkBD,KAAOT,OAE3B,eAAC,IAAD,CAAQjB,WAAagB,IAAUC,EAA/B,UACE,cAAC,EAAD,CACEpC,cAAa,UAAGuC,EAAYQ,WAAWC,cAA1B,QAAoC,GACjD/C,YAAcsC,EAAYQ,WAAWE,UACrC/C,cAAgB,OAChBC,YAAcoC,EAAYW,WAC1B9C,UAAW,EACXC,OAASoB,EACTnB,UAAYiC,EAAYjC,YAE1B,cAAC,IAAD,CAAc6C,aAAe,wBACfd,gBAAkBA,EAClBR,qBAAuBA,EACvBG,oBAAsBA,EACtBoB,aAAcC,IAAaC,kBAMlC9B","file":"static/js/documentReadOnly.32dc76d0.chunk.js","sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { DateTime } from 'luxon'\nimport React from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { InternalLink } from '../common/links/internal-link'\nimport { ShowIf } from '../common/show-if/show-if'\nimport {\n  DocumentInfoLineWithTimeMode,\n  DocumentInfoTimeLine\n} from '../editor-page/document-bar/document-info/document-info-time-line'\nimport './document-infobar.scss'\n\nexport interface DocumentInfobarProps {\n  changedAuthor: string\n  changedTime: DateTime\n  createdAuthor: string\n  createdTime: DateTime\n  editable: boolean\n  noteId: string\n  viewCount: number\n}\n\nexport const DocumentInfobar: React.FC<DocumentInfobarProps> = ({\n  changedAuthor,\n  changedTime,\n  createdAuthor,\n  createdTime,\n  editable,\n  noteId,\n  viewCount\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <div className={ 'd-flex flex-row my-3 document-infobar' }>\n      <div className={ 'col-md' }>&nbsp;</div>\n      <div className={ 'd-flex flex-fill' }>\n        <div className={ 'd-flex flex-column' }>\n          <DocumentInfoTimeLine\n            mode={ DocumentInfoLineWithTimeMode.CREATED }\n            time={ createdTime }\n            userName={ createdAuthor }\n            profileImageSrc={ '/img/avatar.png' }/>\n          <DocumentInfoTimeLine\n            mode={ DocumentInfoLineWithTimeMode.EDITED }\n            time={ changedTime }\n            userName={ changedAuthor }\n            profileImageSrc={ '/img/avatar.png' }/>\n          <hr/>\n        </div>\n        <span className={ 'ml-auto' }>\n          { viewCount } <Trans i18nKey={ 'views.readOnly.viewCount' }/>\n          <ShowIf condition={ editable }>\n            <InternalLink text={ '' } href={ `/n/${ noteId }` } icon={ 'pencil' }\n                          className={ 'text-primary text-decoration-none mx-1' }\n                          title={ t('views.readOnly.editNote') }/>\n          </ShowIf>\n        </span>\n      </div>\n      <div className={ 'col-md' }>&nbsp;</div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\nimport { useParams } from 'react-router'\nimport { useApplyDarkMode } from '../../hooks/common/use-apply-dark-mode'\nimport { useDocumentTitleWithNoteTitle } from '../../hooks/common/use-document-title-with-note-title'\nimport { useNoteMarkdownContent } from '../../hooks/common/use-note-markdown-content'\nimport { ApplicationState } from '../../redux'\nimport { setNoteFrontmatter, updateNoteTitleByFirstHeading } from '../../redux/note-details/methods'\nimport { MotdBanner } from '../common/motd-banner/motd-banner'\nimport { ShowIf } from '../common/show-if/show-if'\nimport { AppBar, AppBarMode } from '../editor-page/app-bar/app-bar'\nimport { EditorPagePathParams } from '../editor-page/editor-page'\nimport { useLoadNoteFromServer } from '../editor-page/hooks/useLoadNoteFromServer'\nimport { RenderIframe } from '../editor-page/renderer-pane/render-iframe'\nimport { DocumentInfobar } from './document-infobar'\nimport { ErrorWhileLoadingNoteAlert } from './ErrorWhileLoadingNoteAlert'\nimport { LoadingNoteAlert } from './LoadingNoteAlert'\nimport { RendererType } from '../render-page/rendering-message'\n\nexport const DocumentReadOnlyPage: React.FC = () => {\n\n  useTranslation()\n  const { id } = useParams<EditorPagePathParams>()\n\n  useApplyDarkMode()\n  useDocumentTitleWithNoteTitle()\n\n  const onFirstHeadingChange = useCallback(updateNoteTitleByFirstHeading, [])\n  const onFrontmatterChange = useCallback(setNoteFrontmatter, [])\n  const [error, loading] = useLoadNoteFromServer()\n  const markdownContent = useNoteMarkdownContent()\n  const noteDetails = useSelector((state: ApplicationState) => state.noteDetails)\n\n  return (\n    <div className={ 'd-flex flex-column mvh-100 bg-light' }>\n      <MotdBanner/>\n      <AppBar mode={ AppBarMode.BASIC }/>\n      <div className={ 'container' }>\n        <ErrorWhileLoadingNoteAlert show={ error }/>\n        <LoadingNoteAlert show={ loading }/>\n      </div>\n      <ShowIf condition={ !error && !loading }>\n        <DocumentInfobar\n          changedAuthor={ noteDetails.lastChange.userId ?? '' }\n          changedTime={ noteDetails.lastChange.timestamp }\n          createdAuthor={ 'Test' }\n          createdTime={ noteDetails.createTime }\n          editable={ true }\n          noteId={ id }\n          viewCount={ noteDetails.viewCount }\n        />\n        <RenderIframe frameClasses={ 'flex-fill h-100 w-100' }\n                      markdownContent={ markdownContent }\n                      onFirstHeadingChange={ onFirstHeadingChange }\n                      onFrontmatterChange={ onFrontmatterChange }\n                      rendererType={RendererType.DOCUMENT}/>\n      </ShowIf>\n    </div>\n  )\n}\n\nexport default DocumentReadOnlyPage\n"],"sourceRoot":""}