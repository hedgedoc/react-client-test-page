{"version":3,"sources":["components/editor-page/renderer-pane/yaml-array-deprecation-alert.tsx","components/editor-page/synced-scroll/hooks/use-synced-scrolling.ts","components/editor-page/synced-scroll/hooks/use-on-user-scroll.ts","components/editor-page/synced-scroll/hooks/use-scroll-to-line-mark.ts","components/editor-page/synced-scroll/utils.ts","components/editor-page/table-of-contents/build-react-dom-from-toc-ast.tsx","components/editor-page/table-of-contents/table-of-contents.tsx","components/render-page/markdown-toc-button/table-of-contents-hovering-button.tsx","components/render-page/width-based-table-of-contents.tsx","components/render-page/markdown-document.tsx","components/render-page/iframe-renderer-to-editor-communicator.ts","components/editor-page/render-context/iframe-renderer-to-editor-communicator-context-provider.tsx","components/render-page/iframe-markdown-renderer.tsx","components/render-page/hooks/use-image-click-handler.ts","components/render-page/render-page.tsx","redux/note-details/methods.ts","hooks/common/use-apply-dark-mode.ts"],"names":["YamlArrayDeprecationAlert","useTranslation","yamlDeprecatedTags","useApplicationState","state","noteDetails","frontmatter","deprecatedTagsSyntax","condition","Alert","data-cy","className","variant","dir","Trans","i18nKey","href","links","faq","useSyncedScrolling","outerContainerRef","rendererRef","numberOfLines","scrollState","onScroll","useState","lineMarks","setLineMarks","onLineMarkerPositionChanged","useCallback","linkMarkerPositions","current","documentRenderPaneTop","offsetTop","offset","adjustedLineMakerPositions","map","oldMarker","line","position","onUserScroll","scrollContainer","length","scrollTop","lineMarksBeforeScrollTop","filter","lineMark","lineMarksAfterScrollTop","beforeLineMark","reduce","prevLineMark","currentLineMark","afterLineMark","componentHeight","distanceToBefore","percentageRaw","lineCount","Math","floor","lineHeight","innerScrolling","firstLineInView","scrolledPercentage","useOnUserScroll","contentLineCount","lastScrollPosition","useRef","scrollTo","targetPosition","top","useEffect","offsetHeight","lineNumber","lastMarkBefore","firstMarkAfter","i","currentMark","findLineMarks","positionBefore","positionAfter","lastMarkBeforeLine","correctedPosition","useScrollToLineMark","buildReactDomFromTocAst","toc","levelsToShowUnderThis","headerCounts","wrapInListItem","baseUrl","rawName","n","trim","nameCount","get","slug","tocSlugify","headlineUrl","URL","toString","set","content","l","title","onClick","createJumpToMarkClickEventHandler","substr","c","child","TableOfContents","ast","maxDepth","tocTree","useMemo","Map","TableOfContentsHoveringButton","tocAst","Dropdown","drop","Toggle","id","icon","Menu","WidthBasedTableOfContents","width","MarkdownDocument","additionalOuterContainerClasses","additionalRendererClasses","onFirstHeadingChange","onFrontmatterChange","onMakeScrollSource","onTaskCheckedChange","markdownContent","onImageClick","onHeightChange","disableToc","rendererSize","useResizeObserver","ref","internalDocumentRenderPaneRef","containerWidth","setTocAst","useAlternativeBreaks","breaks","height","split","onMouseEnter","onTocChange","IframeRendererToEditorCommunicator","onSetMarkdownContentHandler","onSetDarkModeHandler","onSetScrollStateHandler","onSetBaseConfigurationHandler","handler","this","sendMessageToOtherSide","type","RenderIframeMessageType","RENDERER_READY","lineInMarkdown","checked","ON_TASK_CHECKBOX_CHANGE","firstHeading","ON_FIRST_HEADING_CHANGE","SET_SCROLL_SOURCE_TO_RENDERER","ON_SET_FRONTMATTER","SET_SCROLL_STATE","details","IMAGE_CLICKED","ON_HEIGHT_CHANGE","event","renderMessage","data","SET_MARKDOWN_CONTENT","SET_DARKMODE","activated","SET_BASE_CONFIGURATION","baseConfiguration","IframeCommunicator","IFrameRendererToEditorCommunicatorContext","createContext","undefined","IframeRendererToEditorCommunicatorContextProvider","children","editorOrigin","useSelector","config","iframeCommunication","currentIFrameCommunicator","newCommunicator","setOtherSide","window","parent","currentIFrame","sendRendererReady","unregisterEventListener","Provider","value","IframeMarkdownRenderer","setMarkdownContent","setScrollState","setBaseConfiguration","iframeCommunicator","useContext","onSetBaseConfiguration","onSetMarkdownContent","onSetDarkMode","setDarkMode","onSetScrollState","sendTaskCheckBoxChange","sendFirstHeadingChanged","sendSetScrollSourceToRenderer","setNoteFrontmatter","sendSetFrontmatter","sendSetScrollState","image","target","src","sendClickedImageUrl","alt","useImageClickHandler","sendHeightChange","rendererType","RendererType","DOCUMENT","INTRO","RenderPage","useApplyDarkMode","setNoteMarkdownContent","store","dispatch","NoteDetailsActionType","SET_DOCUMENT_CONTENT","setNoteDataFromServer","apiResponse","SET_NOTE_DATA_FROM_SERVER","note","updateNoteTitleByFirstHeading","UPDATE_NOTE_TITLE_BY_FIRST_HEADING","initialState","SET_NOTE_FRONTMATTER","setCheckboxInMarkdownContent","SET_CHECKBOX_IN_MARKDOWN_CONTENT","darkModeActivated","useIsDarkModeActivated","document","body","classList","add","remove"],"mappings":"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","file":"static/js/renderPage.82e08d87.chunk.js","sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { Alert } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport links from '../../../links.json'\nimport { TranslatedExternalLink } from '../../common/links/translated-external-link'\nimport { ShowIf } from '../../common/show-if/show-if'\nimport { useApplicationState } from '../../../hooks/common/use-application-state'\n\nexport const YamlArrayDeprecationAlert: React.FC = () => {\n  useTranslation()\n  const yamlDeprecatedTags = useApplicationState((state) => state.noteDetails.frontmatter.deprecatedTagsSyntax)\n\n  return (\n    <ShowIf condition={yamlDeprecatedTags}>\n      <Alert data-cy={'yamlArrayDeprecationAlert'} className={'text-wrap'} variant='warning' dir='auto'>\n        <span className={'text-wrap'}>\n          <span className={'text-wrap'}>\n            <Trans i18nKey='editor.deprecatedTags' />\n          </span>\n        </span>\n        <br />\n        <TranslatedExternalLink i18nKey={'common.readForMoreInfo'} href={links.faq} className={'text-primary'} />\n      </Alert>\n    </ShowIf>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useState } from 'react'\nimport { LineMarkerPosition } from '../../../markdown-renderer/types'\nimport { ScrollState } from '../scroll-props'\nimport { useOnUserScroll } from './use-on-user-scroll'\nimport { useScrollToLineMark } from './use-scroll-to-line-mark'\n\nexport const useSyncedScrolling = (\n  outerContainerRef: React.RefObject<HTMLElement>,\n  rendererRef: React.RefObject<HTMLElement>,\n  numberOfLines: number,\n  scrollState?: ScrollState,\n  onScroll?: (scrollState: ScrollState) => void\n): [(lineMarkers: LineMarkerPosition[]) => void, () => void] => {\n  const [lineMarks, setLineMarks] = useState<LineMarkerPosition[]>()\n\n  const onLineMarkerPositionChanged = useCallback(\n    (linkMarkerPositions: LineMarkerPosition[]) => {\n      if (!outerContainerRef.current || !rendererRef.current) {\n        return\n      }\n      const documentRenderPaneTop = outerContainerRef.current.offsetTop ?? 0\n      const rendererTop = rendererRef.current.offsetTop ?? 0\n      const offset = rendererTop - documentRenderPaneTop\n      const adjustedLineMakerPositions = linkMarkerPositions.map((oldMarker) => ({\n        line: oldMarker.line,\n        position: oldMarker.position + offset\n      }))\n      setLineMarks(adjustedLineMakerPositions)\n    },\n    [outerContainerRef, rendererRef]\n  )\n\n  const onUserScroll = useOnUserScroll(lineMarks, outerContainerRef, onScroll)\n  useScrollToLineMark(scrollState, lineMarks, numberOfLines, outerContainerRef)\n\n  return [onLineMarkerPositionChanged, onUserScroll]\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { RefObject, useCallback } from 'react'\nimport { LineMarkerPosition } from '../../../markdown-renderer/types'\nimport { ScrollState } from '../scroll-props'\n\nexport const useOnUserScroll = (\n  lineMarks: LineMarkerPosition[] | undefined,\n  scrollContainer: RefObject<HTMLElement>,\n  onScroll: ((newScrollState: ScrollState) => void) | undefined\n): (() => void) => {\n  return useCallback(() => {\n    if (!scrollContainer.current || !lineMarks || lineMarks.length === 0 || !onScroll) {\n      return\n    }\n\n    const scrollTop = scrollContainer.current.scrollTop\n\n    const lineMarksBeforeScrollTop = lineMarks.filter((lineMark) => lineMark.position <= scrollTop)\n    if (lineMarksBeforeScrollTop.length === 0) {\n      return\n    }\n\n    const lineMarksAfterScrollTop = lineMarks.filter((lineMark) => lineMark.position > scrollTop)\n    if (lineMarksAfterScrollTop.length === 0) {\n      return\n    }\n\n    const beforeLineMark = lineMarksBeforeScrollTop.reduce((prevLineMark, currentLineMark) =>\n      prevLineMark.line >= currentLineMark.line ? prevLineMark : currentLineMark\n    )\n\n    const afterLineMark = lineMarksAfterScrollTop.reduce((prevLineMark, currentLineMark) =>\n      prevLineMark.line < currentLineMark.line ? prevLineMark : currentLineMark\n    )\n\n    const componentHeight = afterLineMark.position - beforeLineMark.position\n    const distanceToBefore = scrollTop - beforeLineMark.position\n    const percentageRaw = distanceToBefore / componentHeight\n    const lineCount = afterLineMark.line - beforeLineMark.line\n    const line = Math.floor(lineCount * percentageRaw + beforeLineMark.line)\n    const lineHeight = componentHeight / lineCount\n    const innerScrolling = Math.floor(((distanceToBefore % lineHeight) / lineHeight) * 100)\n\n    const newScrollState: ScrollState = { firstLineInView: line, scrolledPercentage: innerScrolling }\n    onScroll(newScrollState)\n  }, [lineMarks, onScroll, scrollContainer])\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { RefObject, useCallback, useEffect, useRef } from 'react'\nimport { LineMarkerPosition } from '../../../markdown-renderer/types'\nimport { ScrollState } from '../scroll-props'\nimport { findLineMarks } from '../utils'\n\nexport const useScrollToLineMark = (\n  scrollState: ScrollState | undefined,\n  lineMarks: LineMarkerPosition[] | undefined,\n  contentLineCount: number,\n  scrollContainer: RefObject<HTMLElement>\n): void => {\n  const lastScrollPosition = useRef<number>()\n\n  const scrollTo = useCallback(\n    (targetPosition: number): void => {\n      if (!scrollContainer.current || targetPosition === lastScrollPosition.current) {\n        return\n      }\n      lastScrollPosition.current = targetPosition\n      scrollContainer.current.scrollTo({\n        top: targetPosition\n      })\n    },\n    [scrollContainer]\n  )\n\n  useEffect(() => {\n    if (!scrollContainer.current || !lineMarks || lineMarks.length === 0 || !scrollState) {\n      return\n    }\n    if (scrollState.firstLineInView < lineMarks[0].line) {\n      scrollTo(0)\n      return\n    }\n    if (scrollState.firstLineInView > lineMarks[lineMarks.length - 1].line) {\n      scrollTo(scrollContainer.current.offsetHeight)\n      return\n    }\n    const { lastMarkBefore, firstMarkAfter } = findLineMarks(lineMarks, scrollState.firstLineInView)\n    const positionBefore = lastMarkBefore ? lastMarkBefore.position : lineMarks[0].position\n    const positionAfter = firstMarkAfter ? firstMarkAfter.position : scrollContainer.current.offsetHeight\n    const lastMarkBeforeLine = lastMarkBefore ? lastMarkBefore.line : 1\n    const firstMarkAfterLine = firstMarkAfter ? firstMarkAfter.line : contentLineCount\n    const linesBetweenMarkers = firstMarkAfterLine - lastMarkBeforeLine\n    const blockHeight = positionAfter - positionBefore\n    const lineHeight = blockHeight / linesBetweenMarkers\n    const position =\n      positionBefore +\n      (scrollState.firstLineInView - lastMarkBeforeLine) * lineHeight +\n      (scrollState.scrolledPercentage / 100) * lineHeight\n    const correctedPosition = Math.floor(position)\n    scrollTo(correctedPosition)\n  }, [contentLineCount, lineMarks, scrollContainer, scrollState, scrollTo])\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { LineMarkerPosition } from '../../markdown-renderer/types'\n\nexport const findLineMarks = (\n  lineMarks: LineMarkerPosition[],\n  lineNumber: number\n): { lastMarkBefore: LineMarkerPosition | undefined; firstMarkAfter: LineMarkerPosition | undefined } => {\n  let lastMarkBefore\n  let firstMarkAfter\n  for (let i = 0; i < lineMarks.length; i++) {\n    const currentMark = lineMarks[i]\n    if (!currentMark) {\n      continue\n    }\n\n    if (currentMark.line <= lineNumber) {\n      lastMarkBefore = currentMark\n    }\n    if (currentMark.line > lineNumber) {\n      firstMarkAfter = currentMark\n    }\n    if (!!firstMarkAfter && !!lastMarkBefore) {\n      break\n    }\n  }\n  return {\n    lastMarkBefore,\n    firstMarkAfter\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { TocAst } from 'markdown-it-toc-done-right'\nimport React, { Fragment, ReactElement } from 'react'\nimport { ShowIf } from '../../common/show-if/show-if'\nimport { createJumpToMarkClickEventHandler } from '../../markdown-renderer/replace-components/link-replacer/link-replacer'\nimport { tocSlugify } from './toc-slugify'\n\nexport const buildReactDomFromTocAst = (\n  toc: TocAst,\n  levelsToShowUnderThis: number,\n  headerCounts: Map<string, number>,\n  wrapInListItem: boolean,\n  baseUrl?: string\n): ReactElement | null => {\n  if (levelsToShowUnderThis < 0) {\n    return null\n  }\n\n  const rawName = toc.n.trim()\n  const nameCount = (headerCounts.get(rawName) ?? -1) + 1\n  const slug = `#${tocSlugify(rawName)}${nameCount > 0 ? `-${nameCount}` : ''}`\n  const headlineUrl = new URL(slug, baseUrl).toString()\n\n  headerCounts.set(rawName, nameCount)\n\n  const content = (\n    <Fragment>\n      <ShowIf condition={toc.l > 0}>\n        <a href={headlineUrl} title={rawName} onClick={createJumpToMarkClickEventHandler(slug.substr(1))}>\n          {rawName}\n        </a>\n      </ShowIf>\n      <ShowIf condition={toc.c.length > 0}>\n        <ul>\n          {toc.c.map((child) => buildReactDomFromTocAst(child, levelsToShowUnderThis - 1, headerCounts, true, baseUrl))}\n        </ul>\n      </ShowIf>\n    </Fragment>\n  )\n\n  if (wrapInListItem) {\n    return <li key={headlineUrl}>{content}</li>\n  } else {\n    return content\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { TocAst } from 'markdown-it-toc-done-right'\nimport React, { useMemo } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { ShowIf } from '../../common/show-if/show-if'\nimport { buildReactDomFromTocAst } from './build-react-dom-from-toc-ast'\nimport './table-of-contents.scss'\n\nexport interface TableOfContentsProps {\n  ast: TocAst\n  maxDepth?: number\n  className?: string\n  baseUrl?: string\n}\n\nexport const TableOfContents: React.FC<TableOfContentsProps> = ({ ast, maxDepth = 3, className, baseUrl }) => {\n  useTranslation()\n  const tocTree = useMemo(\n    () => buildReactDomFromTocAst(ast, maxDepth, new Map<string, number>(), false, baseUrl),\n    [ast, maxDepth, baseUrl]\n  )\n\n  return (\n    <div className={`markdown-toc ${className ?? ''}`}>\n      <ShowIf condition={ast.c.length === 0}>\n        <Trans i18nKey={'editor.infoToc'} />\n      </ShowIf>\n      {tocTree}\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { Dropdown } from 'react-bootstrap'\nimport { TocAst } from 'markdown-it-toc-done-right'\nimport { ForkAwesomeIcon } from '../../common/fork-awesome/fork-awesome-icon'\nimport { TableOfContents } from '../../editor-page/table-of-contents/table-of-contents'\nimport './markdown-toc-button.scss'\n\nexport interface MarkdownTocButtonProps {\n  tocAst: TocAst\n  baseUrl: string\n}\n\n/**\n * Renders a button that is hovering over the parent and shows a {@link TableOfContents table of contents list} as overlay if clicked.\n *\n * @param tocAst the {@link TocAst AST} that should be rendered.\n * @param baseUrl the base url that will be used to generate the links\n * @return the created component\n */\nexport const TableOfContentsHoveringButton: React.FC<MarkdownTocButtonProps> = ({ tocAst, baseUrl }) => {\n  return (\n    <div className={'markdown-toc-sidebar-button'}>\n      <Dropdown drop={'up'}>\n        <Dropdown.Toggle id='toc-overlay-button' variant={'secondary'} className={'no-arrow'}>\n          <ForkAwesomeIcon icon={'list-ol'} />\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <div className={'p-2'}>\n            <TableOfContents ast={tocAst} baseUrl={baseUrl} />\n          </div>\n        </Dropdown.Menu>\n      </Dropdown>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { TocAst } from 'markdown-it-toc-done-right'\nimport { TableOfContents } from '../editor-page/table-of-contents/table-of-contents'\nimport { TableOfContentsHoveringButton } from './markdown-toc-button/table-of-contents-hovering-button'\n\nexport interface DocumentExternalTocProps {\n  tocAst: TocAst\n  width: number\n  baseUrl: string\n}\n\nconst MAX_WIDTH_FOR_BUTTON_VISIBILITY = 1100\n\n/**\n * Renders the {@link TableOfContents table of contents list} for the given {@link TocAst AST}.\n * If the given width is below {@link MAX_WIDTH_FOR_BUTTON_VISIBILITY the width limit} then a {@link TableOfContentsHoveringButton button} with an overlay will be shown instead.\n *\n * @param tocAst the {@link TocAst AST} that should be rendered.\n * @param width the width that should be used to determine if the button should be shown.\n * @param baseUrl the base url that will be used to generate the links //TODO: replace with consumer/provider\n * @return the created component\n */\nexport const WidthBasedTableOfContents: React.FC<DocumentExternalTocProps> = ({ tocAst, width, baseUrl }) => {\n  if (width >= MAX_WIDTH_FOR_BUTTON_VISIBILITY) {\n    return <TableOfContents ast={tocAst} className={'sticky'} baseUrl={baseUrl} />\n  } else {\n    return <TableOfContentsHoveringButton tocAst={tocAst} baseUrl={baseUrl} />\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { TocAst } from 'markdown-it-toc-done-right'\nimport React, { MutableRefObject, useEffect, useMemo, useRef, useState } from 'react'\nimport useResizeObserver from 'use-resize-observer'\nimport { NoteFrontmatter } from '../editor-page/note-frontmatter/note-frontmatter'\nimport { YamlArrayDeprecationAlert } from '../editor-page/renderer-pane/yaml-array-deprecation-alert'\nimport { useSyncedScrolling } from '../editor-page/synced-scroll/hooks/use-synced-scrolling'\nimport { ScrollProps } from '../editor-page/synced-scroll/scroll-props'\nimport { BasicMarkdownRenderer } from '../markdown-renderer/basic-markdown-renderer'\nimport { ImageClickHandler } from '../markdown-renderer/replace-components/image/image-replacer'\nimport './markdown-document.scss'\nimport { WidthBasedTableOfContents } from './width-based-table-of-contents'\nimport { ShowIf } from '../common/show-if/show-if'\nimport { useApplicationState } from '../../hooks/common/use-application-state'\n\nexport interface RendererProps extends ScrollProps {\n  onFirstHeadingChange?: (firstHeading: string | undefined) => void\n  onFrontmatterChange?: (frontmatter: NoteFrontmatter | undefined) => void\n  onTaskCheckedChange?: (lineInMarkdown: number, checked: boolean) => void\n  documentRenderPaneRef?: MutableRefObject<HTMLDivElement | null>\n  markdownContent: string\n  onImageClick?: ImageClickHandler\n  onHeightChange?: (height: number) => void\n}\n\nexport interface MarkdownDocumentProps extends RendererProps {\n  additionalOuterContainerClasses?: string\n  additionalRendererClasses?: string\n  disableToc?: boolean\n  baseUrl: string\n}\n\nexport const MarkdownDocument: React.FC<MarkdownDocumentProps> = ({\n  additionalOuterContainerClasses,\n  additionalRendererClasses,\n  onFirstHeadingChange,\n  onFrontmatterChange,\n  onMakeScrollSource,\n  onTaskCheckedChange,\n  baseUrl,\n  markdownContent,\n  onImageClick,\n  onScroll,\n  scrollState,\n  onHeightChange,\n  disableToc\n}) => {\n  const rendererRef = useRef<HTMLDivElement | null>(null)\n  const rendererSize = useResizeObserver({ ref: rendererRef.current })\n\n  const internalDocumentRenderPaneRef = useRef<HTMLDivElement>(null)\n  const internalDocumentRenderPaneSize = useResizeObserver({ ref: internalDocumentRenderPaneRef.current })\n  const containerWidth = internalDocumentRenderPaneSize.width ?? 0\n\n  const [tocAst, setTocAst] = useState<TocAst>()\n\n  const useAlternativeBreaks = useApplicationState((state) => state.noteDetails.frontmatter.breaks)\n\n  useEffect(() => {\n    if (!onHeightChange) {\n      return\n    }\n    onHeightChange(rendererSize.height ? rendererSize.height + 1 : 0)\n  }, [rendererSize.height, onHeightChange])\n\n  const contentLineCount = useMemo(() => markdownContent.split('\\n').length, [markdownContent])\n  const [onLineMarkerPositionChanged, onUserScroll] = useSyncedScrolling(\n    internalDocumentRenderPaneRef,\n    rendererRef,\n    contentLineCount,\n    scrollState,\n    onScroll\n  )\n\n  return (\n    <div\n      className={`markdown-document ${additionalOuterContainerClasses ?? ''}`}\n      ref={internalDocumentRenderPaneRef}\n      onScroll={onUserScroll}\n      onMouseEnter={onMakeScrollSource}>\n      <div className={'markdown-document-side'} />\n      <div className={'markdown-document-content'}>\n        <YamlArrayDeprecationAlert />\n        <BasicMarkdownRenderer\n          outerContainerRef={rendererRef}\n          className={`mb-3 ${additionalRendererClasses ?? ''}`}\n          content={markdownContent}\n          onFirstHeadingChange={onFirstHeadingChange}\n          onLineMarkerPositionChanged={onLineMarkerPositionChanged}\n          onFrontmatterChange={onFrontmatterChange}\n          onTaskCheckedChange={onTaskCheckedChange}\n          onTocChange={setTocAst}\n          baseUrl={baseUrl}\n          onImageClick={onImageClick}\n          useAlternativeBreaks={useAlternativeBreaks}\n        />\n      </div>\n      <div className={'markdown-document-side pt-4'}>\n        <ShowIf condition={!!tocAst && !disableToc}>\n          <WidthBasedTableOfContents tocAst={tocAst as TocAst} baseUrl={baseUrl} width={containerWidth} />\n        </ShowIf>\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { NoteFrontmatter } from '../editor-page/note-frontmatter/note-frontmatter'\nimport { ScrollState } from '../editor-page/synced-scroll/scroll-props'\nimport { IframeCommunicator } from './iframe-communicator'\nimport {\n  BaseConfiguration,\n  EditorToRendererIframeMessage,\n  ImageDetails,\n  RendererToEditorIframeMessage,\n  RenderIframeMessageType\n} from './rendering-message'\n\nexport class IframeRendererToEditorCommunicator extends IframeCommunicator<\n  RendererToEditorIframeMessage,\n  EditorToRendererIframeMessage\n> {\n  private onSetMarkdownContentHandler?: (markdownContent: string) => void\n  private onSetDarkModeHandler?: (darkModeActivated: boolean) => void\n  private onSetScrollStateHandler?: (scrollState: ScrollState) => void\n  private onSetBaseConfigurationHandler?: (baseConfiguration: BaseConfiguration) => void\n\n  public onSetBaseConfiguration(handler?: (baseConfiguration: BaseConfiguration) => void): void {\n    this.onSetBaseConfigurationHandler = handler\n  }\n\n  public onSetMarkdownContent(handler?: (markdownContent: string) => void): void {\n    this.onSetMarkdownContentHandler = handler\n  }\n\n  public onSetDarkMode(handler?: (darkModeActivated: boolean) => void): void {\n    this.onSetDarkModeHandler = handler\n  }\n\n  public onSetScrollState(handler?: (scrollState: ScrollState) => void): void {\n    this.onSetScrollStateHandler = handler\n  }\n\n  public sendRendererReady(): void {\n    this.sendMessageToOtherSide({\n      type: RenderIframeMessageType.RENDERER_READY\n    })\n  }\n\n  public sendTaskCheckBoxChange(lineInMarkdown: number, checked: boolean): void {\n    this.sendMessageToOtherSide({\n      type: RenderIframeMessageType.ON_TASK_CHECKBOX_CHANGE,\n      checked,\n      lineInMarkdown\n    })\n  }\n\n  public sendFirstHeadingChanged(firstHeading: string | undefined): void {\n    this.sendMessageToOtherSide({\n      type: RenderIframeMessageType.ON_FIRST_HEADING_CHANGE,\n      firstHeading\n    })\n  }\n\n  public sendSetScrollSourceToRenderer(): void {\n    this.sendMessageToOtherSide({\n      type: RenderIframeMessageType.SET_SCROLL_SOURCE_TO_RENDERER\n    })\n  }\n\n  public sendSetFrontmatter(frontmatter: NoteFrontmatter | undefined): void {\n    this.sendMessageToOtherSide({\n      type: RenderIframeMessageType.ON_SET_FRONTMATTER,\n      frontmatter: frontmatter\n    })\n  }\n\n  public sendSetScrollState(scrollState: ScrollState): void {\n    this.sendMessageToOtherSide({\n      type: RenderIframeMessageType.SET_SCROLL_STATE,\n      scrollState\n    })\n  }\n\n  public sendClickedImageUrl(details: ImageDetails): void {\n    this.sendMessageToOtherSide({\n      type: RenderIframeMessageType.IMAGE_CLICKED,\n      details: details\n    })\n  }\n\n  public sendHeightChange(height: number): void {\n    this.sendMessageToOtherSide({\n      type: RenderIframeMessageType.ON_HEIGHT_CHANGE,\n      height\n    })\n  }\n\n  protected handleEvent(event: MessageEvent<EditorToRendererIframeMessage>): boolean | undefined {\n    const renderMessage = event.data\n    switch (renderMessage.type) {\n      case RenderIframeMessageType.SET_MARKDOWN_CONTENT:\n        this.onSetMarkdownContentHandler?.(renderMessage.content)\n        return false\n      case RenderIframeMessageType.SET_DARKMODE:\n        this.onSetDarkModeHandler?.(renderMessage.activated)\n        return false\n      case RenderIframeMessageType.SET_SCROLL_STATE:\n        this.onSetScrollStateHandler?.(renderMessage.scrollState)\n        return false\n      case RenderIframeMessageType.SET_BASE_CONFIGURATION:\n        this.onSetBaseConfigurationHandler?.(renderMessage.baseConfiguration)\n        return false\n    }\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { createContext, useContext, useEffect, useMemo } from 'react'\nimport { IframeRendererToEditorCommunicator } from '../../render-page/iframe-renderer-to-editor-communicator'\nimport { useSelector } from 'react-redux'\nimport { ApplicationState } from '../../../redux'\n\nconst IFrameRendererToEditorCommunicatorContext = createContext<IframeRendererToEditorCommunicator | undefined>(\n  undefined\n)\n\nexport const useIFrameRendererToEditorCommunicator: () => IframeRendererToEditorCommunicator | undefined = () =>\n  useContext(IFrameRendererToEditorCommunicatorContext)\n\nexport const IframeRendererToEditorCommunicatorContextProvider: React.FC = ({ children }) => {\n  const editorOrigin = useSelector((state: ApplicationState) => state.config.iframeCommunication.editorOrigin)\n  const currentIFrameCommunicator = useMemo<IframeRendererToEditorCommunicator>(() => {\n    const newCommunicator = new IframeRendererToEditorCommunicator()\n    newCommunicator.setOtherSide(window.parent, editorOrigin)\n    return newCommunicator\n  }, [editorOrigin])\n\n  useEffect(() => {\n    const currentIFrame = currentIFrameCommunicator\n    currentIFrame?.sendRendererReady()\n    return () => currentIFrame?.unregisterEventListener()\n  }, [currentIFrameCommunicator])\n\n  return (\n    <IFrameRendererToEditorCommunicatorContext.Provider value={currentIFrameCommunicator}>\n      {children}\n    </IFrameRendererToEditorCommunicatorContext.Provider>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { ScrollState } from '../editor-page/synced-scroll/scroll-props'\nimport { BaseConfiguration, RendererType } from './rendering-message'\nimport { setDarkMode } from '../../redux/dark-mode/methods'\nimport { NoteFrontmatter } from '../editor-page/note-frontmatter/note-frontmatter'\nimport { setNoteFrontmatter } from '../../redux/note-details/methods'\nimport { ImageClickHandler } from '../markdown-renderer/replace-components/image/image-replacer'\nimport { useImageClickHandler } from './hooks/use-image-click-handler'\nimport { MarkdownDocument } from './markdown-document'\nimport { useIFrameRendererToEditorCommunicator } from '../editor-page/render-context/iframe-renderer-to-editor-communicator-context-provider'\n\nexport const IframeMarkdownRenderer: React.FC = () => {\n  const [markdownContent, setMarkdownContent] = useState('')\n  const [scrollState, setScrollState] = useState<ScrollState>({ firstLineInView: 1, scrolledPercentage: 0 })\n  const [baseConfiguration, setBaseConfiguration] = useState<BaseConfiguration | undefined>(undefined)\n\n  const iframeCommunicator = useIFrameRendererToEditorCommunicator()\n\n  useEffect(() => iframeCommunicator?.onSetBaseConfiguration(setBaseConfiguration), [iframeCommunicator])\n  useEffect(() => iframeCommunicator?.onSetMarkdownContent(setMarkdownContent), [iframeCommunicator])\n  useEffect(() => iframeCommunicator?.onSetDarkMode(setDarkMode), [iframeCommunicator])\n  useEffect(() => iframeCommunicator?.onSetScrollState(setScrollState), [iframeCommunicator, scrollState])\n\n  const onTaskCheckedChange = useCallback(\n    (lineInMarkdown: number, checked: boolean) => {\n      iframeCommunicator?.sendTaskCheckBoxChange(lineInMarkdown, checked)\n    },\n    [iframeCommunicator]\n  )\n\n  const onFirstHeadingChange = useCallback(\n    (firstHeading?: string) => {\n      iframeCommunicator?.sendFirstHeadingChanged(firstHeading)\n    },\n    [iframeCommunicator]\n  )\n\n  const onMakeScrollSource = useCallback(() => {\n    iframeCommunicator?.sendSetScrollSourceToRenderer()\n  }, [iframeCommunicator])\n\n  const onFrontmatterChange = useCallback(\n    (frontmatter?: NoteFrontmatter) => {\n      setNoteFrontmatter(frontmatter)\n      iframeCommunicator?.sendSetFrontmatter(frontmatter)\n    },\n    [iframeCommunicator]\n  )\n\n  const onScroll = useCallback(\n    (scrollState: ScrollState) => {\n      iframeCommunicator?.sendSetScrollState(scrollState)\n    },\n    [iframeCommunicator]\n  )\n\n  const onImageClick: ImageClickHandler = useImageClickHandler(iframeCommunicator)\n\n  const onHeightChange = useCallback(\n    (height: number) => {\n      iframeCommunicator?.sendHeightChange(height)\n    },\n    [iframeCommunicator]\n  )\n\n  if (!baseConfiguration) {\n    return null\n  }\n\n  switch (baseConfiguration.rendererType) {\n    case RendererType.DOCUMENT:\n      return (\n        <MarkdownDocument\n          additionalOuterContainerClasses={'vh-100 bg-light'}\n          markdownContent={markdownContent}\n          onTaskCheckedChange={onTaskCheckedChange}\n          onFirstHeadingChange={onFirstHeadingChange}\n          onMakeScrollSource={onMakeScrollSource}\n          onFrontmatterChange={onFrontmatterChange}\n          scrollState={scrollState}\n          onScroll={onScroll}\n          baseUrl={baseConfiguration.baseUrl}\n          onImageClick={onImageClick}\n        />\n      )\n    case RendererType.INTRO:\n      return (\n        <MarkdownDocument\n          additionalOuterContainerClasses={'vh-100 bg-light overflow-y-hidden'}\n          markdownContent={markdownContent}\n          baseUrl={baseConfiguration.baseUrl}\n          onImageClick={onImageClick}\n          disableToc={true}\n          onHeightChange={onHeightChange}\n        />\n      )\n    default:\n      return null\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback } from 'react'\nimport { ImageClickHandler } from '../../markdown-renderer/replace-components/image/image-replacer'\nimport { IframeRendererToEditorCommunicator } from '../iframe-renderer-to-editor-communicator'\n\nexport const useImageClickHandler = (\n  iframeCommunicator: IframeRendererToEditorCommunicator | undefined\n): ImageClickHandler => {\n  return useCallback(\n    (event: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\n      const image = event.target as HTMLImageElement\n      if (image.src === '') {\n        return\n      }\n      iframeCommunicator?.sendClickedImageUrl({\n        src: image.src,\n        alt: image.alt,\n        title: image.title\n      })\n    },\n    [iframeCommunicator]\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React from 'react'\nimport { useApplyDarkMode } from '../../hooks/common/use-apply-dark-mode'\nimport { IframeMarkdownRenderer } from './iframe-markdown-renderer'\nimport { IframeRendererToEditorCommunicatorContextProvider } from '../editor-page/render-context/iframe-renderer-to-editor-communicator-context-provider'\n\nexport const RenderPage: React.FC = () => {\n  useApplyDarkMode()\n\n  return (\n    <IframeRendererToEditorCommunicatorContextProvider>\n      <IframeMarkdownRenderer />\n    </IframeRendererToEditorCommunicatorContextProvider>\n  )\n}\n\nexport default RenderPage\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { store } from '..'\nimport { NoteDto } from '../../api/notes/types'\nimport { NoteFrontmatter } from '../../components/editor-page/note-frontmatter/note-frontmatter'\nimport { initialState } from './reducers'\nimport {\n  NoteDetailsActionType,\n  SetCheckboxInMarkdownContentAction,\n  SetNoteDetailsAction,\n  SetNoteDetailsFromServerAction,\n  SetNoteFrontmatterFromRenderingAction,\n  UpdateNoteTitleByFirstHeadingAction\n} from './types'\n\nexport const setNoteMarkdownContent = (content: string): void => {\n  store.dispatch({\n    type: NoteDetailsActionType.SET_DOCUMENT_CONTENT,\n    content\n  } as SetNoteDetailsAction)\n}\n\nexport const setNoteDataFromServer = (apiResponse: NoteDto): void => {\n  store.dispatch({\n    type: NoteDetailsActionType.SET_NOTE_DATA_FROM_SERVER,\n    note: apiResponse\n  } as SetNoteDetailsFromServerAction)\n}\n\nexport const updateNoteTitleByFirstHeading = (firstHeading?: string): void => {\n  store.dispatch({\n    type: NoteDetailsActionType.UPDATE_NOTE_TITLE_BY_FIRST_HEADING,\n    firstHeading: firstHeading\n  } as UpdateNoteTitleByFirstHeadingAction)\n}\n\nexport const setNoteFrontmatter = (frontmatter: NoteFrontmatter | undefined): void => {\n  if (!frontmatter) {\n    frontmatter = initialState.frontmatter\n  }\n  store.dispatch({\n    type: NoteDetailsActionType.SET_NOTE_FRONTMATTER,\n    frontmatter: frontmatter\n  } as SetNoteFrontmatterFromRenderingAction)\n}\n\nexport const setCheckboxInMarkdownContent = (lineInMarkdown: number, checked: boolean): void => {\n  store.dispatch({\n    type: NoteDetailsActionType.SET_CHECKBOX_IN_MARKDOWN_CONTENT,\n    checked: checked,\n    lineInMarkdown: lineInMarkdown\n  } as SetCheckboxInMarkdownContentAction)\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { useEffect } from 'react'\nimport { useIsDarkModeActivated } from './use-is-dark-mode-activated'\n\nexport const useApplyDarkMode = (): void => {\n  const darkModeActivated = useIsDarkModeActivated()\n\n  useEffect(() => {\n    if (darkModeActivated) {\n      window.document.body.classList.add('dark')\n    } else {\n      window.document.body.classList.remove('dark')\n    }\n    return () => {\n      window.document.body.classList.remove('dark')\n    }\n  }, [darkModeActivated])\n}\n"],"sourceRoot":""}