{"version":3,"sources":["components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-input.tsx","components/editor-page/editor-modals/max-length-warning-modal.tsx","components/editor-page/editor-pane/autocompletion/code-block.ts","components/editor-page/editor-pane/autocompletion/collapsable-block.ts","components/editor-page/editor-pane/autocompletion/container.ts","components/editor-page/editor-pane/tool-bar/emoji-picker/forkawesome.png","components/editor-page/editor-pane/tool-bar/emoji-picker/emoji-picker.tsx","components/editor-page/editor-pane/tool-bar/utils/emojiUtils.ts","components/editor-page/editor-pane/autocompletion/emoji.ts","components/editor-page/editor-pane/autocompletion/header.ts","components/editor-page/editor-pane/autocompletion/image.ts","components/editor-page/editor-pane/autocompletion/link-and-extra-tag.ts","components/editor-page/editor-pane/autocompletion/pdf.ts","components/editor-page/editor-pane/autocompletion/index.ts","components/common/number-range/number-range.ts","components/editor-page/editor-pane/tool-bar/utils/toolbarButtonUtils.ts","components/editor-page/editor-pane/key-map.ts","components/editor-page/editor-pane/status-bar/status-bar.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-property.ts","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-boolean-property.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-ligatures-select.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-number-property.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-select-property.tsx","components/editor-page/sidebar/types.ts","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-smart-paste-select.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preferences.tsx","components/editor-page/editor-pane/tool-bar/emoji-picker/emoji-picker-button.tsx","components/editor-page/editor-pane/tool-bar/table-picker/custom-table-size-modal.tsx","components/editor-page/editor-pane/tool-bar/table-picker/table-picker.tsx","components/editor-page/editor-pane/tool-bar/table-picker/table-picker-button.tsx","components/editor-page/sidebar/upload-input.tsx","components/common/upload-image-mimetypes.ts","components/editor-page/editor-pane/upload-handler.ts","components/editor-page/editor-pane/tool-bar/upload-image-button.tsx","components/editor-page/editor-pane/tool-bar/tool-bar.tsx","components/editor-page/editor-pane/tool-bar/utils/pasteHandlers.ts","components/editor-page/editor-pane/tool-bar/utils/codefenceDetection.ts","components/editor-page/editor-pane/table-extractor.ts","components/editor-page/editor-pane/editor-pane.tsx","components/editor-page/hooks/useViewModeShortcuts.ts","components/editor-page/sidebar/sidebar-button.tsx","components/editor-page/sidebar/delete-note-sidebar-entry.tsx","components/editor-page/document-bar/document-info/unitalic-bold-text.tsx","components/editor-page/document-bar/document-info/document-info-line-word-count.tsx","components/editor-page/document-bar/document-info/document-info-modal.tsx","components/editor-page/sidebar/document-info-sidebar-entry.tsx","components/editor-page/sidebar/export-markdown-sidebar-entry.tsx","components/editor-page/sidebar/sidebar-menu.tsx","components/editor-page/sidebar/export-menu-sidebar-menu.tsx","components/editor-page/document-bar/permissions/permission-group-entry.tsx","components/editor-page/sidebar/import-markdown-sidebar-entry.tsx","components/editor-page/sidebar/import-menu-sidebar-menu.tsx","components/common/cache/cache.ts","api/users/index.ts","components/editor-page/document-bar/permissions/permission-list.tsx","components/editor-page/sidebar/users-online-sidebar-menu/active-indicator.tsx","components/editor-page/document-bar/permissions/permission-modal.tsx","components/editor-page/sidebar/permissions-sidebar-entry.tsx","components/editor-page/sidebar/pin-note-sidebar-entry.tsx","api/revisions/index.ts","components/editor-page/document-bar/revisions/revision-modal-list-entry.tsx","components/editor-page/document-bar/revisions/revision-modal.tsx","components/editor-page/document-bar/revisions/utils.ts","components/editor-page/sidebar/revision-sidebar-entry.tsx","components/editor-page/document-bar/share/share-modal.tsx","components/editor-page/sidebar/share-sidebar-entry.tsx","components/editor-page/editor-page.tsx","components/editor-page/sidebar/users-online-sidebar-menu/user-line.tsx","components/editor-page/sidebar/users-online-sidebar-menu/users-online-sidebar-menu.tsx","components/editor-page/sidebar/sidebar.tsx","components/editor-page/splitter/split-divider/split-divider.tsx","components/editor-page/splitter/splitter.tsx","components/editor-page/use-notification-test.tsx","components/editor-page/hooks/useEditorModeFromUrl.ts","components/editor-page/hooks/useUpdateLocalHistoryEntry.ts"],"names":["EditorPreferenceInputType","MaxLengthWarningModal","show","onHide","maxLength","useTranslation","data-cy","titleI18nKey","closeButton","Modal","Body","Trans","i18nKey","values","className","Footer","Button","onClick","wordRegExp","allSupportedLanguages","loadHighlightJs","a","dispatchUiNotification","i18n","t","name","DEFAULT_DURATION_IN_SECONDS","console","error","extractSearchTerm","editor","searchTerm","findWordAtCursor","searchResult","exec","text","startIndex","start","endIndex","end","buildLanguageList","highlightJs","length","default","listLanguages","concat","CodeBlockHinter","hint","languages","suggestions","generateHintListByPrefix","lineIndex","getCursor","line","list","map","suggestion","displayText","from","Pos","to","CollapsableBlockHinter","Promise","resolve","cursor","validAlertLevels","ContainerHinter","filter","startsWith","emojiPickerConfig","customEmoji","Object","keys","ForkAwesomeIcons","shortcodes","toLowerCase","url","forkawesomeIcon","category","dataSource","EmojiPicker","onEmojiSelected","onDismiss","darkModeEnabled","useIsDarkModeActivated","pickerContainerRef","useRef","pickerRef","useClickAway","useEffect","current","picker","Picker","shadowRoot","appendChild","style","document","createElement","textContent","twemojiStyle","remove","undefined","emojiClick","event","detail","addEventListener","removeEventListener","setAttribute","removeAttribute","ref","getEmojiShortCode","emoji","skinToneModifier","skins","skinTone","emojiIndex","Database","emojiWordRegex","findEmojiInDatabase","term","getTopFavoriteEmoji","getEmojiBySearchQuery","queryResult","convertEmojiEventToHint","emojiData","shortCode","render","parent","wrapper","innerHTML","unicode","generateEmojiHints","suggestionList","getPreferredSkinTone","emojiEventDetails","hints","o","EmojiHinter","allSupportedHeaders","allSupportedHeadersTextToInsert","HeaderHinter","indexOf","allSupportedImages","ImageHinter","allSupportedLinks","LinkAndExtraTagHinter","user","getUser","userName","DateTime","local","toFormat","PDFHinter","allowedChars","getLine","ch","test","charAt","slice","prefix","hintCandidates","item","allHinters","createNumberRangeArray","Array","makeSelectionBold","wrapTextWith","makeSelectionItalic","strikeThroughSelection","underlineSelection","markSelection","symbol","endSymbol","getSelection","ranges","listSelections","range","empty","selection","getRange","replaceRange","head","anchor","setSelections","wrapTextWithOrJustPut","lineNumber","replacement","insertOnStartOfLines","lines","split","join","changeLines","replaceFunction","createList","listMark","i","addLink","insertAtCursor","f10","setOption","getOption","esc","keyMapName","substr","CodeMirror","Pass","suppressKey","tab","match","spaces","getSelections","execCommand","pos","replaceSelection","defaultKeyMap","isMac","F9","F10","Esc","Enter","Tab","Home","End","defaultState","position","selectedColumns","selectedLines","linesInDocument","charactersInDocument","remainingCharacters","createStatusInfo","maxDocumentLength","getValue","lineCount","StatusBar","getLengthTooltip","useMemo","exceeded","remaining","columns","condition","count","title","EditorPreferenceProperty","EditorPreferenceInput","property","type","onChange","value","children","Form","Group","controlId","Label","NUMBER","Control","as","size","EditorPreferenceBooleanProperty","preference","useApplicationState","state","editorConfig","preferences","toString","selectItem","useCallback","selectedItem","target","mergeEditorPreferences","i18nPrefix","SELECT","EditorPreferenceLigaturesSelect","ligaturesEnabled","Boolean","ligatures","saveLigatures","ligaturesActivated","setEditorLigatures","BOOLEAN","EditorPreferenceNumberProperty","Number","parseInt","DocumentSidebarMenuSelection","EditorPreferenceSelectProperty","selections","EditorPreferenceSmartPasteSelect","smartPasteEnabled","smartPaste","saveSmartPaste","smartPasteActivated","setEditorSmartPaste","EditorPreferences","useState","showModal","setShowModal","indentWithTabs","variant","icon","ListGroup","Item","THEME","KEYMAP","INDENT_WITH_TABS","INDENT_UNIT","alert","SPELL_CHECK","EmojiPickerButton","showEmojiPicker","setShowEmojiPicker","addEmoji","old","CustomTableSizeModal","onTablePicked","rows","tableSize","setTableSize","min","placeholder","isInvalid","currentTarget","isNaN","fixedWidth","ModalFooter","disabled","TablePicker","containerRef","showDialog","setShowDialog","role","cols","row","col","onMouseEnter","TablePickerButton","showTablePicker","setShowTablePicker","rowArray","colArray","divider","body","table","addTable","UploadInput","onLoad","acceptedFiles","onClickRef","props","fileInputReference","fileInput","files","file","then","catch","click","accept","supportedMimeTypes","handleUpload","includes","uploadPlaceholder","fileName","noteId","store","getState","noteDetails","id","insertCode","uploadFile","link","acceptedMimeTypes","UploadImageButton","clickRef","buttonClick","onUploadImage","ToolBar","ButtonToolbar","ButtonGroup","subscriptSelection","superscriptSelection","addHeaderLevel","addCodeFences","addQuotes","addList","j","addOrderedList","addTaskList","addImage","addLine","addCollapsableBlock","addComment","handleTablePaste","pasteText","clipboardData","getData","codefenceCount","getDoc","isCursorInCodefence","trim","every","tabsPerLines","isTable","preventDefault","markdownTable","pasteData","tableCells","reduce","cellsInRow","index","arrayMaxRows","arrayMaxColumns","Math","max","headRow1","headRow2","repeat","convertClipboardTableToMarkdown","hinter","showHint","completeSingle","completeOnSingleClick","alignWithWord","EditorPane","onContentChange","content","scrollState","onScroll","onMakeScrollSource","config","showMaxLengthWarning","setShowMaxLengthWarning","maxLengthWarningAlreadyShown","setEditor","statusBarInfo","setStatusBarInfo","editorPreferences","lastScrollPosition","editorScroll","setEditorScroll","onEditorScroll","data","onPaste","pasteEditor","handleFilePaste","lineAtHeight","top","startYOfLine","heightAtLine","lineInfo","heightOfLine","handle","height","percentageRaw","percentage","floor","firstLineInView","scrolledPercentage","newPositionRaw","newPosition","scrollTo","onBeforeChange","onEditorDidMount","mountedEditor","onCursorActivity","editorWithActivity","onDrop","dropEditor","pageX","pageY","dataTransfer","left","newCursor","coordsChar","setCursor","onMaxLengthHide","codeMirrorOptions","mode","viewportMargin","styleActiveLine","lineNumbers","lineWrapping","showCursorWhenSelecting","highlightSelectionMatches","inputStyle","matchBrackets","autoCloseBrackets","matchTags","bothTags","autoCloseTags","foldGutter","gutters","extraKeys","flattenSpans","addModeClass","autoRefresh","options","editorDidMount","shortcutHandler","ctrlKey","altKey","key","setEditorMode","EditorMode","BOTH","PREVIEW","EDITOR","SidebarButton","buttonRef","hide","DeleteNoteSidebarEntry","onConfirm","deletionButtonI18nKey","UnitalicBoldText","dataCy","DocumentInfoLineWordCount","iframeEditorToRendererCommunicator","useIFrameEditorToRendererCommunicator","wordCount","setWordCount","rendererReady","onWordCountCalculated","words","sendGetWordCount","DocumentInfoModal","assetsBaseUrl","useCustomizeAssetsUrl","DocumentInfoLineWithTimeMode","CREATED","time","minus","days","profileImageSrc","EDITED","minutes","DocumentInfoSidebarEntry","ExportMarkdownSidebarEntry","markdownContent","useNoteMarkdownContent","sanitized","sanitize","noteTitle","download","SidebarMenu","expand","GroupMode","ExportMenuSidebarMenu","menuId","selectedMenuId","NONE","onClickHandler","dir","href","links","faq","rel","ImportMarkdownSidebarEntry","onImportMarkdown","reject","fileReader","FileReader","newContent","result","setNoteMarkdownContent","readAsText","ImportMenuSidebarMenu","Cache","lifetime","maxEntries","entryLifetime","Map","Error","this","has","entry","get","entryCreated","Date","now","delete","next","set","cache","getUserById","userid","fetch","getApiUrl","defaultFetchConfig","response","expectResponseCode","json","userData","put","EditMode","PermissionGroupEntry","editMode","onChangeEditMode","ToggleButtonGroup","ToggleButton","VIEW","EDIT","ActiveIndicatorStatus","PermissionList","identifier","changeEditMode","removeEntry","createEntry","editI18nKey","viewI18nKey","removeI18nKey","addI18nKey","newEntry","setNewEntry","addEntry","canEdit","onSubmit","InputGroup","FormControl","aria-label","permissionsApiResponse","owner","sharedTo","username","sharedToGroup","PermissionModal","setError","userList","setUserList","setOwner","allUserPermissions","setAllUserPermissions","allLoggedInUserPermissions","setAllLoggedInUserPermissions","photo","forEach","shareUser","sharedGroup","Alert","userId","PermissionsSidebarEntry","PinNoteSidebarEntry","useParams","history","isPinned","find","pinStatus","onPinClicked","toggleHistoryEntryPinning","showErrorNotification","revisionCache","getRevision","timestamp","cacheKey","revisionData","getAllRevisions","RevisionModalListEntry","active","revision","revisionAuthorListMap","fromMillis","showName","additionalClasses","RevisionModal","revisions","setRevisions","selectedRevisionTimestamp","setSelectedRevisionTimestamp","selectedRevision","setSelectedRevision","fetchedRevisions","authorData","authors","users","author","push","getUserDataForRevision","fetchedRevision","Row","Col","lg","revisionIndex","oldValue","newValue","splitView","compareMethod","DiffMethod","WORDS","useDarkTheme","window","RevisionSidebarEntry","ShareModal","noteFrontmatter","frontmatter","editorMode","baseUrl","useFrontendBaseUrl","nativeShareButton","NoteType","SLIDE","ShareSidebarEntry","ScrollSource","ActiveIndicator","status","UserLine","color","borderLeftColor","UsersOnlineSidebarMenu","counter","setProperty","INACTIVE","ACTIVE","Sidebar","sideBarRef","selectedMenu","setSelectedMenu","toggleValue","selectionIsNotNone","USERS_ONLINE","IMPORT","EXPORT","SplitDivider","onGrab","onMouseDown","onTouchStart","isMouseEvent","buttons","Splitter","additionalContainerClassName","right","showLeft","showRight","relativeSplitValue","setRelativeSplitValue","cappedRelativeSplitValue","resizingInProgress","splitContainer","onStartResizing","onStopResizing","onMove","moveEvent","newRelativeSize","touches","extractHorizontalPosition","offsetLeft","clientWidth","moveHandler","stopResizeHandler","width","localStorageKey","EditorPage","scrollSource","editorSyncScroll","syncScroll","editorScrollState","rendererScrollState","setScrollState","onMarkdownRendererScroll","newScrollState","RENDERER","useApplyDarkMode","useDocumentTitleWithNoteTitle","search","useLocation","requestedMode","useEditorModeFromUrl","useLoadNoteFromServer","loading","updateReady","userExists","currentNoteTitle","currentNoteTags","tags","lastNoteTitle","lastNoteTags","equal","lastVisited","origin","HistoryEntryOrigin","LOCAL","REMOTE","toISOString","updateLocalHistoryEntry","useUpdateLocalHistoryEntry","setRendererToScrollSource","setEditorToScrollSource","localStorage","getItem","debug","label","setItem","leftPane","rightPane","frameClasses","onFirstHeadingChange","updateNoteTitleByFirstHeading","onTaskCheckedChange","setCheckboxInMarkdownContent","onFrontmatterChange","setNoteFrontmatter","rendererType","RendererType","DOCUMENT","AppBarMode","ErrorWhileLoadingNoteAlert","LoadingNoteAlert"],"mappings":"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","file":"static/js/editor.72102639.chunk.js","sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React from 'react'\nimport { Form } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\n\nexport enum EditorPreferenceInputType {\n  SELECT,\n  BOOLEAN,\n  NUMBER\n}\n\nexport interface EditorPreferenceInputProps {\n  property: string\n  type: EditorPreferenceInputType\n  onChange: React.ChangeEventHandler<HTMLSelectElement>\n  value?: string | number | string[]\n}\n\nexport const EditorPreferenceInput: React.FC<EditorPreferenceInputProps> = ({\n  property,\n  type,\n  onChange,\n  value,\n  children\n}) => {\n  useTranslation()\n  return (\n    <Form.Group controlId={`editor-pref-${property}`}>\n      <Form.Label>\n        <Trans\n          i18nKey={`editor.modal.preferences.${property}${type === EditorPreferenceInputType.NUMBER ? '' : '.label'}`}\n        />\n      </Form.Label>\n      <Form.Control\n        as={type === EditorPreferenceInputType.NUMBER ? 'input' : 'select'}\n        size='sm'\n        value={value}\n        onChange={onChange}\n        type={type === EditorPreferenceInputType.NUMBER ? 'number' : ''}>\n        {children}\n      </Form.Control>\n    </Form.Group>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { Button, Modal } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { CommonModal } from '../../common/modals/common-modal'\n\nexport interface MaxLengthWarningModalProps {\n  show: boolean\n  onHide: () => void\n  maxLength: number\n}\n\nexport const MaxLengthWarningModal: React.FC<MaxLengthWarningModalProps> = ({ show, onHide, maxLength }) => {\n  useTranslation()\n\n  return (\n    <CommonModal\n      data-cy={'limitReachedModal'}\n      show={show}\n      onHide={onHide}\n      titleI18nKey={'editor.error.limitReached.title'}\n      closeButton={true}>\n      <Modal.Body>\n        <Trans i18nKey={'editor.error.limitReached.description'} values={{ maxLength }} />\n        <strong className='mt-2 d-block'>\n          <Trans i18nKey={'editor.error.limitReached.advice'} />\n        </strong>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>\n          <Trans i18nKey={'common.close'} />\n        </Button>\n      </Modal.Footer>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, generateHintListByPrefix, Hinter } from './index'\nimport { DEFAULT_DURATION_IN_SECONDS, dispatchUiNotification } from '../../../../redux/ui-notifications/methods'\nimport i18n from 'i18next'\n\ntype highlightJsImport = typeof import('../../../common/hljs/hljs')\n\nconst wordRegExp = /^```((\\w|-|_|\\+)*)$/\nlet allSupportedLanguages: string[] = []\n\n/**\n * Fetches the highlight js chunk.\n * @return the retrieved highlight js api\n */\nconst loadHighlightJs = async (): Promise<highlightJsImport | null> => {\n  try {\n    return await import('../../../common/hljs/hljs')\n  } catch (error) {\n    dispatchUiNotification(\n      i18n.t('common.errorOccurred'),\n      i18n.t('common.errorWhileLoadingLibrary', { name: 'highlight.js' }),\n      DEFAULT_DURATION_IN_SECONDS,\n      'exclamation-circle'\n    )\n    console.error(\"can't load highlight js\", error)\n    return null\n  }\n}\n\n/**\n * Extracts the language from the current line in the editor.\n *\n * @param editor The editor that contains the search time\n * @return null if no search term could be found or the found word and the cursor position.\n */\nconst extractSearchTerm = (\n  editor: Editor\n): null | {\n  searchTerm: string\n  startIndex: number\n  endIndex: number\n} => {\n  const searchTerm = findWordAtCursor(editor)\n  const searchResult = wordRegExp.exec(searchTerm.text)\n  if (searchResult === null) {\n    return null\n  }\n\n  return {\n    searchTerm: searchResult[1],\n    startIndex: searchTerm.start,\n    endIndex: searchTerm.end\n  }\n}\n\n/**\n * Builds the list of languages that are supported by highlight js or custom embeddings.\n * @return An array of language names\n */\nconst buildLanguageList = async (): Promise<string[]> => {\n  const highlightJs = await loadHighlightJs()\n\n  if (highlightJs === null) {\n    return []\n  }\n\n  if (allSupportedLanguages.length === 0) {\n    allSupportedLanguages = highlightJs.default\n      .listLanguages()\n      .concat('csv', 'flow', 'html', 'js', 'markmap', 'abc', 'graphviz', 'mermaid', 'vega-lite')\n  }\n\n  return allSupportedLanguages\n}\n\n/**\n * Creates a codemirror autocompletion hint with supported highlight js languages.\n *\n * @param editor The codemirror editor that requested the autocompletion\n * @return The generated {@link Hints} or null if no hints exist.\n */\nconst codeBlockHint = async (editor: Editor): Promise<Hints | null> => {\n  const searchResult = extractSearchTerm(editor)\n  if (!searchResult) {\n    return null\n  }\n\n  const languages = await buildLanguageList()\n  if (languages.length === 0) {\n    return null\n  }\n  const suggestions = generateHintListByPrefix(searchResult.searchTerm, languages)\n  if (!suggestions) {\n    return null\n  }\n  const lineIndex = editor.getCursor().line\n  return {\n    list: suggestions.map(\n      (suggestion: string): Hint => ({\n        text: '```' + suggestion + '\\n\\n```\\n',\n        displayText: suggestion\n      })\n    ),\n    from: Pos(lineIndex, searchResult.startIndex),\n    to: Pos(lineIndex, searchResult.endIndex)\n  }\n}\n\nexport const CodeBlockHinter: Hinter = {\n  wordRegExp,\n  hint: codeBlockHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^(<d(?:e|et|eta|etai|etail|etails)?)$/\n\nconst collapsableBlockHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const suggestions = ['<details>\\n  <summary>Toggle label</summary>\\n  Toggled content\\n</details>']\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map(\n          (suggestion: string): Hint => ({\n            text: suggestion\n          })\n        ),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end + 1)\n      })\n    }\n  })\n}\n\nexport const CollapsableBlockHinter: Hinter = {\n  wordRegExp,\n  hint: collapsableBlockHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { validAlertLevels } from '../../../markdown-renderer/markdown-it-plugins/alert-container'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^:::((\\w|-|_|\\+)*)$/\nconst spoilerSuggestion: Hint = {\n  text: ':::spoiler Toggle label\\nToggled content\\n::: \\n',\n  displayText: 'spoiler'\n}\nconst suggestions = validAlertLevels\n  .map(\n    (suggestion: string): Hint => ({\n      text: ':::' + suggestion + '\\n\\n::: \\n',\n      displayText: suggestion\n    })\n  )\n  .concat(spoilerSuggestion)\n\nconst containerHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.filter((suggestion) => suggestion.displayText?.startsWith(searchResult[1])),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end)\n      })\n    }\n  })\n}\n\nexport const ContainerHinter: Hinter = {\n  wordRegExp,\n  hint: containerHint\n}\n","export default __webpack_public_path__ + \"static/media/forkawesome.da7d0f53.png\";","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Picker } from 'emoji-picker-element'\nimport { CustomEmoji, EmojiClickEvent, EmojiClickEventDetail } from 'emoji-picker-element/shared'\nimport React, { useEffect, useRef } from 'react'\nimport { useClickAway } from 'react-use'\nimport { useIsDarkModeActivated } from '../../../../../hooks/common/use-is-dark-mode-activated'\nimport './emoji-picker.scss'\nimport forkawesomeIcon from './forkawesome.png'\nimport { ForkAwesomeIcons } from './icon-names'\n\nexport interface EmojiPickerProps {\n  show: boolean\n  onEmojiSelected: (emoji: EmojiClickEventDetail) => void\n  onDismiss: () => void\n}\n\nexport const customEmojis: CustomEmoji[] = Object.keys(ForkAwesomeIcons).map((name) => ({\n  name: `fa-${name}`,\n  shortcodes: [`fa-${name.toLowerCase()}`],\n  url: forkawesomeIcon,\n  category: 'ForkAwesome'\n}))\n\nexport const EMOJI_DATA_PATH = '/static/js/emoji-data.json'\n\nexport const emojiPickerConfig = {\n  customEmoji: customEmojis,\n  dataSource: EMOJI_DATA_PATH\n}\n\nconst twemojiStyle = (): HTMLStyleElement => {\n  const style = document.createElement('style')\n  style.textContent = 'section.picker { --font-family: \"Twemoji\" !important; }'\n  return style\n}\n\nexport const EmojiPicker: React.FC<EmojiPickerProps> = ({ show, onEmojiSelected, onDismiss }) => {\n  const darkModeEnabled = useIsDarkModeActivated()\n  const pickerContainerRef = useRef<HTMLDivElement>(null)\n  const pickerRef = useRef<Picker>()\n\n  useClickAway(pickerContainerRef, () => {\n    onDismiss()\n  })\n\n  useEffect(() => {\n    if (!pickerContainerRef.current) {\n      return\n    }\n    const picker = new Picker(emojiPickerConfig)\n    if (picker.shadowRoot) {\n      picker.shadowRoot.appendChild(twemojiStyle())\n    }\n    pickerContainerRef.current.appendChild(picker)\n\n    pickerRef.current = picker\n    return () => {\n      picker.remove()\n      pickerRef.current = undefined\n    }\n  }, [])\n\n  useEffect(() => {\n    if (!pickerRef.current) {\n      return\n    }\n    const emojiClick = (event: EmojiClickEvent): void => {\n      onEmojiSelected(event.detail)\n    }\n    const picker = pickerRef.current\n    picker.addEventListener('emoji-click', emojiClick, true)\n    return () => {\n      picker.removeEventListener('emoji-click', emojiClick, true)\n    }\n  }, [onEmojiSelected])\n\n  useEffect(() => {\n    if (!pickerRef.current) {\n      return\n    }\n    pickerRef.current.setAttribute('class', darkModeEnabled ? 'dark' : 'light')\n    if (darkModeEnabled) {\n      pickerRef.current.removeAttribute('style')\n    } else {\n      pickerRef.current.setAttribute('style', '--background: #f8f9fa')\n    }\n  }, [darkModeEnabled])\n\n  return (\n    <div className={`position-absolute emoji-picker-container ${!show ? 'd-none' : ''}`} ref={pickerContainerRef} />\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { EmojiClickEventDetail, NativeEmoji } from 'emoji-picker-element/shared'\n\nexport const getEmojiIcon = (emoji: EmojiClickEventDetail): string => {\n  if (emoji.unicode) {\n    return emoji.unicode\n  }\n  if (emoji.name) {\n    // noinspection CheckTagEmptyBody\n    return `<i class=\"fa ${emoji.name}\"></i>`\n  }\n  return ''\n}\n\nexport const getEmojiShortCode = (emoji: EmojiClickEventDetail): string | undefined => {\n  if (!emoji.emoji.shortcodes) {\n    return undefined\n  }\n  let skinToneModifier = ''\n  if ((emoji.emoji as NativeEmoji).skins && emoji.skinTone !== 0) {\n    skinToneModifier = `:skin-tone-${emoji.skinTone as number}:`\n  }\n  return `:${emoji.emoji.shortcodes[0]}:${skinToneModifier}`\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport Database from 'emoji-picker-element/database'\nimport { Emoji, EmojiClickEventDetail, NativeEmoji } from 'emoji-picker-element/shared'\nimport { emojiPickerConfig } from '../tool-bar/emoji-picker/emoji-picker'\nimport { getEmojiIcon, getEmojiShortCode } from '../tool-bar/utils/emojiUtils'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst emojiIndex = new Database(emojiPickerConfig)\nconst emojiWordRegex = /^:([\\w-_+]*)$/\n\nconst findEmojiInDatabase = async (emojiIndex: Database, term: string): Promise<Emoji[]> => {\n  try {\n    if (term === '') {\n      return await emojiIndex.getTopFavoriteEmoji(7)\n    }\n    const queryResult = await emojiIndex.getEmojiBySearchQuery(term)\n    if (queryResult.length === 0) {\n      return await emojiIndex.getTopFavoriteEmoji(7)\n    } else {\n      return queryResult\n    }\n  } catch (error) {\n    console.error(error)\n    return []\n  }\n}\n\nconst convertEmojiEventToHint = (emojiData: EmojiClickEventDetail): Hint | undefined => {\n  const shortCode = getEmojiShortCode(emojiData)\n  if (!shortCode) {\n    return undefined\n  }\n  return {\n    text: shortCode,\n    render: (parent: HTMLLIElement) => {\n      const wrapper = document.createElement('div')\n      wrapper.innerHTML = `${getEmojiIcon(emojiData)}   ${shortCode}`\n      parent.appendChild(wrapper)\n    }\n  }\n}\n\nconst generateEmojiHints = async (editor: Editor): Promise<Hints | null> => {\n  const searchTerm = findWordAtCursor(editor)\n  const searchResult = emojiWordRegex.exec(searchTerm.text)\n  if (searchResult === null) {\n    return null\n  }\n  const suggestionList: Emoji[] = await findEmojiInDatabase(emojiIndex, searchResult[1])\n  const cursor = editor.getCursor()\n  const skinTone = await emojiIndex.getPreferredSkinTone()\n  const emojiEventDetails: EmojiClickEventDetail[] = suggestionList\n    .filter((emoji) => !!emoji.shortcodes)\n    .map((emoji) => ({\n      emoji,\n      skinTone: skinTone,\n      unicode: (emoji as NativeEmoji).unicode ? (emoji as NativeEmoji).unicode : undefined,\n      name: emoji.name\n    }))\n\n  const hints = emojiEventDetails.map(convertEmojiEventToHint).filter((o) => !!o) as Hint[]\n  return {\n    list: hints,\n    from: Pos(cursor.line, searchTerm.start),\n    to: Pos(cursor.line, searchTerm.end)\n  }\n}\n\nexport const EmojiHinter: Hinter = {\n  wordRegExp: emojiWordRegex,\n  hint: generateEmojiHints\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, generateHintListByPrefix, Hinter } from './index'\n\nconst wordRegExp = /^(\\s{0,3})(#{1,6})$/\nconst allSupportedHeaders = ['# h1', '## h2', '### h3', '#### h4', '##### h5', '###### h6', '###### tags: `example`']\nconst allSupportedHeadersTextToInsert = ['# ', '## ', '### ', '#### ', '##### ', '###### ', '###### tags: `example`']\n\nconst headerHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const term = searchResult[0]\n    if (!term) {\n      resolve(null)\n      return\n    }\n    const suggestions = generateHintListByPrefix(term, allSupportedHeaders)\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map(\n          (suggestion): Hint => ({\n            text: allSupportedHeadersTextToInsert[allSupportedHeaders.indexOf(suggestion)],\n            displayText: suggestion\n          })\n        ),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end)\n      })\n    }\n  })\n}\n\nexport const HeaderHinter: Hinter = {\n  wordRegExp,\n  hint: headerHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^(!(\\[.*])?)$/\nconst allSupportedImages = [\n  '![image alt](https:// \"title\")',\n  '![image alt](https:// \"title\" =WidthxHeight)',\n  '![image alt][reference]'\n]\n\nconst imageHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const suggestions = allSupportedImages\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map(\n          (suggestion: string): Hint => ({\n            text: suggestion\n          })\n        ),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end + 1)\n      })\n    }\n  })\n}\n\nexport const ImageHinter: Hinter = {\n  wordRegExp,\n  hint: imageHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { DateTime } from 'luxon'\nimport { getUser } from '../../../../redux/user/methods'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^(\\[(.*])?)$/\nconst allSupportedLinks = [\n  '[link text](https:// \"title\")',\n  '[reference]: https:// \"title\"',\n  '[link text][reference]',\n  '[reference]',\n  '[^footnote reference]: https://',\n  '[^footnote reference]',\n  '^[inline footnote]',\n  '[TOC]',\n  'name',\n  'time',\n  '[color=#FFFFFF]'\n]\n\nconst linkAndExtraTagHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const suggestions = allSupportedLinks\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map((suggestion: string): Hint => {\n          const user = getUser()\n          const userName = user ? user.name : 'Anonymous'\n          switch (suggestion) {\n            case 'name':\n              // Get the user when a completion happens, this prevents to early calls resulting in 'Anonymous'\n              return {\n                text: `[name=${userName}]`\n              }\n            case 'time':\n              // show the current time when the autocompletion is opened and not when the function is loaded\n              return {\n                text: `[time=${DateTime.local().toFormat('DDDD T')}]`\n              }\n            default:\n              return {\n                text: suggestion + ' ',\n                displayText: suggestion\n              }\n          }\n        }),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end + 1)\n      })\n    }\n  })\n}\n\nexport const LinkAndExtraTagHinter: Hinter = {\n  wordRegExp,\n  hint: linkAndExtraTagHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^({[%}]?)$/\n\nconst pdfHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const suggestions = ['{%pdf https:// %}']\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map(\n          (suggestion: string): Hint => ({\n            text: suggestion\n          })\n        ),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end + 1)\n      })\n    }\n  })\n}\n\nexport const PDFHinter: Hinter = {\n  wordRegExp,\n  hint: pdfHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hints } from 'codemirror'\nimport { CodeBlockHinter } from './code-block'\nimport { CollapsableBlockHinter } from './collapsable-block'\nimport { ContainerHinter } from './container'\nimport { EmojiHinter } from './emoji'\nimport { HeaderHinter } from './header'\nimport { ImageHinter } from './image'\nimport { LinkAndExtraTagHinter } from './link-and-extra-tag'\nimport { PDFHinter } from './pdf'\n\ninterface findWordAtCursorResponse {\n  start: number\n  end: number\n  text: string\n}\n\nexport interface Hinter {\n  wordRegExp: RegExp\n  hint: (editor: Editor) => Promise<Hints | null>\n}\n\nconst allowedChars = /[^\\s]/\n\nexport const findWordAtCursor = (editor: Editor): findWordAtCursorResponse => {\n  const cursor = editor.getCursor()\n  const line = editor.getLine(cursor.line)\n  let start = cursor.ch\n  let end = cursor.ch\n  while (start && allowedChars.test(line.charAt(start - 1))) {\n    --start\n  }\n  while (end < line.length && allowedChars.test(line.charAt(end))) {\n    ++end\n  }\n\n  return {\n    text: line.slice(start, end).toLowerCase(),\n    start: start,\n    end: end\n  }\n}\n\n/**\n * Generates a list (with max 8 entries) of hints for the autocompletion.\n *\n * @param prefix This is the case insensitive prefix that every hint must have\n * @param hintCandidates The list of hint candidates\n */\nexport const generateHintListByPrefix = (prefix: string, hintCandidates: string[]): string[] => {\n  const searchTerm = prefix.toLowerCase()\n  return hintCandidates.filter((item) => item.toLowerCase().startsWith(searchTerm)).slice(0, 7)\n}\n\nexport const allHinters: Hinter[] = [\n  CodeBlockHinter,\n  ContainerHinter,\n  EmojiHinter,\n  HeaderHinter,\n  ImageHinter,\n  LinkAndExtraTagHinter,\n  PDFHinter,\n  CollapsableBlockHinter\n]\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport const createNumberRangeArray = (length: number): number[] => {\n  return Array.from(Array(length).keys())\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport { EmojiClickEventDetail } from 'emoji-picker-element/shared'\nimport { createNumberRangeArray } from '../../../../common/number-range/number-range'\nimport { getEmojiShortCode } from './emojiUtils'\n\nexport const makeSelectionBold = (editor: Editor): void => wrapTextWith(editor, '**')\nexport const makeSelectionItalic = (editor: Editor): void => wrapTextWith(editor, '*')\nexport const strikeThroughSelection = (editor: Editor): void => wrapTextWith(editor, '~~')\nexport const underlineSelection = (editor: Editor): void => wrapTextWith(editor, '++')\nexport const subscriptSelection = (editor: Editor): void => wrapTextWith(editor, '~')\nexport const superscriptSelection = (editor: Editor): void => wrapTextWith(editor, '^')\nexport const markSelection = (editor: Editor): void => wrapTextWith(editor, '==')\n\nexport const addHeaderLevel = (editor: Editor): void =>\n  changeLines(editor, (line) => (line.startsWith('#') ? `#${line}` : `# ${line}`))\nexport const addCodeFences = (editor: Editor): void => wrapTextWithOrJustPut(editor, '```\\n', '\\n```')\nexport const addQuotes = (editor: Editor): void => insertOnStartOfLines(editor, '> ')\n\nexport const addList = (editor: Editor): void => createList(editor, () => '- ')\nexport const addOrderedList = (editor: Editor): void => createList(editor, (j) => `${j}. `)\nexport const addTaskList = (editor: Editor): void => createList(editor, () => '- [ ] ')\n\nexport const addImage = (editor: Editor): void => addLink(editor, '!')\n\nexport const addLine = (editor: Editor): void => changeLines(editor, (line) => `${line}\\n----`)\nexport const addCollapsableBlock = (editor: Editor): void =>\n  changeLines(editor, (line) => `${line}\\n:::spoiler Toggle label\\n  Toggled content\\n:::`)\nexport const addComment = (editor: Editor): void => changeLines(editor, (line) => `${line}\\n> []`)\nexport const addTable = (editor: Editor, rows: number, columns: number): void => {\n  const rowArray = createNumberRangeArray(rows)\n  const colArray = createNumberRangeArray(columns).map((col) => col + 1)\n  const head = '|  # ' + colArray.join(' |  # ') + ' |'\n  const divider = '| ' + colArray.map(() => '----').join(' | ') + ' |'\n  const body = rowArray.map(() => '| ' + colArray.map(() => 'Text').join(' | ') + ' |').join('\\n')\n  const table = `${head}\\n${divider}\\n${body}`\n  changeLines(editor, (line) => `${line}\\n${table}`)\n}\n\nexport const addEmoji = (emoji: EmojiClickEventDetail, editor: Editor): void => {\n  const shortCode = getEmojiShortCode(emoji)\n  if (shortCode) {\n    insertAtCursor(editor, shortCode)\n  }\n}\n\nexport const wrapTextWith = (editor: Editor, symbol: string, endSymbol?: string): void => {\n  if (!editor.getSelection()) {\n    return\n  }\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    if (range.empty()) {\n      continue\n    }\n    const from = range.from()\n    const to = range.to()\n\n    const selection = editor.getRange(from, to)\n    editor.replaceRange(symbol + selection + (endSymbol || symbol), from, to, '+input')\n    range.head.ch += symbol.length\n    range.anchor.ch += endSymbol ? endSymbol.length : symbol.length\n  }\n  editor.setSelections(ranges)\n}\n\nconst wrapTextWithOrJustPut = (editor: Editor, symbol: string, endSymbol?: string): void => {\n  if (!editor.getSelection()) {\n    const cursor = editor.getCursor()\n    const lineNumber = cursor.line\n    const line = editor.getLine(lineNumber)\n    const replacement = /\\s*\\\\n/.exec(line) ? `${symbol}${endSymbol ?? ''}` : `${symbol}${line}${endSymbol ?? ''}`\n    editor.replaceRange(replacement, { line: cursor.line, ch: 0 }, { line: cursor.line, ch: line.length }, '+input')\n  }\n  wrapTextWith(editor, symbol, endSymbol ?? symbol)\n}\n\nexport const insertOnStartOfLines = (editor: Editor, symbol: string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const from = range.empty() ? { line: cursor.line, ch: 0 } : range.from()\n    const to = range.empty() ? { line: cursor.line, ch: editor.getLine(cursor.line).length } : range.to()\n    const selection = editor.getRange(from, to)\n    const lines = selection.split('\\n')\n    editor.replaceRange(lines.map((line) => `${symbol}${line}`).join('\\n'), from, to, '+input')\n  }\n  editor.setSelections(ranges)\n}\n\nexport const changeLines = (editor: Editor, replaceFunction: (line: string) => string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const lineNumber = range.empty() ? cursor.line : range.from().line\n    const line = editor.getLine(lineNumber)\n    editor.replaceRange(\n      replaceFunction(line),\n      { line: lineNumber, ch: 0 },\n      {\n        line: lineNumber,\n        ch: line.length\n      },\n      '+input'\n    )\n  }\n  editor.setSelections(ranges)\n}\n\nexport const createList = (editor: Editor, listMark: (i: number) => string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const from = range.empty() ? { line: cursor.line, ch: 0 } : range.from()\n    const to = range.empty() ? { line: cursor.line, ch: editor.getLine(cursor.line).length } : range.to()\n\n    const selection = editor.getRange(from, to)\n    const lines = selection.split('\\n')\n    editor.replaceRange(lines.map((line, i) => `${listMark(i + 1)}${line}`).join('\\n'), from, to, '+input')\n  }\n  editor.setSelections(ranges)\n}\n\nexport const addLink = (editor: Editor, prefix?: string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const from = range.empty() ? { line: cursor.line, ch: cursor.ch } : range.from()\n    const to = range.empty() ? { line: cursor.line, ch: cursor.ch } : range.to()\n    const selection = editor.getRange(from, to)\n    const linkRegex = /^(?:https?|ftp|mailto):/\n    if (linkRegex.exec(selection)) {\n      editor.replaceRange(`${prefix || ''}[](${selection})`, from, to, '+input')\n    } else {\n      editor.replaceRange(`${prefix || ''}[${selection}](https://)`, from, to, '+input')\n    }\n  }\n}\n\nexport const insertAtCursor = (editor: Editor, text: string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const from = range.empty() ? { line: cursor.line, ch: cursor.ch } : range.from()\n    const to = range.empty() ? { line: cursor.line, ch: cursor.ch } : range.to()\n    editor.replaceRange(`${text}`, from, to, '+input')\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport CodeMirror, { Editor, KeyMap, Pass } from 'codemirror'\nimport { isMac } from '../utils'\nimport {\n  addLink,\n  makeSelectionBold,\n  makeSelectionItalic,\n  markSelection,\n  strikeThroughSelection,\n  underlineSelection\n} from './tool-bar/utils/toolbarButtonUtils'\n\nconst isVim = (keyMapName?: string) => keyMapName?.substr(0, 3) === 'vim'\n\nconst f10 = (editor: Editor): void | typeof Pass => editor.setOption('fullScreen', !editor.getOption('fullScreen'))\nconst esc = (editor: Editor): void | typeof Pass => {\n  if (editor.getOption('fullScreen') && !isVim(editor.getOption('keyMap'))) {\n    editor.setOption('fullScreen', false)\n  } else {\n    return CodeMirror.Pass\n  }\n}\nconst suppressKey = (): undefined => undefined\nconst tab = (editor: Editor) => {\n  const tab = '\\t'\n\n  // contruct x length spaces\n  const spaces = Array((editor.getOption('indentUnit') ?? 0) + 1).join(' ')\n\n  // auto indent whole line when in list or blockquote\n  const cursor = editor.getCursor()\n  const line = editor.getLine(cursor.line)\n\n  // this regex match the following patterns\n  // 1. blockquote starts with \"> \" or \">>\"\n  // 2. unorder list starts with *+-parseInt\n  // 3. order list starts with \"1.\" or \"1)\"\n  const regex = /^(\\s*)(>[> ]*|[*+-]\\s|(\\d+)([.)]))/\n\n  let match\n  const multiple = editor.getSelection().split('\\n').length > 1 || editor.getSelections().length > 1\n\n  if (multiple) {\n    editor.execCommand('defaultTab')\n  } else if ((match = regex.exec(line)) !== null) {\n    const ch = match[1].length\n    const pos = {\n      line: cursor.line,\n      ch: ch\n    }\n    if (editor.getOption('indentWithTabs')) {\n      editor.replaceRange(tab, pos, pos, '+input')\n    } else {\n      editor.replaceRange(spaces, pos, pos, '+input')\n    }\n  } else {\n    if (editor.getOption('indentWithTabs')) {\n      editor.execCommand('defaultTab')\n    } else {\n      editor.replaceSelection(spaces)\n    }\n  }\n}\n\nexport const defaultKeyMap: KeyMap = !isMac\n  ? {\n      F9: suppressKey,\n      F10: f10,\n      Esc: esc,\n      'Ctrl-S': suppressKey,\n      Enter: 'newlineAndIndentContinueMarkdownList',\n      Tab: tab,\n      Home: 'goLineLeftSmart',\n      End: 'goLineRight',\n      'Ctrl-I': makeSelectionItalic,\n      'Ctrl-B': makeSelectionBold,\n      'Ctrl-U': underlineSelection,\n      'Ctrl-D': strikeThroughSelection,\n      'Ctrl-M': markSelection,\n      'Ctrl-K': addLink\n    }\n  : {\n      F9: suppressKey,\n      F10: f10,\n      Esc: esc,\n      'Cmd-S': suppressKey,\n      Enter: 'newlineAndIndentContinueMarkdownList',\n      Tab: tab,\n      'Cmd-Left': 'goLineLeftSmart',\n      'Cmd-Right': 'goLineRight',\n      Home: 'goLineLeftSmart',\n      End: 'goLineRight',\n      'Cmd-I': makeSelectionItalic,\n      'Cmd-B': makeSelectionBold,\n      'Cmd-U': underlineSelection,\n      'Cmd-D': strikeThroughSelection,\n      'Cmd-M': markSelection\n    }\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Position } from 'codemirror'\nimport React, { useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { ShowIf } from '../../../common/show-if/show-if'\nimport './status-bar.scss'\n\nexport interface StatusBarInfo {\n  position: Position\n  selectedColumns: number\n  selectedLines: number\n  linesInDocument: number\n  charactersInDocument: number\n  remainingCharacters: number\n}\n\nexport const defaultState: StatusBarInfo = {\n  position: { line: 0, ch: 0 },\n  selectedColumns: 0,\n  selectedLines: 0,\n  linesInDocument: 0,\n  charactersInDocument: 0,\n  remainingCharacters: 0\n}\n\nexport const createStatusInfo = (editor: Editor, maxDocumentLength: number): StatusBarInfo => ({\n  position: editor.getCursor(),\n  charactersInDocument: editor.getValue().length,\n  remainingCharacters: maxDocumentLength - editor.getValue().length,\n  linesInDocument: editor.lineCount(),\n  selectedColumns: editor.getSelection().length,\n  selectedLines: editor.getSelection().split('\\n').length\n})\n\nexport const StatusBar: React.FC<StatusBarInfo> = ({\n  position,\n  selectedColumns,\n  selectedLines,\n  charactersInDocument,\n  linesInDocument,\n  remainingCharacters\n}) => {\n  const { t } = useTranslation()\n\n  const getLengthTooltip = useMemo(() => {\n    if (remainingCharacters === 0) {\n      return t('editor.statusBar.lengthTooltip.maximumReached')\n    }\n    if (remainingCharacters < 0) {\n      return t('editor.statusBar.lengthTooltip.exceeded', { exceeded: -remainingCharacters })\n    }\n    return t('editor.statusBar.lengthTooltip.remaining', { remaining: remainingCharacters })\n  }, [remainingCharacters, t])\n\n  return (\n    <div className='d-flex flex-row status-bar px-2'>\n      <div>\n        <span>{t('editor.statusBar.cursor', { line: position.line + 1, columns: position.ch + 1 })}</span>\n        <ShowIf condition={selectedColumns !== 0 && selectedLines !== 0}>\n          <ShowIf condition={selectedLines === 1}>\n            <span>&nbsp;–&nbsp;{t('editor.statusBar.selection.column', { count: selectedColumns })}</span>\n          </ShowIf>\n          <ShowIf condition={selectedLines > 1}>\n            <span>&nbsp;–&nbsp;{t('editor.statusBar.selection.line', { count: selectedLines })}</span>\n          </ShowIf>\n        </ShowIf>\n      </div>\n      <div className='ml-auto'>\n        <span>{t('editor.statusBar.lines', { lines: linesInDocument })}</span>\n        &nbsp;–&nbsp;\n        <span\n          data-cy={'remainingCharacters'}\n          title={getLengthTooltip}\n          className={remainingCharacters <= 0 ? 'text-danger' : remainingCharacters <= 100 ? 'text-warning' : ''}>\n          {t('editor.statusBar.length', { length: charactersInDocument })}\n        </span>\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport enum EditorPreferenceProperty {\n  KEYMAP = 'keyMap',\n  THEME = 'theme',\n  INDENT_WITH_TABS = 'indentWithTabs',\n  INDENT_UNIT = 'indentUnit',\n  SPELL_CHECK = 'spellcheck'\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { EditorConfiguration } from 'codemirror'\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { mergeEditorPreferences } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\nimport { EditorPreferenceProperty } from './editor-preference-property'\nimport { useApplicationState } from '../../../../../hooks/common/use-application-state'\n\nexport interface EditorPreferenceBooleanProps {\n  property: EditorPreferenceProperty\n}\n\nexport const EditorPreferenceBooleanProperty: React.FC<EditorPreferenceBooleanProps> = ({ property }) => {\n  const preference = useApplicationState((state) => state.editorConfig.preferences[property]?.toString() ?? '')\n\n  const { t } = useTranslation()\n  const selectItem = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const selectedItem: boolean = event.target.value === 'true'\n\n      mergeEditorPreferences({\n        [property]: selectedItem\n      } as EditorConfiguration)\n    },\n    [property]\n  )\n\n  const i18nPrefix = `editor.modal.preferences.${property}`\n\n  return (\n    <EditorPreferenceInput\n      onChange={selectItem}\n      property={property}\n      type={EditorPreferenceInputType.SELECT}\n      value={preference}>\n      <option value={'true'}>{t(`${i18nPrefix}.on`)}</option>\n      <option value={'false'}>{t(`${i18nPrefix}.off`)}</option>\n    </EditorPreferenceInput>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { setEditorLigatures } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\nimport { useApplicationState } from '../../../../../hooks/common/use-application-state'\n\nexport const EditorPreferenceLigaturesSelect: React.FC = () => {\n  const ligaturesEnabled = useApplicationState((state) => Boolean(state.editorConfig.ligatures).toString())\n  const saveLigatures = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const ligaturesActivated: boolean = event.target.value === 'true'\n    setEditorLigatures(ligaturesActivated)\n  }, [])\n  const { t } = useTranslation()\n\n  return (\n    <EditorPreferenceInput\n      onChange={saveLigatures}\n      value={ligaturesEnabled}\n      property={'ligatures'}\n      type={EditorPreferenceInputType.BOOLEAN}>\n      <option value='true'>{t(`common.yes`)}</option>\n      <option value='false'>{t(`common.no`)}</option>\n    </EditorPreferenceInput>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { EditorConfiguration } from 'codemirror'\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { mergeEditorPreferences } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\nimport { EditorPreferenceProperty } from './editor-preference-property'\nimport { useApplicationState } from '../../../../../hooks/common/use-application-state'\n\nexport interface EditorPreferenceNumberProps {\n  property: EditorPreferenceProperty\n}\n\nexport const EditorPreferenceNumberProperty: React.FC<EditorPreferenceNumberProps> = ({ property }) => {\n  const preference = useApplicationState((state) => state.editorConfig.preferences[property]?.toString() ?? '')\n\n  const selectItem = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const selectedItem: number = Number.parseInt(event.target.value)\n\n      mergeEditorPreferences({\n        [property]: selectedItem\n      } as EditorConfiguration)\n    },\n    [property]\n  )\n\n  return (\n    <EditorPreferenceInput\n      onChange={selectItem}\n      property={property}\n      type={EditorPreferenceInputType.NUMBER}\n      value={preference}\n    />\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { EditorConfiguration } from 'codemirror'\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { mergeEditorPreferences } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\nimport { EditorPreferenceProperty } from './editor-preference-property'\nimport { useApplicationState } from '../../../../../hooks/common/use-application-state'\n\nexport interface EditorPreferenceSelectPropertyProps {\n  property: EditorPreferenceProperty\n  selections: string[]\n}\n\nexport const EditorPreferenceSelectProperty: React.FC<EditorPreferenceSelectPropertyProps> = ({\n  property,\n  selections\n}) => {\n  const preference = useApplicationState((state) => state.editorConfig.preferences[property]?.toString() ?? '')\n\n  const { t } = useTranslation()\n\n  const selectItem = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const selectedItem: string = event.target.value\n\n      mergeEditorPreferences({\n        [property]: selectedItem\n      } as EditorConfiguration)\n    },\n    [property]\n  )\n\n  const i18nPrefix = `editor.modal.preferences.${property}`\n\n  return (\n    <EditorPreferenceInput\n      onChange={selectItem}\n      property={property}\n      type={EditorPreferenceInputType.SELECT}\n      value={preference}>\n      {selections.map((selection) => (\n        <option key={selection} value={selection}>\n          {t(`${i18nPrefix}.${selection}`)}\n        </option>\n      ))}\n    </EditorPreferenceInput>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { RefObject } from 'react'\nimport { IconName } from '../../common/fork-awesome/types'\nimport { SidebarEntryVariant } from './sidebar-button'\n\nexport interface SpecificSidebarEntryProps {\n  className?: string\n  hide?: boolean\n  onClick?: () => void\n}\n\nexport interface SidebarEntryProps {\n  icon?: IconName\n  variant?: SidebarEntryVariant\n  buttonRef?: RefObject<HTMLButtonElement>\n  hide?: boolean\n  className?: string\n  onClick?: () => void\n  'data-cy'?: string\n}\n\nexport interface SidebarMenuProps {\n  expand?: boolean\n}\n\nexport enum DocumentSidebarMenuSelection {\n  NONE,\n  USERS_ONLINE,\n  IMPORT,\n  EXPORT\n}\n\nexport interface SpecificSidebarMenuProps {\n  className?: string\n  onClick: (menuId: DocumentSidebarMenuSelection) => void\n  selectedMenuId: DocumentSidebarMenuSelection\n  menuId: DocumentSidebarMenuSelection\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useApplicationState } from '../../../../../hooks/common/use-application-state'\nimport { setEditorSmartPaste } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\n\nexport const EditorPreferenceSmartPasteSelect: React.FC = () => {\n  const smartPasteEnabled = useApplicationState((state) => Boolean(state.editorConfig.smartPaste).toString())\n  const saveSmartPaste = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const smartPasteActivated: boolean = event.target.value === 'true'\n    setEditorSmartPaste(smartPasteActivated)\n  }, [])\n  const { t } = useTranslation()\n\n  return (\n    <EditorPreferenceInput\n      onChange={saveSmartPaste}\n      value={smartPasteEnabled}\n      property={'smartPaste'}\n      type={EditorPreferenceInputType.BOOLEAN}>\n      <option value='true'>{t(`common.yes`)}</option>\n      <option value='false'>{t(`common.no`)}</option>\n    </EditorPreferenceInput>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Button, Form, ListGroup } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { CommonModal } from '../../../../common/modals/common-modal'\nimport { ShowIf } from '../../../../common/show-if/show-if'\nimport { EditorPreferenceBooleanProperty } from './editor-preference-boolean-property'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\nimport { EditorPreferenceLigaturesSelect } from './editor-preference-ligatures-select'\nimport { EditorPreferenceNumberProperty } from './editor-preference-number-property'\nimport { EditorPreferenceProperty } from './editor-preference-property'\nimport { EditorPreferenceSelectProperty } from './editor-preference-select-property'\nimport { EditorPreferenceSmartPasteSelect } from './editor-preference-smart-paste-select'\nimport { useApplicationState } from '../../../../../hooks/common/use-application-state'\n\nexport const EditorPreferences: React.FC = () => {\n  const { t } = useTranslation()\n  const [showModal, setShowModal] = useState(false)\n  const indentWithTabs = useApplicationState((state) => state.editorConfig.preferences.indentWithTabs ?? false)\n\n  return (\n    <Fragment>\n      <Button variant='light' onClick={() => setShowModal(true)} title={t('editor.editorToolbar.preferences')}>\n        <ForkAwesomeIcon icon='wrench' />\n      </Button>\n      <CommonModal\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        titleI18nKey={'editor.modal.preferences.title'}\n        closeButton={true}\n        icon={'wrench'}>\n        <Form>\n          <ListGroup>\n            <ListGroup.Item>\n              <EditorPreferenceSelectProperty\n                property={EditorPreferenceProperty.THEME}\n                selections={['one-dark', 'neat']}\n              />\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <EditorPreferenceSelectProperty\n                property={EditorPreferenceProperty.KEYMAP}\n                selections={['sublime', 'emacs', 'vim']}\n              />\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <EditorPreferenceBooleanProperty property={EditorPreferenceProperty.INDENT_WITH_TABS} />\n            </ListGroup.Item>\n            <ShowIf condition={!indentWithTabs}>\n              <ListGroup.Item>\n                <EditorPreferenceNumberProperty property={EditorPreferenceProperty.INDENT_UNIT} />\n              </ListGroup.Item>\n            </ShowIf>\n            <ListGroup.Item>\n              <EditorPreferenceLigaturesSelect />\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <EditorPreferenceSmartPasteSelect />\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <EditorPreferenceInput\n                onChange={() => alert('This feature is not yet implemented.')}\n                property={EditorPreferenceProperty.SPELL_CHECK}\n                type={EditorPreferenceInputType.SELECT}>\n                <option value='off'>Off</option>\n                <option value='en'>English</option>\n              </EditorPreferenceInput>\n            </ListGroup.Item>\n          </ListGroup>\n        </Form>\n      </CommonModal>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport CodeMirror from 'codemirror'\nimport React, { Fragment, useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { addEmoji } from '../utils/toolbarButtonUtils'\nimport { EmojiPicker } from './emoji-picker'\n\nexport interface EmojiPickerButtonProps {\n  editor: CodeMirror.Editor\n}\n\nexport const EmojiPickerButton: React.FC<EmojiPickerButtonProps> = ({ editor }) => {\n  const { t } = useTranslation()\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false)\n\n  return (\n    <Fragment>\n      <EmojiPicker\n        show={showEmojiPicker}\n        onEmojiSelected={(emoji) => {\n          setShowEmojiPicker(false)\n          addEmoji(emoji, editor)\n        }}\n        onDismiss={() => setShowEmojiPicker(false)}\n      />\n      <Button\n        data-cy={'show-emoji-picker'}\n        variant='light'\n        onClick={() => setShowEmojiPicker((old) => !old)}\n        title={t('editor.editorToolbar.emoji')}>\n        <ForkAwesomeIcon icon='smile-o' />\n      </Button>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { Button, Form, ModalFooter } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { CommonModal } from '../../../../common/modals/common-modal'\nimport { TableSize } from './table-picker'\n\nexport interface CustomTableSizeModalProps {\n  showModal: boolean\n  onDismiss: () => void\n  onTablePicked: (row: number, cols: number) => void\n}\n\nexport const CustomTableSizeModal: React.FC<CustomTableSizeModalProps> = ({ showModal, onDismiss, onTablePicked }) => {\n  const { t } = useTranslation()\n  const [tableSize, setTableSize] = useState<TableSize>({\n    rows: 0,\n    columns: 0\n  })\n\n  useEffect(() => {\n    setTableSize({\n      rows: 0,\n      columns: 0\n    })\n  }, [showModal])\n\n  const onClick = useCallback(() => {\n    onTablePicked(tableSize.rows, tableSize.columns)\n    onDismiss()\n  }, [onDismiss, tableSize, onTablePicked])\n\n  return (\n    <CommonModal\n      show={showModal}\n      onHide={() => onDismiss()}\n      titleI18nKey={'editor.editorToolbar.table.customSize'}\n      closeButton={true}\n      icon={'table'}>\n      <div className={'col-lg-10 d-flex flex-row p-3 align-items-center'}>\n        <Form.Control\n          type={'number'}\n          min={1}\n          placeholder={t('editor.editorToolbar.table.cols')}\n          isInvalid={tableSize.columns <= 0}\n          onChange={(event) => {\n            const value = Number.parseInt(event.currentTarget.value)\n            setTableSize((old) => ({\n              rows: old.rows,\n              columns: isNaN(value) ? 0 : value\n            }))\n          }}\n        />\n        <ForkAwesomeIcon icon='times' className='mx-2' fixedWidth={true} />\n        <Form.Control\n          type={'number'}\n          min={1}\n          placeholder={t('editor.editorToolbar.table.rows')}\n          isInvalid={tableSize.rows <= 0}\n          onChange={(event) => {\n            const value = Number.parseInt(event.currentTarget.value)\n            setTableSize((old) => ({\n              rows: isNaN(value) ? 0 : value,\n              columns: old.columns\n            }))\n          }}\n        />\n      </div>\n      <ModalFooter>\n        <Button onClick={onClick} disabled={tableSize.rows <= 0 || tableSize.columns <= 0}>\n          {t('editor.editorToolbar.table.create')}\n        </Button>\n      </ModalFooter>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { useClickAway } from 'react-use'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { createNumberRangeArray } from '../../../../common/number-range/number-range'\nimport { CustomTableSizeModal } from './custom-table-size-modal'\nimport './table-picker.scss'\n\nexport interface TablePickerProps {\n  show: boolean\n  onDismiss: () => void\n  onTablePicked: (row: number, cols: number) => void\n}\n\nexport type TableSize = {\n  rows: number\n  columns: number\n}\n\nexport const TablePicker: React.FC<TablePickerProps> = ({ show, onDismiss, onTablePicked }) => {\n  const { t } = useTranslation()\n  const containerRef = useRef<HTMLDivElement>(null)\n  const [tableSize, setTableSize] = useState<TableSize>()\n  const [showDialog, setShowDialog] = useState(false)\n\n  useClickAway(containerRef, () => {\n    onDismiss()\n  })\n\n  useEffect(() => {\n    setTableSize(undefined)\n  }, [show])\n\n  const onClick = useCallback(() => {\n    if (tableSize) {\n      onTablePicked(tableSize.rows, tableSize.columns)\n    }\n  }, [onTablePicked, tableSize])\n\n  return (\n    <div\n      className={`position-absolute table-picker-container p-2 ${!show || showDialog ? 'd-none' : ''} bg-light`}\n      ref={containerRef}\n      role='grid'>\n      <p className={'lead'}>\n        {tableSize\n          ? t('editor.editorToolbar.table.size', { cols: tableSize?.columns, rows: tableSize.rows })\n          : t('editor.editorToolbar.table.title')}\n      </p>\n      <div className={'table-container'}>\n        {createNumberRangeArray(8).map((row: number) =>\n          createNumberRangeArray(10).map((col: number) => (\n            <div\n              key={`${row}_${col}`}\n              className={`table-cell ${\n                tableSize && row < tableSize.rows && col < tableSize.columns ? 'bg-primary border-primary' : ''\n              }`}\n              onMouseEnter={() => {\n                setTableSize({\n                  rows: row + 1,\n                  columns: col + 1\n                })\n              }}\n              title={t('editor.editorToolbar.table.size', { cols: col + 1, rows: row + 1 })}\n              onClick={onClick}\n            />\n          ))\n        )}\n      </div>\n      <div className='d-flex justify-content-center mt-2'>\n        <Button data-cy={'show-custom-table-modal'} className={'text-center'} onClick={() => setShowDialog(true)}>\n          <ForkAwesomeIcon icon='table' />\n          &nbsp;{t('editor.editorToolbar.table.customSize')}\n        </Button>\n        <CustomTableSizeModal\n          showModal={showDialog}\n          onDismiss={() => setShowDialog(false)}\n          onTablePicked={onTablePicked}\n        />\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport CodeMirror from 'codemirror'\nimport React, { Fragment, useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { addTable } from '../utils/toolbarButtonUtils'\nimport { TablePicker } from './table-picker'\n\nexport interface TablePickerButtonProps {\n  editor: CodeMirror.Editor\n}\n\nexport const TablePickerButton: React.FC<TablePickerButtonProps> = ({ editor }) => {\n  const { t } = useTranslation()\n  const [showTablePicker, setShowTablePicker] = useState(false)\n\n  return (\n    <Fragment>\n      <TablePicker\n        show={showTablePicker}\n        onDismiss={() => setShowTablePicker(false)}\n        onTablePicked={(rows, cols) => {\n          setShowTablePicker(false)\n          addTable(editor, rows, cols)\n        }}\n      />\n      <Button\n        data-cy={'show-table-overlay'}\n        variant='light'\n        onClick={() => setShowTablePicker((old) => !old)}\n        title={t('editor.editorToolbar.table.title')}>\n        <ForkAwesomeIcon icon='table' />\n      </Button>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { MutableRefObject, useCallback, useEffect, useRef } from 'react'\n\nexport interface UploadInputProps {\n  onLoad: (file: File) => Promise<void>\n  acceptedFiles: string\n  onClickRef: MutableRefObject<(() => void) | undefined>\n  'data-cy'?: string\n}\n\nexport const UploadInput: React.FC<UploadInputProps> = ({ onLoad, acceptedFiles, onClickRef, ...props }) => {\n  const fileInputReference = useRef<HTMLInputElement>(null)\n  const onClick = useCallback(() => {\n    const fileInput = fileInputReference.current\n    if (!fileInput) {\n      return\n    }\n    fileInput.addEventListener('change', () => {\n      if (!fileInput.files || fileInput.files.length < 1) {\n        return\n      }\n      const file = fileInput.files[0]\n      onLoad(file)\n        .then(() => {\n          fileInput.value = ''\n        })\n        .catch((error) => {\n          console.error(error)\n        })\n    })\n    fileInput.click()\n  }, [onLoad])\n\n  useEffect(() => {\n    onClickRef.current = onClick\n  })\n\n  return (\n    <input data-cy={props['data-cy']} type='file' ref={fileInputReference} className='d-none' accept={acceptedFiles} />\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport const supportedMimeTypes: string[] = [\n  'image/apng',\n  'image/bmp',\n  'image/gif',\n  'image/heif',\n  'image/heic',\n  'image/heif-sequence',\n  'image/heic-sequence',\n  'image/jpeg',\n  'image/png',\n  'image/svg+xml',\n  'image/tiff',\n  'image/webp'\n]\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport i18n from 'i18next'\nimport { uploadFile } from '../../../api/media'\nimport { store } from '../../../redux'\nimport { supportedMimeTypes } from '../../common/upload-image-mimetypes'\n\nexport const handleUpload = (file: File, editor: Editor): void => {\n  if (!file) {\n    return\n  }\n  if (!supportedMimeTypes.includes(file.type)) {\n    // this mimetype is not supported\n    return\n  }\n  const cursor = editor.getCursor()\n  const uploadPlaceholder = `![${i18n.t('editor.upload.uploadFile', { fileName: file.name })}]()`\n  const noteId = store.getState().noteDetails.id\n  const insertCode = (replacement: string) => {\n    editor.replaceRange(replacement, cursor, { line: cursor.line, ch: cursor.ch + uploadPlaceholder.length }, '+input')\n  }\n  editor.replaceRange(uploadPlaceholder, cursor, cursor, '+input')\n  uploadFile(noteId, file)\n    .then(({ link }) => {\n      insertCode(`![](${link})`)\n    })\n    .catch((error) => {\n      console.error('error while uploading file', error)\n      insertCode('')\n    })\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport React, { Fragment, useCallback, useRef } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\nimport { UploadInput } from '../../sidebar/upload-input'\nimport { handleUpload } from '../upload-handler'\nimport { supportedMimeTypes } from '../../../common/upload-image-mimetypes'\n\nexport interface UploadImageButtonProps {\n  editor?: Editor\n}\n\nconst acceptedMimeTypes = supportedMimeTypes.join(', ')\n\nexport const UploadImageButton: React.FC<UploadImageButtonProps> = ({ editor }) => {\n  const { t } = useTranslation()\n  const clickRef = useRef<() => void>()\n  const buttonClick = useCallback(() => {\n    clickRef.current?.()\n  }, [])\n\n  const onUploadImage = useCallback(\n    (file: File) => {\n      if (editor) {\n        handleUpload(file, editor)\n      }\n      return Promise.resolve()\n    },\n    [editor]\n  )\n\n  if (!editor) {\n    return null\n  }\n\n  return (\n    <Fragment>\n      <Button variant='light' onClick={buttonClick} title={t('editor.editorToolbar.uploadImage')}>\n        <ForkAwesomeIcon icon={'upload'} />\n      </Button>\n      <UploadInput onLoad={onUploadImage} acceptedFiles={acceptedMimeTypes} onClickRef={clickRef} />\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport React from 'react'\nimport { Button, ButtonGroup, ButtonToolbar } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\nimport { EditorPreferences } from './editor-preferences/editor-preferences'\nimport { EmojiPickerButton } from './emoji-picker/emoji-picker-button'\nimport { TablePickerButton } from './table-picker/table-picker-button'\nimport './tool-bar.scss'\nimport { UploadImageButton } from './upload-image-button'\nimport {\n  addCodeFences,\n  addCollapsableBlock,\n  addComment,\n  addHeaderLevel,\n  addImage,\n  addLine,\n  addLink,\n  addList,\n  addOrderedList,\n  addQuotes,\n  addTaskList,\n  makeSelectionBold,\n  makeSelectionItalic,\n  strikeThroughSelection,\n  subscriptSelection,\n  superscriptSelection,\n  underlineSelection\n} from './utils/toolbarButtonUtils'\n\nexport interface ToolBarProps {\n  editor?: Editor\n}\n\nexport const ToolBar: React.FC<ToolBarProps> = ({ editor }) => {\n  const { t } = useTranslation()\n\n  if (!editor) {\n    return null\n  }\n\n  return (\n    <ButtonToolbar className='bg-light'>\n      <ButtonGroup className={'mx-1 flex-wrap'}>\n        <Button\n          data-cy={'format-bold'}\n          variant='light'\n          onClick={() => makeSelectionBold(editor)}\n          title={t('editor.editorToolbar.bold')}>\n          <ForkAwesomeIcon icon='bold' />\n        </Button>\n        <Button\n          data-cy={'format-italic'}\n          variant='light'\n          onClick={() => makeSelectionItalic(editor)}\n          title={t('editor.editorToolbar.italic')}>\n          <ForkAwesomeIcon icon='italic' />\n        </Button>\n        <Button\n          data-cy={'format-underline'}\n          variant='light'\n          onClick={() => underlineSelection(editor)}\n          title={t('editor.editorToolbar.underline')}>\n          <ForkAwesomeIcon icon='underline' />\n        </Button>\n        <Button\n          data-cy={'format-strikethrough'}\n          variant='light'\n          onClick={() => strikeThroughSelection(editor)}\n          title={t('editor.editorToolbar.strikethrough')}>\n          <ForkAwesomeIcon icon='strikethrough' />\n        </Button>\n        <Button\n          data-cy={'format-subscript'}\n          variant='light'\n          onClick={() => subscriptSelection(editor)}\n          title={t('editor.editorToolbar.subscript')}>\n          <ForkAwesomeIcon icon='subscript' />\n        </Button>\n        <Button\n          data-cy={'format-superscript'}\n          variant='light'\n          onClick={() => superscriptSelection(editor)}\n          title={t('editor.editorToolbar.superscript')}>\n          <ForkAwesomeIcon icon='superscript' />\n        </Button>\n      </ButtonGroup>\n      <ButtonGroup className={'mx-1 flex-wrap'}>\n        <Button\n          data-cy={'format-heading'}\n          variant='light'\n          onClick={() => addHeaderLevel(editor)}\n          title={t('editor.editorToolbar.header')}>\n          <ForkAwesomeIcon icon='header' />\n        </Button>\n        <Button\n          data-cy={'format-code-block'}\n          variant='light'\n          onClick={() => addCodeFences(editor)}\n          title={t('editor.editorToolbar.code')}>\n          <ForkAwesomeIcon icon='code' />\n        </Button>\n        <Button\n          data-cy={'format-block-quote'}\n          variant='light'\n          onClick={() => addQuotes(editor)}\n          title={t('editor.editorToolbar.blockquote')}>\n          <ForkAwesomeIcon icon='quote-right' />\n        </Button>\n        <Button\n          data-cy={'format-unordered-list'}\n          variant='light'\n          onClick={() => addList(editor)}\n          title={t('editor.editorToolbar.unorderedList')}>\n          <ForkAwesomeIcon icon='list' />\n        </Button>\n        <Button\n          data-cy={'format-ordered-list'}\n          variant='light'\n          onClick={() => addOrderedList(editor)}\n          title={t('editor.editorToolbar.orderedList')}>\n          <ForkAwesomeIcon icon='list-ol' />\n        </Button>\n        <Button\n          data-cy={'format-check-list'}\n          variant='light'\n          onClick={() => addTaskList(editor)}\n          title={t('editor.editorToolbar.checkList')}>\n          <ForkAwesomeIcon icon='check-square' />\n        </Button>\n      </ButtonGroup>\n      <ButtonGroup className={'mx-1 flex-wrap'}>\n        <Button\n          data-cy={'format-link'}\n          variant='light'\n          onClick={() => addLink(editor)}\n          title={t('editor.editorToolbar.link')}>\n          <ForkAwesomeIcon icon='link' />\n        </Button>\n        <Button\n          data-cy={'format-image'}\n          variant='light'\n          onClick={() => addImage(editor)}\n          title={t('editor.editorToolbar.image')}>\n          <ForkAwesomeIcon icon='picture-o' />\n        </Button>\n        <UploadImageButton editor={editor} />\n      </ButtonGroup>\n      <ButtonGroup className={'mx-1 flex-wrap'}>\n        <TablePickerButton editor={editor} />\n        <Button\n          data-cy={'format-add-line'}\n          variant='light'\n          onClick={() => addLine(editor)}\n          title={t('editor.editorToolbar.line')}>\n          <ForkAwesomeIcon icon='minus' />\n        </Button>\n        <Button\n          data-cy={'format-collapsable-block'}\n          variant='light'\n          onClick={() => addCollapsableBlock(editor)}\n          title={t('editor.editorToolbar.collapsableBlock')}>\n          <ForkAwesomeIcon icon='caret-square-o-down' />\n        </Button>\n        <Button\n          data-cy={'format-add-comment'}\n          variant='light'\n          onClick={() => addComment(editor)}\n          title={t('editor.editorToolbar.comment')}>\n          <ForkAwesomeIcon icon='comment' />\n        </Button>\n        <EmojiPickerButton editor={editor} />\n      </ButtonGroup>\n      <ButtonGroup className={'mx-1 flex-wrap'}>\n        <EditorPreferences />\n      </ButtonGroup>\n    </ButtonToolbar>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport { convertClipboardTableToMarkdown, isTable } from '../../table-extractor'\nimport { handleUpload } from '../../upload-handler'\nimport { insertAtCursor } from './toolbarButtonUtils'\nimport { isCursorInCodefence } from './codefenceDetection'\n\ntype ClipboardDataFormats = 'text' | 'url' | 'text/plain' | 'text/uri-list' | 'text/html'\n\nexport interface PasteEvent {\n  clipboardData: {\n    files: FileList\n    getData: (format: ClipboardDataFormats) => string\n  }\n  preventDefault: () => void\n}\n\nexport const handleTablePaste = (event: PasteEvent, editor: Editor): boolean => {\n  const pasteText = event.clipboardData.getData('text')\n  if (!pasteText || isCursorInCodefence(editor) || !isTable(pasteText)) {\n    return false\n  }\n  event.preventDefault()\n  const markdownTable = convertClipboardTableToMarkdown(pasteText)\n  insertAtCursor(editor, markdownTable)\n  return true\n}\n\nexport const handleFilePaste = (event: PasteEvent, editor: Editor): boolean => {\n  if (!event.clipboardData.files || event.clipboardData.files.length < 1) {\n    return false\n  }\n  event.preventDefault()\n  const files: FileList = event.clipboardData.files\n  if (files && files.length >= 1) {\n    handleUpload(files[0], editor)\n    return true\n  }\n  return false\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\n\nexport const isCursorInCodefence = (editor: Editor): boolean => {\n  const currentLine = editor.getCursor().line\n  let codefenceCount = 0\n  for (let line = currentLine; line >= 0; --line) {\n    const markdownContentLine = editor.getDoc().getLine(line)\n    if (markdownContentLine.startsWith('```')) {\n      codefenceCount++\n    }\n  }\n  return codefenceCount % 2 === 1\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { createNumberRangeArray } from '../../common/number-range/number-range'\n\nexport const isTable = (text: string): boolean => {\n  // Tables must consist of multiple rows and columns\n  if (!text.includes('\\n') || !text.includes('\\t')) {\n    return false\n  }\n  // Code within code blocks should not be parsed as a table\n  if (text.startsWith('```')) {\n    return false\n  }\n\n  const lines = text.split(/\\r?\\n/).filter((line) => line.trim() !== '')\n\n  // Tab-indented text should not be matched as a table\n  if (lines.every((line) => line.startsWith('\\t'))) {\n    return false\n  }\n  // Every line should have the same amount of tabs (table columns)\n  const tabsPerLines = lines.map((line) => line.match(/\\t/g)?.length ?? 0)\n  return tabsPerLines.every((line) => line === tabsPerLines[0])\n}\n\nexport const convertClipboardTableToMarkdown = (pasteData: string): string => {\n  if (pasteData.trim() === '') {\n    return ''\n  }\n  const tableRows = pasteData.split(/\\r?\\n/).filter((row) => row.trim() !== '')\n  const tableCells = tableRows.reduce((cellsInRow, row, index) => {\n    cellsInRow[index] = row.split('\\t')\n    return cellsInRow\n  }, [] as string[][])\n  const arrayMaxRows = createNumberRangeArray(tableCells.length)\n  const arrayMaxColumns = createNumberRangeArray(Math.max(...tableCells.map((row) => row.length)))\n\n  const headRow1 = arrayMaxColumns.map((col) => `| #${col + 1} `).join('') + '|'\n  const headRow2 = arrayMaxColumns.map((col) => `| -${'-'.repeat((col + 1).toString().length)} `).join('') + '|'\n  const body = arrayMaxRows\n    .map((row) => {\n      return arrayMaxColumns.map((col) => '| ' + tableCells[row][col] + ' ').join('') + '|'\n    })\n    .join('\\n')\n  return `${headRow1}\\n${headRow2}\\n${body}`\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, EditorChange, EditorConfiguration, ScrollInfo } from 'codemirror'\nimport 'codemirror/addon/comment/comment'\nimport 'codemirror/addon/dialog/dialog'\nimport 'codemirror/addon/display/autorefresh'\nimport 'codemirror/addon/display/fullscreen'\nimport 'codemirror/addon/display/placeholder'\nimport 'codemirror/addon/edit/closebrackets'\nimport 'codemirror/addon/edit/closetag'\nimport 'codemirror/addon/edit/continuelist'\nimport 'codemirror/addon/edit/matchbrackets'\nimport 'codemirror/addon/edit/matchtags'\nimport 'codemirror/addon/fold/foldcode'\nimport 'codemirror/addon/fold/foldgutter'\nimport 'codemirror/addon/fold/markdown-fold'\nimport 'codemirror/addon/hint/show-hint'\nimport 'codemirror/addon/search/jump-to-line'\nimport 'codemirror/addon/search/match-highlighter'\nimport 'codemirror/addon/search/search'\nimport 'codemirror/addon/selection/active-line'\nimport 'codemirror/keymap/emacs'\nimport 'codemirror/keymap/sublime'\nimport 'codemirror/keymap/vim'\nimport 'codemirror/mode/gfm/gfm'\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { Controlled as ControlledCodeMirror } from 'react-codemirror2'\nimport { useTranslation } from 'react-i18next'\nimport { MaxLengthWarningModal } from '../editor-modals/max-length-warning-modal'\nimport { ScrollProps, ScrollState } from '../synced-scroll/scroll-props'\nimport { allHinters, findWordAtCursor } from './autocompletion'\nimport './editor-pane.scss'\nimport { defaultKeyMap } from './key-map'\nimport { createStatusInfo, defaultState, StatusBar, StatusBarInfo } from './status-bar/status-bar'\nimport { ToolBar } from './tool-bar/tool-bar'\nimport { handleUpload } from './upload-handler'\nimport { handleFilePaste, handleTablePaste, PasteEvent } from './tool-bar/utils/pasteHandlers'\nimport { useApplicationState } from '../../../hooks/common/use-application-state'\n\nexport interface EditorPaneProps {\n  onContentChange: (content: string) => void\n  content: string\n}\n\nconst onChange = (editor: Editor) => {\n  for (const hinter of allHinters) {\n    const searchTerm = findWordAtCursor(editor)\n    if (hinter.wordRegExp.test(searchTerm.text)) {\n      editor.showHint({\n        hint: hinter.hint,\n        completeSingle: false,\n        completeOnSingleClick: false,\n        alignWithWord: true\n      })\n      return\n    }\n  }\n}\n\ninterface DropEvent {\n  pageX: number\n  pageY: number\n  dataTransfer: {\n    files: FileList\n    effectAllowed: string\n  } | null\n  preventDefault: () => void\n}\n\nexport const EditorPane: React.FC<EditorPaneProps & ScrollProps> = ({\n  onContentChange,\n  content,\n  scrollState,\n  onScroll,\n  onMakeScrollSource\n}) => {\n  const { t } = useTranslation()\n  const maxLength = useApplicationState((state) => state.config.maxDocumentLength)\n  const smartPasteEnabled = useApplicationState((state) => state.editorConfig.smartPaste)\n  const [showMaxLengthWarning, setShowMaxLengthWarning] = useState(false)\n  const maxLengthWarningAlreadyShown = useRef(false)\n  const [editor, setEditor] = useState<Editor>()\n  const [statusBarInfo, setStatusBarInfo] = useState<StatusBarInfo>(defaultState)\n  const editorPreferences = useApplicationState((state) => state.editorConfig.preferences)\n  const ligaturesEnabled = useApplicationState((state) => state.editorConfig.ligatures)\n\n  const lastScrollPosition = useRef<number>()\n  const [editorScroll, setEditorScroll] = useState<ScrollInfo>()\n  const onEditorScroll = useCallback((editor: Editor, data: ScrollInfo) => setEditorScroll(data), [])\n\n  const onPaste = useCallback(\n    (pasteEditor: Editor, event: PasteEvent) => {\n      if (!event || !event.clipboardData) {\n        return\n      }\n      if (smartPasteEnabled) {\n        const tableInserted = handleTablePaste(event, pasteEditor)\n        if (tableInserted) {\n          return\n        }\n      }\n      handleFilePaste(event, pasteEditor)\n    },\n    [smartPasteEnabled]\n  )\n\n  useEffect(() => {\n    if (!editor || !onScroll || !editorScroll) {\n      return\n    }\n    const line = editor.lineAtHeight(editorScroll.top, 'local')\n    const startYOfLine = editor.heightAtLine(line, 'local')\n    const lineInfo = editor.lineInfo(line)\n    if (lineInfo === null) {\n      return\n    }\n    const heightOfLine = (lineInfo.handle as { height: number }).height\n    const percentageRaw = Math.max(editorScroll.top - startYOfLine, 0) / heightOfLine\n    const percentage = Math.floor(percentageRaw * 100)\n\n    const newScrollState: ScrollState = { firstLineInView: line + 1, scrolledPercentage: percentage }\n    onScroll(newScrollState)\n  }, [editor, editorScroll, onScroll])\n\n  useEffect(() => {\n    if (!editor || !scrollState) {\n      return\n    }\n    const startYOfLine = editor.heightAtLine(scrollState.firstLineInView - 1, 'local')\n    const heightOfLine = (editor.lineInfo(scrollState.firstLineInView - 1).handle as { height: number }).height\n    const newPositionRaw = startYOfLine + (heightOfLine * scrollState.scrolledPercentage) / 100\n    const newPosition = Math.floor(newPositionRaw)\n    if (newPosition !== lastScrollPosition.current) {\n      lastScrollPosition.current = newPosition\n      editor.scrollTo(0, newPosition)\n    }\n  }, [editor, scrollState])\n\n  const onBeforeChange = useCallback(\n    (editor: Editor, data: EditorChange, value: string) => {\n      if (value.length > maxLength && !maxLengthWarningAlreadyShown.current) {\n        setShowMaxLengthWarning(true)\n        maxLengthWarningAlreadyShown.current = true\n      }\n      if (value.length <= maxLength) {\n        maxLengthWarningAlreadyShown.current = false\n      }\n      onContentChange(value)\n    },\n    [onContentChange, maxLength, maxLengthWarningAlreadyShown]\n  )\n  const onEditorDidMount = useCallback(\n    (mountedEditor: Editor) => {\n      setStatusBarInfo(createStatusInfo(mountedEditor, maxLength))\n      setEditor(mountedEditor)\n    },\n    [maxLength]\n  )\n\n  const onCursorActivity = useCallback(\n    (editorWithActivity: Editor) => {\n      setStatusBarInfo(createStatusInfo(editorWithActivity, maxLength))\n    },\n    [maxLength]\n  )\n\n  const onDrop = useCallback((dropEditor: Editor, event: DropEvent) => {\n    if (\n      event &&\n      dropEditor &&\n      event.pageX &&\n      event.pageY &&\n      event.dataTransfer &&\n      event.dataTransfer.files &&\n      event.dataTransfer.files.length >= 1\n    ) {\n      event.preventDefault()\n      const top: number = event.pageY\n      const left: number = event.pageX\n      const newCursor = dropEditor.coordsChar({ top, left }, 'page')\n      dropEditor.setCursor(newCursor)\n      const files: FileList = event.dataTransfer.files\n      handleUpload(files[0], dropEditor)\n    }\n  }, [])\n\n  const onMaxLengthHide = useCallback(() => setShowMaxLengthWarning(false), [])\n\n  const codeMirrorOptions: EditorConfiguration = useMemo<EditorConfiguration>(\n    () => ({\n      ...editorPreferences,\n      mode: 'gfm',\n      viewportMargin: 20,\n      styleActiveLine: true,\n      lineNumbers: true,\n      lineWrapping: true,\n      showCursorWhenSelecting: true,\n      highlightSelectionMatches: true,\n      inputStyle: 'textarea',\n      matchBrackets: true,\n      autoCloseBrackets: true,\n      matchTags: {\n        bothTags: true\n      },\n      autoCloseTags: true,\n      foldGutter: true,\n      gutters: ['CodeMirror-linenumbers', 'authorship-gutters', 'CodeMirror-foldgutter'],\n      extraKeys: defaultKeyMap,\n      flattenSpans: true,\n      addModeClass: true,\n      autoRefresh: true,\n      // otherCursors: true,\n      placeholder: t('editor.placeholder')\n    }),\n    [t, editorPreferences]\n  )\n\n  return (\n    <div className={'d-flex flex-column h-100 position-relative'} onMouseEnter={onMakeScrollSource}>\n      <MaxLengthWarningModal show={showMaxLengthWarning} onHide={onMaxLengthHide} maxLength={maxLength} />\n      <ToolBar editor={editor} />\n      <ControlledCodeMirror\n        className={`overflow-hidden w-100 flex-fill ${ligaturesEnabled ? '' : 'no-ligatures'}`}\n        value={content}\n        options={codeMirrorOptions}\n        onChange={onChange}\n        onPaste={onPaste}\n        onDrop={onDrop}\n        onCursorActivity={onCursorActivity}\n        editorDidMount={onEditorDidMount}\n        onBeforeChange={onBeforeChange}\n        onScroll={onEditorScroll}\n      />\n      <StatusBar {...statusBarInfo} />\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { useEffect } from 'react'\nimport { setEditorMode } from '../../../redux/editor/methods'\nimport { EditorMode } from '../app-bar/editor-view-mode'\n\nconst shortcutHandler = (event: KeyboardEvent): void => {\n  if (event.ctrlKey && event.altKey && event.key === 'b') {\n    setEditorMode(EditorMode.BOTH)\n    event.preventDefault()\n  }\n\n  if (event.ctrlKey && event.altKey && event.key === 'v') {\n    setEditorMode(EditorMode.PREVIEW)\n    event.preventDefault()\n  }\n\n  if (event.ctrlKey && event.altKey && (event.key === 'e' || event.key === '€')) {\n    setEditorMode(EditorMode.EDITOR)\n    event.preventDefault()\n  }\n}\n\nexport const useViewModeShortcuts = (): void => {\n  useEffect(() => {\n    document.addEventListener('keydown', shortcutHandler, false)\n    return () => {\n      document.removeEventListener('keydown', shortcutHandler, false)\n    }\n  }, [])\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { ForkAwesomeIcon } from '../../common/fork-awesome/fork-awesome-icon'\nimport { IconName } from '../../common/fork-awesome/types'\nimport { ShowIf } from '../../common/show-if/show-if'\nimport { SidebarEntryProps } from './types'\n\nexport type SidebarEntryVariant = 'primary'\n\nexport const SidebarButton: React.FC<SidebarEntryProps> = ({\n  children,\n  icon,\n  className,\n  variant,\n  buttonRef,\n  hide,\n  ...props\n}) => {\n  return (\n    <button\n      ref={buttonRef}\n      className={`sidebar-entry ${hide ? 'hide' : ''} ${variant ? `sidebar-entry-${variant}` : ''} ${className ?? ''}`}\n      {...props}>\n      <ShowIf condition={!!icon}>\n        <span className={'sidebar-icon'}>\n          <ForkAwesomeIcon icon={icon as IconName} />\n        </span>\n      </ShowIf>\n      <span className={'sidebar-text'}>{children}</span>\n    </button>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { DeletionModal } from '../../common/modals/deletion-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const DeleteNoteSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ hide, className }) => {\n  useTranslation()\n  const [showDialog, setShowDialog] = useState(false)\n\n  return (\n    <Fragment>\n      <SidebarButton icon={'trash'} className={className} hide={hide} onClick={() => setShowDialog(true)}>\n        <Trans i18nKey={'landing.history.menu.deleteNote'} />\n      </SidebarButton>\n      <DeletionModal\n        onConfirm={() => setShowDialog(false)}\n        deletionButtonI18nKey={'editor.modal.deleteNote.button'}\n        show={showDialog}\n        onHide={() => setShowDialog(false)}\n        titleI18nKey={'editor.modal.deleteNote.title'}>\n        <h5>\n          <Trans i18nKey={'editor.modal.deleteNote.question'} />\n        </h5>\n        <ul>\n          <li> noteTitle</li>\n        </ul>\n        <h6>\n          <Trans i18nKey={'editor.modal.deleteNote.warning'} />\n        </h6>\n      </DeletionModal>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\n\nexport interface UnitalicBoldTextProps {\n  text: string | number\n  dataCy?: string\n}\n\nexport const UnitalicBoldText: React.FC<UnitalicBoldTextProps> = ({ text, dataCy }) => {\n  return (\n    <b className={'font-style-normal mr-1'} data-cy={dataCy}>\n      {text}\n    </b>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useEffect, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { ShowIf } from '../../../common/show-if/show-if'\nimport { DocumentInfoLine } from './document-info-line'\nimport { UnitalicBoldText } from './unitalic-bold-text'\nimport { useIFrameEditorToRendererCommunicator } from '../../render-context/iframe-editor-to-renderer-communicator-context-provider'\nimport { useApplicationState } from '../../../../hooks/common/use-application-state'\n\n/**\n * Creates a new info line for the document information dialog that holds the\n * word count of the note, based on counting in the rendered output.\n */\nexport const DocumentInfoLineWordCount: React.FC = () => {\n  useTranslation()\n  const iframeEditorToRendererCommunicator = useIFrameEditorToRendererCommunicator()\n  const [wordCount, setWordCount] = useState<number | null>(null)\n  const rendererReady = useApplicationState((state) => state.editorConfig.rendererReady)\n\n  useEffect(() => {\n    iframeEditorToRendererCommunicator.onWordCountCalculated((words) => {\n      setWordCount(words)\n    })\n    return () => {\n      iframeEditorToRendererCommunicator.onWordCountCalculated(undefined)\n    }\n  }, [iframeEditorToRendererCommunicator, setWordCount])\n\n  useEffect(() => {\n    if (rendererReady) {\n      iframeEditorToRendererCommunicator.sendGetWordCount()\n    }\n  }, [iframeEditorToRendererCommunicator, rendererReady])\n\n  return (\n    <DocumentInfoLine icon={'align-left'} size={'2x'}>\n      <ShowIf condition={wordCount === null}>\n        <Trans i18nKey={'common.loading'} />\n      </ShowIf>\n      <ShowIf condition={wordCount !== null}>\n        <Trans i18nKey={'editor.modal.documentInfo.words'}>\n          <UnitalicBoldText text={wordCount ?? ''} dataCy={'document-info-word-count'} />\n        </Trans>\n      </ShowIf>\n    </DocumentInfoLine>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { DateTime } from 'luxon'\nimport React from 'react'\nimport { ListGroup, Modal } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { CommonModal } from '../../../common/modals/common-modal'\nimport { DocumentInfoLine } from './document-info-line'\nimport { DocumentInfoLineWithTimeMode, DocumentInfoTimeLine } from './document-info-time-line'\nimport { UnitalicBoldText } from './unitalic-bold-text'\nimport { useCustomizeAssetsUrl } from '../../../../hooks/common/use-customize-assets-url'\nimport { DocumentInfoLineWordCount } from './document-info-line-word-count'\n\nexport interface DocumentInfoModalProps {\n  show: boolean\n  onHide: () => void\n}\n\nexport const DocumentInfoModal: React.FC<DocumentInfoModalProps> = ({ show, onHide }) => {\n  const assetsBaseUrl = useCustomizeAssetsUrl()\n  useTranslation()\n\n  // TODO Replace hardcoded mock data with real/mock API requests\n  return (\n    <CommonModal\n      show={show}\n      onHide={onHide}\n      closeButton={true}\n      titleI18nKey={'editor.modal.documentInfo.title'}\n      data-cy={'document-info-modal'}>\n      <Modal.Body>\n        <ListGroup>\n          <ListGroup.Item>\n            <DocumentInfoTimeLine\n              size={'2x'}\n              mode={DocumentInfoLineWithTimeMode.CREATED}\n              time={DateTime.local().minus({ days: 11 })}\n              userName={'Tilman'}\n              profileImageSrc={`${assetsBaseUrl}img/avatar.png`}\n            />\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <DocumentInfoTimeLine\n              size={'2x'}\n              mode={DocumentInfoLineWithTimeMode.EDITED}\n              time={DateTime.local().minus({ minutes: 3 })}\n              userName={'Philip'}\n              profileImageSrc={`${assetsBaseUrl}img/avatar.png`}\n            />\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <DocumentInfoLine icon={'users'} size={'2x'}>\n              <Trans i18nKey='editor.modal.documentInfo.usersContributed'>\n                <UnitalicBoldText text={'42'} />\n              </Trans>\n            </DocumentInfoLine>\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <DocumentInfoLine icon={'history'} size={'2x'}>\n              <Trans i18nKey='editor.modal.documentInfo.revisions'>\n                <UnitalicBoldText text={'192'} />\n              </Trans>\n            </DocumentInfoLine>\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <DocumentInfoLineWordCount />\n          </ListGroup.Item>\n        </ListGroup>\n      </Modal.Body>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { DocumentInfoModal } from '../document-bar/document-info/document-info-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const DocumentInfoSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ className, hide }) => {\n  const [showModal, setShowModal] = useState(false)\n  useTranslation()\n\n  return (\n    <Fragment>\n      <SidebarButton\n        hide={hide}\n        className={className}\n        icon={'line-chart'}\n        onClick={() => setShowModal(true)}\n        data-cy={'sidebar-btn-document-info'}>\n        <Trans i18nKey={'editor.modal.documentInfo.title'} />\n      </SidebarButton>\n      <DocumentInfoModal show={showModal} onHide={() => setShowModal(false)} />\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback } from 'react'\nimport sanitize from 'sanitize-filename'\nimport { store } from '../../../redux'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { useNoteMarkdownContent } from '../../../hooks/common/use-note-markdown-content'\nimport { download } from '../../common/download/download'\nimport { SidebarButton } from './sidebar-button'\n\nexport const ExportMarkdownSidebarEntry: React.FC = () => {\n  const { t } = useTranslation()\n  const markdownContent = useNoteMarkdownContent()\n  const onClick = useCallback(() => {\n    const sanitized = sanitize(store.getState().noteDetails.noteTitle)\n    download(markdownContent, `${sanitized !== '' ? sanitized : t('editor.untitledNote')}.md`, 'text/markdown')\n  }, [markdownContent, t])\n\n  return (\n    <SidebarButton data-cy={'menu-export-markdown'} onClick={onClick} icon={'file-text'}>\n      <Trans i18nKey={'editor.export.markdown-file'} />\n    </SidebarButton>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { SidebarMenuProps } from './types'\n\nexport const SidebarMenu: React.FC<SidebarMenuProps> = ({ children, expand }) => {\n  return (\n    <div className={`sidebar-menu ${expand ? 'show' : ''}`}>\n      <div className={`d-flex flex-column`}>{children}</div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useCallback } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport links from '../../../links.json'\nimport { ExportMarkdownSidebarEntry } from './export-markdown-sidebar-entry'\nimport { SidebarButton } from './sidebar-button'\nimport { SidebarMenu } from './sidebar-menu'\nimport { DocumentSidebarMenuSelection, SpecificSidebarMenuProps } from './types'\n\nexport const ExportMenuSidebarMenu: React.FC<SpecificSidebarMenuProps> = ({\n  className,\n  menuId,\n  onClick,\n  selectedMenuId\n}) => {\n  useTranslation()\n\n  const hide = selectedMenuId !== DocumentSidebarMenuSelection.NONE && selectedMenuId !== menuId\n  const expand = selectedMenuId === menuId\n  const onClickHandler = useCallback(() => {\n    onClick(menuId)\n  }, [menuId, onClick])\n\n  return (\n    <Fragment>\n      <SidebarButton\n        data-cy={'menu-export'}\n        hide={hide}\n        icon={expand ? 'arrow-left' : 'cloud-download'}\n        className={className}\n        onClick={onClickHandler}>\n        <Trans i18nKey={'editor.documentBar.export'} />\n      </SidebarButton>\n      <SidebarMenu expand={expand}>\n        <SidebarButton icon={'github'}>Gist</SidebarButton>\n        <SidebarButton icon={'gitlab'}>Gitlab Snippet</SidebarButton>\n\n        <ExportMarkdownSidebarEntry />\n\n        <SidebarButton icon={'file-code-o'}>HTML</SidebarButton>\n        <SidebarButton icon={'file-code-o'}>\n          <Trans i18nKey='editor.export.rawHtml' />\n        </SidebarButton>\n        <SidebarButton icon={'file-pdf-o'}>\n          <a className='small text-muted' dir={'auto'} href={links.faq} target={'_blank'} rel='noopener noreferrer'>\n            <Trans i18nKey={'editor.export.pdf'} />\n            &nbsp;\n            <span className={'text-primary'}>\n              <Trans i18nKey={'common.why'} />\n            </span>\n          </a>\n        </SidebarButton>\n      </SidebarMenu>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { ToggleButton, ToggleButtonGroup } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\n\nexport interface PermissionGroupEntryProps {\n  title: string\n  editMode: GroupMode\n  onChangeEditMode: (newMode: GroupMode) => void\n}\n\nexport enum GroupMode {\n  NONE,\n  VIEW,\n  EDIT\n}\n\nexport const PermissionGroupEntry: React.FC<PermissionGroupEntryProps> = ({ title, editMode, onChangeEditMode }) => {\n  const { t } = useTranslation()\n\n  return (\n    <li className={'list-group-item d-flex flex-row justify-content-between align-items-center'}>\n      <Trans i18nKey={title} />\n      <ToggleButtonGroup type='radio' name='edit-mode' value={editMode} onChange={onChangeEditMode}>\n        <ToggleButton\n          title={t('editor.modal.permissions.denyGroup', { name: t(title) })}\n          variant={'light'}\n          className={'text-secondary'}\n          value={GroupMode.NONE}>\n          <ForkAwesomeIcon icon='ban' />\n        </ToggleButton>\n        <ToggleButton\n          title={t('editor.modal.permissions.viewOnlyGroup', { name: t(title) })}\n          variant={'light'}\n          className={'text-secondary'}\n          value={GroupMode.VIEW}>\n          <ForkAwesomeIcon icon='eye' />\n        </ToggleButton>\n        <ToggleButton\n          title={t('editor.modal.permissions.editGroup', { name: t(title) })}\n          variant={'light'}\n          className={'text-secondary'}\n          value={GroupMode.EDIT}>\n          <ForkAwesomeIcon icon='pencil' />\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </li>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useCallback, useRef } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { useNoteMarkdownContent } from '../../../hooks/common/use-note-markdown-content'\nimport { setNoteMarkdownContent } from '../../../redux/note-details/methods'\nimport { SidebarButton } from './sidebar-button'\nimport { UploadInput } from './upload-input'\n\nexport const ImportMarkdownSidebarEntry: React.FC = () => {\n  const markdownContent = useNoteMarkdownContent()\n  useTranslation()\n\n  const onImportMarkdown = useCallback(\n    (file: File) => {\n      return new Promise<void>((resolve, reject) => {\n        const fileReader = new FileReader()\n        fileReader.addEventListener('load', () => {\n          const newContent = fileReader.result as string\n          setNoteMarkdownContent(markdownContent.length === 0 ? newContent : `${markdownContent}\\n${newContent}`)\n        })\n        fileReader.addEventListener('loadend', () => {\n          resolve()\n        })\n        fileReader.addEventListener('error', (error) => {\n          reject(error)\n        })\n        fileReader.readAsText(file)\n      })\n    },\n    [markdownContent]\n  )\n\n  const clickRef = useRef<() => void>()\n  const buttonClick = useCallback(() => {\n    clickRef.current?.()\n  }, [])\n\n  return (\n    <Fragment>\n      <SidebarButton data-cy={'menu-import-markdown'} icon={'file-text-o'} onClick={buttonClick}>\n        <Trans i18nKey={'editor.import.file'} />\n      </SidebarButton>\n      <UploadInput\n        onLoad={onImportMarkdown}\n        data-cy={'menu-import-markdown-input'}\n        acceptedFiles={'.md, text/markdown, text/plain'}\n        onClickRef={clickRef}\n      />\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useCallback } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { ImportMarkdownSidebarEntry } from './import-markdown-sidebar-entry'\nimport { SidebarButton } from './sidebar-button'\nimport { SidebarMenu } from './sidebar-menu'\nimport { DocumentSidebarMenuSelection, SpecificSidebarMenuProps } from './types'\n\nexport const ImportMenuSidebarMenu: React.FC<SpecificSidebarMenuProps> = ({\n  className,\n  menuId,\n  onClick,\n  selectedMenuId\n}) => {\n  useTranslation()\n\n  const hide = selectedMenuId !== DocumentSidebarMenuSelection.NONE && selectedMenuId !== menuId\n  const expand = selectedMenuId === menuId\n  const onClickHandler = useCallback(() => {\n    onClick(menuId)\n  }, [menuId, onClick])\n\n  return (\n    <Fragment>\n      <SidebarButton\n        data-cy={'menu-import'}\n        hide={hide}\n        icon={expand ? 'arrow-left' : 'cloud-upload'}\n        className={className}\n        onClick={onClickHandler}>\n        <Trans i18nKey={'editor.documentBar.import'} />\n      </SidebarButton>\n      <SidebarMenu expand={expand}>\n        <SidebarButton icon={'github'}>Gist</SidebarButton>\n        <SidebarButton icon={'gitlab'}>Gitlab Snippet</SidebarButton>\n        <SidebarButton icon={'clipboard'}>\n          <Trans i18nKey={'editor.import.clipboard'} />\n        </SidebarButton>\n        <ImportMarkdownSidebarEntry />\n      </SidebarMenu>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport interface CacheEntry<T> {\n  entryCreated: number\n  data: T\n}\n\nexport class Cache<K, V> {\n  readonly entryLifetime: number\n  readonly maxEntries: number\n  private store = new Map<K, CacheEntry<V>>()\n\n  constructor(lifetime: number, maxEntries = 0) {\n    if (lifetime < 0) {\n      throw new Error('Cache entry lifetime can not be less than 0 seconds.')\n    }\n    this.entryLifetime = lifetime\n    this.maxEntries = maxEntries\n  }\n\n  has(key: K): boolean {\n    if (!this.store.has(key)) {\n      return false\n    }\n    const entry = this.store.get(key)\n    return !!entry && entry.entryCreated >= Date.now() - this.entryLifetime * 1000\n  }\n\n  get(key: K): V {\n    const entry = this.store.get(key)\n    if (!entry) {\n      throw new Error('This cache entry does not exist. Check with \".has()\" before using \".get()\".')\n    }\n    return entry.data\n  }\n\n  put(key: K, value: V): void {\n    if (this.maxEntries > 0 && this.store.size === this.maxEntries) {\n      this.store.delete(this.store.keys().next().value)\n    }\n    this.store.set(key, {\n      entryCreated: Date.now(),\n      data: value\n    })\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Cache } from '../../components/common/cache/cache'\nimport { defaultFetchConfig, expectResponseCode, getApiUrl } from '../utils'\nimport { UserResponse } from './types'\n\nconst cache = new Cache<string, UserResponse>(600)\n\nexport const getUserById = async (userid: string): Promise<UserResponse> => {\n  if (cache.has(userid)) {\n    return cache.get(userid)\n  }\n  const response = await fetch(`${getApiUrl()}/users/${userid}`, {\n    ...defaultFetchConfig\n  })\n  expectResponseCode(response)\n  const userData = (await response.json()) as UserResponse\n  cache.put(userid, userData)\n  return userData\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { ReactElement, useState } from 'react'\nimport { Button, FormControl, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\nimport { Principal } from './permission-modal'\n\nexport interface PermissionListProps {\n  list: Principal[]\n  identifier: (entry: Principal) => ReactElement\n  changeEditMode: (id: Principal['id'], canEdit: Principal['canEdit']) => void\n  removeEntry: (id: Principal['id']) => void\n  createEntry: (name: Principal['name']) => void\n  editI18nKey: string\n  viewI18nKey: string\n  removeI18nKey: string\n  addI18nKey: string\n}\n\nexport enum EditMode {\n  VIEW,\n  EDIT\n}\n\nexport const PermissionList: React.FC<PermissionListProps> = ({\n  list,\n  identifier,\n  changeEditMode,\n  removeEntry,\n  createEntry,\n  editI18nKey,\n  viewI18nKey,\n  removeI18nKey,\n  addI18nKey\n}) => {\n  const { t } = useTranslation()\n  const [newEntry, setNewEntry] = useState('')\n\n  const addEntry = () => {\n    createEntry(newEntry)\n    setNewEntry('')\n  }\n\n  return (\n    <ul className={'list-group'}>\n      {list.map((entry) => (\n        <li key={entry.id} className={'list-group-item d-flex flex-row justify-content-between align-items-center'}>\n          {identifier(entry)}\n          <div>\n            <Button\n              variant='light'\n              className={'text-danger mr-2'}\n              title={t(removeI18nKey, { name: entry.name })}\n              onClick={() => removeEntry(entry.id)}>\n              <ForkAwesomeIcon icon={'times'} />\n            </Button>\n            <ToggleButtonGroup\n              type='radio'\n              name='edit-mode'\n              value={entry.canEdit ? EditMode.EDIT : EditMode.VIEW}\n              onChange={(value: EditMode) => changeEditMode(entry.id, value === EditMode.EDIT)}>\n              <ToggleButton\n                title={t(viewI18nKey, { name: entry.name })}\n                variant={'light'}\n                className={'text-secondary'}\n                value={EditMode.VIEW}>\n                <ForkAwesomeIcon icon='eye' />\n              </ToggleButton>\n              <ToggleButton\n                title={t(editI18nKey, { name: entry.name })}\n                variant={'light'}\n                className={'text-secondary'}\n                value={EditMode.EDIT}>\n                <ForkAwesomeIcon icon='pencil' />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </li>\n      ))}\n      <li className={'list-group-item'}>\n        <form\n          onSubmit={(event) => {\n            event.preventDefault()\n            addEntry()\n          }}>\n          <InputGroup className={'mr-1 mb-1'}>\n            <FormControl\n              value={newEntry}\n              placeholder={t(addI18nKey)}\n              aria-label={t(addI18nKey)}\n              onChange={(event) => setNewEntry(event.currentTarget.value)}\n            />\n            <Button variant='light' className={'text-secondary ml-2'} title={t(addI18nKey)} onClick={addEntry}>\n              <ForkAwesomeIcon icon={'plus'} />\n            </Button>\n          </InputGroup>\n        </form>\n      </li>\n    </ul>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport './active-indicator.scss'\n\nexport enum ActiveIndicatorStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive'\n}\n\nexport interface ActiveIndicatorProps {\n  status: ActiveIndicatorStatus\n}\n\nexport const ActiveIndicator: React.FC<ActiveIndicatorProps> = ({ status }) => {\n  return <span className={`activeIndicator ${status}`} />\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useEffect, useState } from 'react'\nimport { Alert, Modal } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { getUserById } from '../../../../api/users'\nimport { CommonModal } from '../../../common/modals/common-modal'\nimport { ShowIf } from '../../../common/show-if/show-if'\nimport { UserAvatar, UserAvatarProps } from '../../../common/user-avatar/user-avatar'\nimport { GroupMode, PermissionGroupEntry } from './permission-group-entry'\nimport { PermissionList } from './permission-list'\n\nexport interface PermissionsModalProps {\n  show: boolean\n  onHide: () => void\n}\n\nexport interface Principal {\n  id: string\n  name: string\n  photo: string\n  canEdit: boolean\n}\n\ninterface NotePermissions {\n  owner: string\n  sharedTo: {\n    username: string\n    canEdit: boolean\n  }[]\n  sharedToGroup: {\n    id: string\n    canEdit: boolean\n  }[]\n}\n\nexport const EVERYONE_GROUP_ID = '1'\nexport const EVERYONE_LOGGED_IN_GROUP_ID = '2'\n\nconst permissionsApiResponse: NotePermissions = {\n  owner: 'dermolly',\n  sharedTo: [\n    {\n      username: 'emcrx',\n      canEdit: true\n    },\n    {\n      username: 'mrdrogdrog',\n      canEdit: false\n    }\n  ],\n  sharedToGroup: [\n    {\n      id: EVERYONE_GROUP_ID,\n      canEdit: true\n    },\n    {\n      id: EVERYONE_LOGGED_IN_GROUP_ID,\n      canEdit: false\n    }\n  ]\n}\n\nexport const PermissionModal: React.FC<PermissionsModalProps> = ({ show, onHide }) => {\n  useTranslation()\n  const [error, setError] = useState(false)\n  const [userList, setUserList] = useState<Principal[]>([])\n  const [owner, setOwner] = useState<UserAvatarProps>()\n  const [allUserPermissions, setAllUserPermissions] = useState(GroupMode.NONE)\n  const [allLoggedInUserPermissions, setAllLoggedInUserPermissions] = useState(GroupMode.NONE)\n\n  useEffect(() => {\n    // set owner\n    getUserById(permissionsApiResponse.owner)\n      .then((response) => {\n        setOwner({\n          name: response.name,\n          photo: response.photo\n        })\n      })\n      .catch(() => setError(true))\n    // set user List\n    permissionsApiResponse.sharedTo.forEach((shareUser) => {\n      getUserById(shareUser.username)\n        .then((response) => {\n          setUserList((list) =>\n            list.concat([\n              {\n                id: response.id,\n                name: response.name,\n                photo: response.photo,\n                canEdit: shareUser.canEdit\n              }\n            ])\n          )\n        })\n        .catch(() => setError(true))\n    })\n    // set group List\n    permissionsApiResponse.sharedToGroup.forEach((sharedGroup) => {\n      if (sharedGroup.id === EVERYONE_GROUP_ID) {\n        setAllUserPermissions(sharedGroup.canEdit ? GroupMode.EDIT : GroupMode.VIEW)\n      } else if (sharedGroup.id === EVERYONE_LOGGED_IN_GROUP_ID) {\n        setAllLoggedInUserPermissions(sharedGroup.canEdit ? GroupMode.EDIT : GroupMode.VIEW)\n      }\n    })\n  }, [])\n\n  const changeUserMode = (userId: Principal['id'], canEdit: Principal['canEdit']) => {\n    setUserList((list) =>\n      list.map((user) => {\n        if (user.id === userId) {\n          user.canEdit = canEdit\n        }\n        return user\n      })\n    )\n  }\n\n  const removeUser = (userId: Principal['id']) => {\n    setUserList((list) => list.filter((user) => user.id !== userId))\n  }\n\n  const addUser = (name: Principal['name']) => {\n    setUserList((list) =>\n      list.concat({\n        id: name,\n        photo: '/img/avatar.png',\n        name: name,\n        canEdit: false\n      })\n    )\n  }\n\n  return (\n    <CommonModal show={show} onHide={onHide} closeButton={true} titleI18nKey={'editor.modal.permissions.title'}>\n      <Modal.Body>\n        <h5 className={'mb-3'}>\n          <Trans i18nKey={'editor.modal.permissions.owner'} />\n        </h5>\n        <ShowIf condition={error}>\n          <Alert variant='danger'>\n            <Trans i18nKey='editor.modal.permissions.error' />\n          </Alert>\n        </ShowIf>\n        <ul className={'list-group'}>\n          <li className={'list-group-item d-flex flex-row align-items-center'}>\n            <UserAvatar name={owner?.name ?? ''} photo={owner?.photo ?? ''} />\n          </li>\n        </ul>\n        <h5 className={'my-3'}>\n          <Trans i18nKey={'editor.modal.permissions.sharedWithUsers'} />\n        </h5>\n        <PermissionList\n          list={userList}\n          identifier={(entry) => <UserAvatar name={entry.name} photo={entry.photo} />}\n          changeEditMode={changeUserMode}\n          removeEntry={removeUser}\n          createEntry={addUser}\n          editI18nKey={'editor.modal.permissions.editUser'}\n          viewI18nKey={'editor.modal.permissions.viewOnlyUser'}\n          removeI18nKey={'editor.modal.permissions.removeUser'}\n          addI18nKey={'editor.modal.permissions.addUser'}\n        />\n        <h5 className={'my-3'}>\n          <Trans i18nKey={'editor.modal.permissions.sharedWithGroups'} />\n        </h5>\n        <ul className={'list-group'}>\n          <PermissionGroupEntry\n            title={'editor.modal.permissions.allUser'}\n            editMode={allUserPermissions}\n            onChangeEditMode={setAllUserPermissions}\n          />\n          <PermissionGroupEntry\n            title={'editor.modal.permissions.allLoggedInUser'}\n            editMode={allLoggedInUserPermissions}\n            onChangeEditMode={setAllLoggedInUserPermissions}\n          />\n        </ul>\n      </Modal.Body>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { PermissionModal } from '../document-bar/permissions/permission-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const PermissionsSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ className, hide }) => {\n  const [showModal, setShowModal] = useState(false)\n  useTranslation()\n\n  return (\n    <Fragment>\n      <SidebarButton hide={hide} className={className} icon={'lock'} onClick={() => setShowModal(true)}>\n        <Trans i18nKey={'editor.modal.permissions.title'} />\n      </SidebarButton>\n      <PermissionModal show={showModal} onHide={() => setShowModal(false)} />\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useMemo } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\nimport { useParams } from 'react-router-dom'\nimport { EditorPagePathParams } from '../editor-page'\nimport { toggleHistoryEntryPinning } from '../../../redux/history/methods'\nimport { showErrorNotification } from '../../../redux/ui-notifications/methods'\nimport { useApplicationState } from '../../../hooks/common/use-application-state'\n\nexport const PinNoteSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ className, hide }) => {\n  const { t } = useTranslation()\n  const { id } = useParams<EditorPagePathParams>()\n  const history = useApplicationState((state) => state.history)\n\n  const isPinned = useMemo(() => {\n    const entry = history.find((entry) => entry.identifier === id)\n    if (!entry) {\n      return false\n    }\n    return entry.pinStatus\n  }, [id, history])\n\n  const onPinClicked = useCallback(() => {\n    toggleHistoryEntryPinning(id).catch(showErrorNotification(t('landing.history.error.updateEntry.text')))\n  }, [id, t])\n\n  return (\n    <SidebarButton\n      icon={'thumb-tack'}\n      hide={hide}\n      onClick={onPinClicked}\n      className={`${className ?? ''} ${isPinned ? 'icon-highlighted' : ''}`}>\n      <Trans i18nKey={isPinned ? 'editor.documentBar.pinnedToHistory' : 'editor.documentBar.pinNoteToHistory'} />\n    </SidebarButton>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Cache } from '../../components/common/cache/cache'\nimport { defaultFetchConfig, expectResponseCode, getApiUrl } from '../utils'\nimport { Revision, RevisionListEntry } from './types'\n\nconst revisionCache = new Cache<string, Revision>(3600)\n\nexport const getRevision = async (noteId: string, timestamp: number): Promise<Revision> => {\n  const cacheKey = `${noteId}:${timestamp}`\n  if (revisionCache.has(cacheKey)) {\n    return revisionCache.get(cacheKey)\n  }\n  const response = await fetch(getApiUrl() + `notes/${noteId}/revisions/${timestamp}`, {\n    ...defaultFetchConfig\n  })\n  expectResponseCode(response)\n  const revisionData = (await response.json()) as Revision\n  revisionCache.put(cacheKey, revisionData)\n  return revisionData\n}\n\nexport const getAllRevisions = async (noteId: string): Promise<RevisionListEntry[]> => {\n  // TODO Change 'revisions-list' to 'revisions' as soon as the backend is ready to serve some data!\n  const response = await fetch(getApiUrl() + `notes/${noteId}/revisions-list`, {\n    ...defaultFetchConfig\n  })\n  expectResponseCode(response)\n  return (await response.json()) as Promise<RevisionListEntry[]>\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { DateTime } from 'luxon'\nimport React from 'react'\nimport { ListGroup } from 'react-bootstrap'\nimport { Trans } from 'react-i18next'\nimport { RevisionListEntry } from '../../../../api/revisions/types'\nimport { UserResponse } from '../../../../api/users/types'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\nimport { UserAvatar } from '../../../common/user-avatar/user-avatar'\n\nexport interface RevisionModalListEntryProps {\n  active: boolean\n  onClick: () => void\n  revision: RevisionListEntry\n  revisionAuthorListMap: Map<number, UserResponse[]>\n}\n\nexport const RevisionModalListEntry: React.FC<RevisionModalListEntryProps> = ({\n  active,\n  onClick,\n  revision,\n  revisionAuthorListMap\n}) => (\n  <ListGroup.Item\n    as='li'\n    active={active}\n    onClick={onClick}\n    className='user-select-none revision-item d-flex flex-column'>\n    <span>\n      <ForkAwesomeIcon icon={'clock-o'} className='mx-2' />\n      {DateTime.fromMillis(revision.timestamp * 1000).toFormat('DDDD T')}\n    </span>\n    <span>\n      <ForkAwesomeIcon icon={'file-text-o'} className='mx-2' />\n      <Trans i18nKey={'editor.modal.revision.length'} />: {revision.length}\n    </span>\n    <span className={'d-flex flex-row my-1 align-items-center'}>\n      <ForkAwesomeIcon icon={'user-o'} className={'mx-2'} />\n      {revisionAuthorListMap.get(revision.timestamp)?.map((user, index) => {\n        return (\n          <UserAvatar name={user.name} photo={user.photo} showName={false} additionalClasses={'mx-1'} key={index} />\n        )\n      })}\n    </span>\n  </ListGroup.Item>\n)\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Alert, Button, Col, ListGroup, Modal, Row } from 'react-bootstrap'\nimport ReactDiffViewer, { DiffMethod } from 'react-diff-viewer'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { useParams } from 'react-router'\nimport { getAllRevisions, getRevision } from '../../../../api/revisions'\nimport { Revision, RevisionListEntry } from '../../../../api/revisions/types'\nimport { UserResponse } from '../../../../api/users/types'\nimport { useIsDarkModeActivated } from '../../../../hooks/common/use-is-dark-mode-activated'\nimport { useNoteMarkdownContent } from '../../../../hooks/common/use-note-markdown-content'\nimport { CommonModal } from '../../../common/modals/common-modal'\nimport { ShowIf } from '../../../common/show-if/show-if'\nimport { RevisionModalListEntry } from './revision-modal-list-entry'\nimport './revision-modal.scss'\nimport { downloadRevision, getUserDataForRevision } from './utils'\n\nexport interface PermissionsModalProps {\n  show: boolean\n  onHide: () => void\n}\n\nexport const RevisionModal: React.FC<PermissionsModalProps> = ({ show, onHide }) => {\n  useTranslation()\n  const [revisions, setRevisions] = useState<RevisionListEntry[]>([])\n  const [selectedRevisionTimestamp, setSelectedRevisionTimestamp] = useState<number | null>(null)\n  const [selectedRevision, setSelectedRevision] = useState<Revision | null>(null)\n  const [error, setError] = useState(false)\n  const revisionAuthorListMap = useRef(new Map<number, UserResponse[]>())\n  const darkModeEnabled = useIsDarkModeActivated()\n  const { id } = useParams<{ id: string }>()\n\n  useEffect(() => {\n    getAllRevisions(id)\n      .then((fetchedRevisions) => {\n        fetchedRevisions.forEach((revision) => {\n          const authorData = getUserDataForRevision(revision.authors)\n          revisionAuthorListMap.current.set(revision.timestamp, authorData)\n        })\n        setRevisions(fetchedRevisions)\n        if (fetchedRevisions.length >= 1) {\n          setSelectedRevisionTimestamp(fetchedRevisions[0].timestamp)\n        }\n      })\n      .catch(() => setError(true))\n  }, [setRevisions, setError, id])\n\n  useEffect(() => {\n    if (selectedRevisionTimestamp === null) {\n      return\n    }\n    getRevision(id, selectedRevisionTimestamp)\n      .then((fetchedRevision) => {\n        setSelectedRevision(fetchedRevision)\n      })\n      .catch(() => setError(true))\n  }, [selectedRevisionTimestamp, id])\n\n  const markdownContent = useNoteMarkdownContent()\n\n  return (\n    <CommonModal\n      show={show}\n      onHide={onHide}\n      titleI18nKey={'editor.modal.revision.title'}\n      icon={'history'}\n      closeButton={true}\n      size={'xl'}\n      additionalClasses='revision-modal'>\n      <Modal.Body>\n        <Row>\n          <Col lg={4} className={'scroll-col'}>\n            <ListGroup as='ul'>\n              {revisions.map((revision, revisionIndex) => (\n                <RevisionModalListEntry\n                  key={revisionIndex}\n                  active={selectedRevisionTimestamp === revision.timestamp}\n                  revision={revision}\n                  revisionAuthorListMap={revisionAuthorListMap.current}\n                  onClick={() => setSelectedRevisionTimestamp(revision.timestamp)}\n                />\n              ))}\n            </ListGroup>\n          </Col>\n          <Col lg={8} className={'scroll-col'}>\n            <ShowIf condition={error}>\n              <Alert variant='danger'>\n                <Trans i18nKey='editor.modal.revision.error' />\n              </Alert>\n            </ShowIf>\n            <ShowIf condition={!error && !!selectedRevision}>\n              <ReactDiffViewer\n                oldValue={selectedRevision?.content}\n                newValue={markdownContent}\n                splitView={false}\n                compareMethod={DiffMethod.WORDS}\n                useDarkTheme={darkModeEnabled}\n              />\n            </ShowIf>\n          </Col>\n        </Row>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant='secondary' onClick={onHide}>\n          <Trans i18nKey={'common.close'} />\n        </Button>\n        <Button\n          variant='danger'\n          disabled={!selectedRevisionTimestamp}\n          onClick={() => window.alert('Not yet implemented. Requires websocket.')}>\n          <Trans i18nKey={'editor.modal.revision.revertButton'} />\n        </Button>\n        <Button\n          variant='primary'\n          disabled={!selectedRevisionTimestamp}\n          onClick={() => downloadRevision(id, selectedRevision)}>\n          <Trans i18nKey={'editor.modal.revision.download'} />\n        </Button>\n      </Modal.Footer>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Revision } from '../../../../api/revisions/types'\nimport { getUserById } from '../../../../api/users'\nimport { UserResponse } from '../../../../api/users/types'\nimport { download } from '../../../common/download/download'\n\nexport const downloadRevision = (noteId: string, revision: Revision | null): void => {\n  if (!revision) {\n    return\n  }\n  download(revision.content, `${noteId}-${revision.timestamp}.md`, 'text/markdown')\n}\n\nexport const getUserDataForRevision = (authors: string[]): UserResponse[] => {\n  const users: UserResponse[] = []\n  authors.forEach((author, index) => {\n    if (index > 9) {\n      return\n    }\n    getUserById(author)\n      .then((userData) => {\n        users.push(userData)\n      })\n      .catch((error) => console.error(error))\n  })\n  return users\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans } from 'react-i18next'\nimport { RevisionModal } from '../document-bar/revisions/revision-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const RevisionSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ className, hide }) => {\n  const [showModal, setShowModal] = useState(false)\n\n  return (\n    <Fragment>\n      <SidebarButton hide={hide} className={className} icon={'history'} onClick={() => setShowModal(true)}>\n        <Trans i18nKey={'editor.modal.revision.title'} />\n      </SidebarButton>\n      <RevisionModal show={showModal} onHide={() => setShowModal(false)} />\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { Modal } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { useParams } from 'react-router-dom'\nimport { useFrontendBaseUrl } from '../../../../hooks/common/use-frontend-base-url'\nimport { CopyableField } from '../../../common/copyable/copyable-field/copyable-field'\nimport { CommonModal } from '../../../common/modals/common-modal'\nimport { ShowIf } from '../../../common/show-if/show-if'\nimport { EditorPagePathParams } from '../../editor-page'\nimport { NoteType } from '../../note-frontmatter/note-frontmatter'\nimport { useApplicationState } from '../../../../hooks/common/use-application-state'\n\nexport interface ShareModalProps {\n  show: boolean\n  onHide: () => void\n}\n\nexport const ShareModal: React.FC<ShareModalProps> = ({ show, onHide }) => {\n  useTranslation()\n  const noteFrontmatter = useApplicationState((state) => state.noteDetails.frontmatter)\n  const editorMode = useApplicationState((state) => state.editorConfig.editorMode)\n  const baseUrl = useFrontendBaseUrl()\n  const { id } = useParams<EditorPagePathParams>()\n\n  return (\n    <CommonModal show={show} onHide={onHide} closeButton={true} titleI18nKey={'editor.modal.shareLink.title'}>\n      <Modal.Body>\n        <Trans i18nKey={'editor.modal.shareLink.editorDescription'} />\n        <CopyableField\n          content={`${baseUrl}n/${id}?${editorMode}`}\n          nativeShareButton={true}\n          url={`${baseUrl}n/${id}?${editorMode}`}\n        />\n        <ShowIf condition={noteFrontmatter.type === NoteType.SLIDE}>\n          <Trans i18nKey={'editor.modal.shareLink.slidesDescription'} />\n          <CopyableField content={`${baseUrl}p/${id}`} nativeShareButton={true} url={`${baseUrl}p/${id}`} />\n        </ShowIf>\n        <ShowIf condition={noteFrontmatter.type === ''}>\n          <Trans i18nKey={'editor.modal.shareLink.viewOnlyDescription'} />\n          <CopyableField content={`${baseUrl}s/${id}`} nativeShareButton={true} url={`${baseUrl}s/${id}`} />\n        </ShowIf>\n      </Modal.Body>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { ShareModal } from '../document-bar/share/share-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const ShareSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ className, hide }) => {\n  const [showModal, setShowModal] = useState(false)\n  useTranslation()\n\n  return (\n    <Fragment>\n      <SidebarButton hide={hide} className={className} icon={'share'} onClick={() => setShowModal(true)}>\n        <Trans i18nKey={'editor.modal.shareLink.title'} />\n      </SidebarButton>\n      <ShareModal show={showModal} onHide={() => setShowModal(false)} />\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useMemo, useRef, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useApplyDarkMode } from '../../hooks/common/use-apply-dark-mode'\nimport { useDocumentTitleWithNoteTitle } from '../../hooks/common/use-document-title-with-note-title'\nimport { useNoteMarkdownContent } from '../../hooks/common/use-note-markdown-content'\nimport {\n  setCheckboxInMarkdownContent,\n  setNoteFrontmatter,\n  setNoteMarkdownContent,\n  updateNoteTitleByFirstHeading\n} from '../../redux/note-details/methods'\nimport { MotdBanner } from '../common/motd-banner/motd-banner'\nimport { ShowIf } from '../common/show-if/show-if'\nimport { ErrorWhileLoadingNoteAlert } from '../document-read-only-page/ErrorWhileLoadingNoteAlert'\nimport { LoadingNoteAlert } from '../document-read-only-page/LoadingNoteAlert'\nimport { AppBar, AppBarMode } from './app-bar/app-bar'\nimport { EditorMode } from './app-bar/editor-view-mode'\nimport { EditorPane } from './editor-pane/editor-pane'\nimport { useLoadNoteFromServer } from './hooks/useLoadNoteFromServer'\nimport { useViewModeShortcuts } from './hooks/useViewModeShortcuts'\nimport { RenderIframe } from './renderer-pane/render-iframe'\nimport { Sidebar } from './sidebar/sidebar'\nimport { Splitter } from './splitter/splitter'\nimport { DualScrollState, ScrollState } from './synced-scroll/scroll-props'\nimport { RendererType } from '../render-page/rendering-message'\nimport { useEditorModeFromUrl } from './hooks/useEditorModeFromUrl'\nimport { UiNotifications } from '../notifications/ui-notifications'\nimport { useNotificationTest } from './use-notification-test'\nimport { IframeEditorToRendererCommunicatorContextProvider } from './render-context/iframe-editor-to-renderer-communicator-context-provider'\nimport { useUpdateLocalHistoryEntry } from './hooks/useUpdateLocalHistoryEntry'\nimport { useApplicationState } from '../../hooks/common/use-application-state'\n\nexport interface EditorPagePathParams {\n  id: string\n}\n\nexport enum ScrollSource {\n  EDITOR,\n  RENDERER\n}\n\nexport const EditorPage: React.FC = () => {\n  useTranslation()\n  const markdownContent = useNoteMarkdownContent()\n  const scrollSource = useRef<ScrollSource>(ScrollSource.EDITOR)\n\n  const editorMode: EditorMode = useApplicationState((state) => state.editorConfig.editorMode)\n  const editorSyncScroll: boolean = useApplicationState((state) => state.editorConfig.syncScroll)\n\n  const [scrollState, setScrollState] = useState<DualScrollState>(() => ({\n    editorScrollState: { firstLineInView: 1, scrolledPercentage: 0 },\n    rendererScrollState: { firstLineInView: 1, scrolledPercentage: 0 }\n  }))\n\n  const onMarkdownRendererScroll = useCallback(\n    (newScrollState: ScrollState) => {\n      if (scrollSource.current === ScrollSource.RENDERER && editorSyncScroll) {\n        setScrollState((old) => ({ editorScrollState: newScrollState, rendererScrollState: old.rendererScrollState }))\n      }\n    },\n    [editorSyncScroll]\n  )\n\n  const onEditorScroll = useCallback(\n    (newScrollState: ScrollState) => {\n      if (scrollSource.current === ScrollSource.EDITOR && editorSyncScroll) {\n        setScrollState((old) => ({ rendererScrollState: newScrollState, editorScrollState: old.editorScrollState }))\n      }\n    },\n    [editorSyncScroll]\n  )\n\n  useViewModeShortcuts()\n  useApplyDarkMode()\n  useDocumentTitleWithNoteTitle()\n  useEditorModeFromUrl()\n\n  const [error, loading] = useLoadNoteFromServer()\n\n  useUpdateLocalHistoryEntry(!error && !loading)\n\n  const setRendererToScrollSource = useCallback(() => {\n    scrollSource.current = ScrollSource.RENDERER\n  }, [])\n\n  const setEditorToScrollSource = useCallback(() => {\n    scrollSource.current = ScrollSource.EDITOR\n  }, [])\n\n  useNotificationTest()\n\n  const leftPane = useMemo(\n    () => (\n      <EditorPane\n        onContentChange={setNoteMarkdownContent}\n        content={markdownContent}\n        scrollState={scrollState.editorScrollState}\n        onScroll={onEditorScroll}\n        onMakeScrollSource={setEditorToScrollSource}\n      />\n    ),\n    [markdownContent, onEditorScroll, scrollState.editorScrollState, setEditorToScrollSource]\n  )\n\n  const rightPane = useMemo(\n    () => (\n      <RenderIframe\n        frameClasses={'h-100 w-100'}\n        markdownContent={markdownContent}\n        onMakeScrollSource={setRendererToScrollSource}\n        onFirstHeadingChange={updateNoteTitleByFirstHeading}\n        onTaskCheckedChange={setCheckboxInMarkdownContent}\n        onFrontmatterChange={setNoteFrontmatter}\n        onScroll={onMarkdownRendererScroll}\n        scrollState={scrollState.rendererScrollState}\n        rendererType={RendererType.DOCUMENT}\n      />\n    ),\n    [markdownContent, onMarkdownRendererScroll, scrollState.rendererScrollState, setRendererToScrollSource]\n  )\n\n  return (\n    <IframeEditorToRendererCommunicatorContextProvider>\n      <UiNotifications />\n      <MotdBanner />\n      <div className={'d-flex flex-column vh-100'}>\n        <AppBar mode={AppBarMode.EDITOR} />\n        <div className={'container'}>\n          <ErrorWhileLoadingNoteAlert show={error} />\n          <LoadingNoteAlert show={loading} />\n        </div>\n        <ShowIf condition={!error && !loading}>\n          <div className={'flex-fill d-flex h-100 w-100 overflow-hidden flex-row'}>\n            <Splitter\n              showLeft={editorMode === EditorMode.EDITOR || editorMode === EditorMode.BOTH}\n              left={leftPane}\n              showRight={editorMode === EditorMode.PREVIEW || editorMode === EditorMode.BOTH}\n              right={rightPane}\n              additionalContainerClassName={'overflow-hidden'}\n            />\n            <Sidebar />\n          </div>\n        </ShowIf>\n      </div>\n    </IframeEditorToRendererCommunicatorContextProvider>\n  )\n}\n\nexport default EditorPage\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { UserAvatar } from '../../../common/user-avatar/user-avatar'\nimport { ActiveIndicator, ActiveIndicatorStatus } from './active-indicator'\nimport './user-line.scss'\n\nexport interface UserLineProps {\n  name: string\n  photo: string\n  color: string\n  status: ActiveIndicatorStatus\n}\n\nexport const UserLine: React.FC<UserLineProps> = ({ name, photo, color, status }) => {\n  return (\n    <div className={'d-flex align-items-center h-100 w-100'}>\n      <div className='d-inline-flex align-items-bottom user-line-color-indicator' style={{ borderLeftColor: color }} />\n      <UserAvatar photo={photo} name={name} additionalClasses={'flex-fill overflow-hidden px-2 text-nowrap w-100'} />\n      <div className={'active-indicator-container'}>\n        <ActiveIndicator status={status} />\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useCallback, useEffect, useRef, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { SidebarButton } from '../sidebar-button'\nimport { SidebarMenu } from '../sidebar-menu'\nimport { DocumentSidebarMenuSelection, SpecificSidebarMenuProps } from '../types'\nimport { ActiveIndicatorStatus } from './active-indicator'\nimport './online-counter.scss'\nimport { UserLine } from './user-line'\n\nexport const UsersOnlineSidebarMenu: React.FC<SpecificSidebarMenuProps> = ({\n  className,\n  menuId,\n  onClick,\n  selectedMenuId\n}) => {\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const [counter] = useState(2)\n  useTranslation()\n\n  useEffect(() => {\n    const value = `${counter}`\n    buttonRef.current?.style.setProperty('--users-online', `\"${value}\"`)\n  }, [counter])\n\n  const hide = selectedMenuId !== DocumentSidebarMenuSelection.NONE && selectedMenuId !== menuId\n  const expand = selectedMenuId === menuId\n  const onClickHandler = useCallback(() => {\n    onClick(menuId)\n  }, [menuId, onClick])\n\n  return (\n    <Fragment>\n      <SidebarButton\n        hide={hide}\n        buttonRef={buttonRef}\n        onClick={onClickHandler}\n        icon={expand ? 'arrow-left' : 'users'}\n        variant={'primary'}\n        className={`online-entry ${className ?? ''}`}>\n        <Trans i18nKey={'editor.onlineStatus.online'} />\n      </SidebarButton>\n      <SidebarMenu expand={expand}>\n        <SidebarButton>\n          <UserLine name='Philip Molares' photo='/img/avatar.png' color='red' status={ActiveIndicatorStatus.INACTIVE} />\n        </SidebarButton>\n        <SidebarButton>\n          <UserLine\n            name='Tilman Vatteroth'\n            photo='/img/avatar.png'\n            color='blue'\n            status={ActiveIndicatorStatus.ACTIVE}\n          />\n        </SidebarButton>\n      </SidebarMenu>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useRef, useState } from 'react'\nimport { useClickAway } from 'react-use'\nimport { DeleteNoteSidebarEntry } from './delete-note-sidebar-entry'\nimport { DocumentInfoSidebarEntry } from './document-info-sidebar-entry'\nimport { ExportMenuSidebarMenu } from './export-menu-sidebar-menu'\nimport { ImportMenuSidebarMenu } from './import-menu-sidebar-menu'\nimport { PermissionsSidebarEntry } from './permissions-sidebar-entry'\nimport { PinNoteSidebarEntry } from './pin-note-sidebar-entry'\nimport { RevisionSidebarEntry } from './revision-sidebar-entry'\nimport { ShareSidebarEntry } from './share-sidebar-entry'\nimport './style/theme.scss'\nimport { DocumentSidebarMenuSelection } from './types'\nimport { UsersOnlineSidebarMenu } from './users-online-sidebar-menu/users-online-sidebar-menu'\n\nexport const Sidebar: React.FC = () => {\n  const sideBarRef = useRef<HTMLDivElement>(null)\n  const [selectedMenu, setSelectedMenu] = useState<DocumentSidebarMenuSelection>(DocumentSidebarMenuSelection.NONE)\n\n  useClickAway(sideBarRef, () => {\n    setSelectedMenu(DocumentSidebarMenuSelection.NONE)\n  })\n\n  const toggleValue = useCallback(\n    (toggleValue: DocumentSidebarMenuSelection): void => {\n      const newValue = selectedMenu === toggleValue ? DocumentSidebarMenuSelection.NONE : toggleValue\n      setSelectedMenu(newValue)\n    },\n    [selectedMenu]\n  )\n\n  const selectionIsNotNone = selectedMenu !== DocumentSidebarMenuSelection.NONE\n\n  return (\n    <div className='slide-sidebar'>\n      <div ref={sideBarRef} className={`sidebar-inner ${selectionIsNotNone ? 'show' : ''}`}>\n        <UsersOnlineSidebarMenu\n          menuId={DocumentSidebarMenuSelection.USERS_ONLINE}\n          selectedMenuId={selectedMenu}\n          onClick={toggleValue}\n        />\n        <DocumentInfoSidebarEntry hide={selectionIsNotNone} />\n        <RevisionSidebarEntry hide={selectionIsNotNone} />\n        <PermissionsSidebarEntry hide={selectionIsNotNone} />\n        <ImportMenuSidebarMenu\n          menuId={DocumentSidebarMenuSelection.IMPORT}\n          selectedMenuId={selectedMenu}\n          onClick={toggleValue}\n        />\n        <ExportMenuSidebarMenu\n          menuId={DocumentSidebarMenuSelection.EXPORT}\n          selectedMenuId={selectedMenu}\n          onClick={toggleValue}\n        />\n        <ShareSidebarEntry hide={selectionIsNotNone} />\n        <DeleteNoteSidebarEntry hide={selectionIsNotNone} />\n        <PinNoteSidebarEntry hide={selectionIsNotNone} />\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport './split-divider.scss'\n\nexport interface SplitDividerProps {\n  onGrab: () => void\n}\n\nexport const SplitDivider: React.FC<SplitDividerProps> = ({ onGrab }) => {\n  return <div onMouseDown={() => onGrab()} onTouchStart={() => onGrab()} className={'split-divider'} />\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { ReactElement, useCallback, useEffect, useRef, useState } from 'react'\nimport { ShowIf } from '../../common/show-if/show-if'\nimport { SplitDivider } from './split-divider/split-divider'\nimport './splitter.scss'\n\nexport interface SplitterProps {\n  left: ReactElement\n  right: ReactElement\n  additionalContainerClassName?: string\n  showLeft: boolean\n  showRight: boolean\n}\n\n/**\n * Checks if the given {@link Event} is a {@link MouseEvent}\n * @param event the event to check\n * @return {@code true} if the given event is a {@link MouseEvent}\n */\nconst isMouseEvent = (event: Event): event is MouseEvent => {\n  return (event as MouseEvent).buttons !== undefined\n}\n\nconst isLeftMouseButtonClicked = (mouseEvent: MouseEvent): boolean => {\n  return mouseEvent.buttons === 1\n}\n\n/**\n * Extracts the absolute horizontal position of the mouse or touch point from the event.\n * If no position could be found or\n *\n * @param moveEvent\n */\nconst extractHorizontalPosition = (moveEvent: MouseEvent | TouchEvent): number => {\n  if (isMouseEvent(moveEvent)) {\n    return moveEvent.pageX\n  } else {\n    return moveEvent.touches[0]?.pageX\n  }\n}\n\n/**\n * Creates a Left/Right splitter react component.\n *\n * @param additionalContainerClassName css classes that are added to the split container.\n * @param left the react component that should be shown on the left side.\n * @param right the react component that should be shown on the right side.\n * @param showLeft defines if the left component should be shown or hidden. Settings this prop will hide the component with css.\n * @param showRight defines if the right component should be shown or hidden. Settings this prop will hide the component with css.\n * @return the created component\n */\nexport const Splitter: React.FC<SplitterProps> = ({\n  additionalContainerClassName,\n  left,\n  right,\n  showLeft,\n  showRight\n}) => {\n  const [relativeSplitValue, setRelativeSplitValue] = useState(50)\n  const cappedRelativeSplitValue = Math.max(0, Math.min(100, showRight ? relativeSplitValue : 100))\n  const resizingInProgress = useRef(false)\n  const splitContainer = useRef<HTMLDivElement>(null)\n\n  /**\n   * Starts the splitter resizing\n   */\n  const onStartResizing = useCallback(() => {\n    resizingInProgress.current = true\n  }, [])\n\n  /**\n   * Stops the splitter resizing\n   */\n  const onStopResizing = useCallback(() => {\n    if (resizingInProgress.current) {\n      resizingInProgress.current = false\n    }\n  }, [])\n\n  /**\n   * Recalculates the panel split based on the absolute mouse/touch position.\n   *\n   * @param moveEvent is a {@link MouseEvent} or {@link TouchEvent} that got triggered.\n   */\n  const onMove = useCallback((moveEvent: MouseEvent | TouchEvent) => {\n    if (!resizingInProgress.current || !splitContainer.current) {\n      return\n    }\n    if (isMouseEvent(moveEvent) && !isLeftMouseButtonClicked(moveEvent)) {\n      resizingInProgress.current = false\n      moveEvent.preventDefault()\n      return undefined\n    }\n\n    const horizontalPosition = extractHorizontalPosition(moveEvent)\n    const horizontalPositionInSplitContainer = horizontalPosition - splitContainer.current.offsetLeft\n    const newRelativeSize = horizontalPositionInSplitContainer / splitContainer.current.clientWidth\n    setRelativeSplitValue(newRelativeSize * 100)\n    moveEvent.preventDefault()\n  }, [])\n\n  /**\n   * Registers and unregisters necessary event listeners on the body so you can use the split even if the mouse isn't moving over it.\n   */\n  useEffect(() => {\n    const moveHandler = onMove\n    const stopResizeHandler = onStopResizing\n    window.addEventListener('touchmove', moveHandler)\n    window.addEventListener('mousemove', moveHandler)\n    window.addEventListener('touchcancel', stopResizeHandler)\n    window.addEventListener('touchend', stopResizeHandler)\n    window.addEventListener('mouseup', stopResizeHandler)\n\n    return () => {\n      window.removeEventListener('touchmove', moveHandler)\n      window.removeEventListener('mousemove', moveHandler)\n      window.removeEventListener('touchcancel', stopResizeHandler)\n      window.removeEventListener('touchend', stopResizeHandler)\n      window.removeEventListener('mouseup', stopResizeHandler)\n    }\n  }, [resizingInProgress, onMove, onStopResizing])\n\n  return (\n    <div ref={splitContainer} className={`flex-fill flex-row d-flex ${additionalContainerClassName || ''}`}>\n      <div\n        className={`splitter left ${!showLeft ? 'd-none' : ''}`}\n        style={{ width: `calc(${cappedRelativeSplitValue}% - 5px)` }}>\n        {left}\n      </div>\n      <ShowIf condition={showLeft && showRight}>\n        <div className='splitter separator'>\n          <SplitDivider onGrab={onStartResizing} />\n        </div>\n      </ShowIf>\n      <div\n        className={`splitter right ${!showRight ? 'd-none' : ''}`}\n        style={{ width: `calc(100% - ${cappedRelativeSplitValue}%)` }}>\n        {right}\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { useEffect } from 'react'\nimport { DEFAULT_DURATION_IN_SECONDS, dispatchUiNotification } from '../../redux/ui-notifications/methods'\n\nconst localStorageKey = 'dontshowtestnotification'\n\nexport const useNotificationTest = (): void => {\n  useEffect(() => {\n    if (window.localStorage.getItem(localStorageKey)) {\n      return\n    }\n    console.debug('[Notifications] Dispatched test notification')\n    dispatchUiNotification('Notification-Test!', 'It Works!', DEFAULT_DURATION_IN_SECONDS, 'info-circle', [\n      {\n        label: \"Don't show again\",\n        onClick: () => {\n          window.localStorage.setItem(localStorageKey, '1')\n        }\n      }\n    ])\n  }, [])\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { useEffect } from 'react'\nimport { EditorMode } from '../app-bar/editor-view-mode'\nimport { setEditorMode } from '../../../redux/editor/methods'\nimport { useLocation } from 'react-router'\n\nexport const useEditorModeFromUrl = (): void => {\n  const { search } = useLocation()\n\n  useEffect(() => {\n    const requestedMode = search.substr(1)\n    const mode = Object.values(EditorMode).find((mode) => mode === requestedMode)\n    if (mode) {\n      setEditorMode(mode)\n    }\n  }, [search])\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport equal from 'fast-deep-equal'\nimport { useEffect, useRef } from 'react'\nimport { store } from '../../../redux'\nimport { useParams } from 'react-router-dom'\nimport { EditorPagePathParams } from '../editor-page'\nimport { HistoryEntry, HistoryEntryOrigin } from '../../../redux/history/types'\nimport { updateLocalHistoryEntry } from '../../../redux/history/methods'\nimport { useApplicationState } from '../../../hooks/common/use-application-state'\n\nexport const useUpdateLocalHistoryEntry = (updateReady: boolean): void => {\n  const { id } = useParams<EditorPagePathParams>()\n  const userExists = useApplicationState((state) => !!state.user)\n  const currentNoteTitle = useApplicationState((state) => state.noteDetails.noteTitle)\n  const currentNoteTags = useApplicationState((state) => state.noteDetails.frontmatter.tags)\n\n  const lastNoteTitle = useRef('')\n  const lastNoteTags = useRef<string[]>([])\n\n  useEffect(() => {\n    if (!updateReady || userExists) {\n      return\n    }\n    if (currentNoteTitle === lastNoteTitle.current && equal(currentNoteTags, lastNoteTags.current)) {\n      return\n    }\n    const history = store.getState().history\n    const entry: HistoryEntry = history.find((entry) => entry.identifier === id) ?? {\n      identifier: id,\n      title: '',\n      pinStatus: false,\n      lastVisited: '',\n      tags: [],\n      origin: HistoryEntryOrigin.LOCAL\n    }\n    if (entry.origin === HistoryEntryOrigin.REMOTE) {\n      return\n    }\n    entry.title = currentNoteTitle\n    entry.tags = currentNoteTags\n    entry.lastVisited = new Date().toISOString()\n    updateLocalHistoryEntry(id, entry)\n    lastNoteTitle.current = currentNoteTitle\n    lastNoteTags.current = currentNoteTags\n  }, [updateReady, id, userExists, currentNoteTitle, currentNoteTags])\n}\n"],"sourceRoot":""}