{"version":3,"sources":["components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-input.tsx","components/editor-page/editor-modals/max-length-warning-modal.tsx","components/editor-page/editor-pane/autocompletion/code-block.ts","components/editor-page/editor-pane/autocompletion/collapsable-block.ts","components/editor-page/editor-pane/autocompletion/container.ts","components/editor-page/editor-pane/tool-bar/emoji-picker/forkawesome.png","components/editor-page/editor-pane/tool-bar/emoji-picker/emoji-picker.tsx","components/editor-page/editor-pane/tool-bar/utils/emojiUtils.ts","components/editor-page/editor-pane/autocompletion/emoji.ts","components/editor-page/editor-pane/autocompletion/header.ts","components/editor-page/editor-pane/autocompletion/image.ts","components/editor-page/editor-pane/autocompletion/link-and-extra-tag.ts","components/editor-page/editor-pane/autocompletion/pdf.ts","components/editor-page/editor-pane/autocompletion/index.ts","components/common/number-range/number-range.ts","components/editor-page/editor-pane/tool-bar/utils/toolbarButtonUtils.ts","components/editor-page/editor-pane/key-map.ts","components/editor-page/editor-pane/status-bar/status-bar.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-property.ts","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-boolean-property.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-ligatures-select.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-number-property.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-select-property.tsx","components/editor-page/sidebar/types.ts","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preference-smart-paste-select.tsx","components/editor-page/editor-pane/tool-bar/editor-preferences/editor-preferences.tsx","components/editor-page/editor-pane/tool-bar/emoji-picker/emoji-picker-button.tsx","components/editor-page/editor-pane/tool-bar/table-picker/custom-table-size-modal.tsx","components/editor-page/editor-pane/tool-bar/table-picker/table-picker.tsx","components/editor-page/editor-pane/tool-bar/table-picker/table-picker-button.tsx","components/editor-page/sidebar/upload-input.tsx","components/editor-page/editor-pane/tool-bar/utils/upload-image-mimetypes.ts","components/editor-page/editor-pane/upload-handler.ts","components/editor-page/editor-pane/tool-bar/upload-image-button.tsx","components/editor-page/editor-pane/tool-bar/tool-bar.tsx","components/editor-page/editor-pane/tool-bar/utils/pasteHandlers.ts","components/editor-page/editor-pane/tool-bar/utils/codefenceDetection.ts","components/editor-page/editor-pane/table-extractor.ts","components/editor-page/editor-pane/editor-pane.tsx","components/editor-page/hooks/useViewModeShortcuts.ts","components/editor-page/sidebar/sidebar-button.tsx","components/editor-page/sidebar/delete-note-sidebar-entry.tsx","components/editor-page/document-bar/document-info/unitalic-bold-text.tsx","components/editor-page/document-bar/document-info/document-info-modal.tsx","components/editor-page/sidebar/document-info-sidebar-entry.tsx","components/editor-page/sidebar/export-markdown-sidebar-entry.tsx","components/editor-page/sidebar/sidebar-menu.tsx","components/editor-page/sidebar/export-menu-sidebar-menu.tsx","components/editor-page/document-bar/permissions/permission-group-entry.tsx","components/editor-page/sidebar/import-markdown-sidebar-entry.tsx","components/editor-page/sidebar/import-menu-sidebar-menu.tsx","components/common/cache/cache.ts","api/users/index.ts","components/editor-page/document-bar/permissions/permission-list.tsx","components/editor-page/sidebar/users-online-sidebar-menu/active-indicator.tsx","components/editor-page/document-bar/permissions/permission-modal.tsx","components/editor-page/sidebar/permissions-sidebar-entry.tsx","components/editor-page/sidebar/pin-note-sidebar-entry.tsx","api/revisions/index.ts","components/editor-page/document-bar/revisions/revision-modal-list-entry.tsx","components/editor-page/document-bar/revisions/revision-modal.tsx","components/editor-page/document-bar/revisions/utils.ts","components/editor-page/sidebar/revision-sidebar-entry.tsx","components/editor-page/document-bar/share/share-modal.tsx","components/editor-page/sidebar/share-sidebar-entry.tsx","components/editor-page/editor-page.tsx","components/editor-page/sidebar/users-online-sidebar-menu/user-line.tsx","components/editor-page/sidebar/users-online-sidebar-menu/users-online-sidebar-menu.tsx","components/editor-page/sidebar/sidebar.tsx","components/editor-page/splitter/split-divider/split-divider.tsx","components/editor-page/splitter/splitter.tsx","components/editor-page/use-notification-test.tsx","components/editor-page/hooks/useEditorModeFromUrl.ts","components/editor-page/hooks/useUpdateLocalHistoryEntry.ts"],"names":["EditorPreferenceInputType","MaxLengthWarningModal","show","onHide","maxLength","useTranslation","data-cy","titleI18nKey","closeButton","Modal","Body","Trans","i18nKey","values","className","Footer","Button","onClick","wordRegExp","allSupportedLanguages","CodeBlockHinter","hint","editor","then","hljs","Promise","resolve","searchTerm","findWordAtCursor","searchResult","exec","text","term","length","default","listLanguages","concat","suggestions","search","cursor","getCursor","list","map","suggestion","displayText","from","Pos","line","start","to","end","CollapsableBlockHinter","validAlertLevels","ContainerHinter","filter","startsWith","emojiPickerConfig","customEmoji","Object","keys","ForkAwesomeIcons","name","shortcodes","toLowerCase","url","forkawesomeIcon","category","dataSource","EmojiPicker","onEmojiSelected","onDismiss","darkModeEnabled","useIsDarkModeActivated","pickerContainerRef","useRef","pickerRef","useClickAway","useEffect","current","picker","Picker","shadowRoot","appendChild","style","document","createElement","textContent","twemojiStyle","remove","undefined","emojiClick","event","detail","addEventListener","removeEventListener","setAttribute","removeAttribute","ref","getEmojiShortCode","emoji","skinToneModifier","skins","skinTone","emojiIndex","Database","emojiWordRegex","findEmojiInDatabase","a","getTopFavoriteEmoji","getEmojiBySearchQuery","queryResult","console","error","convertEmojiEventToHint","emojiData","shortCode","render","parent","wrapper","innerHTML","unicode","generateEmojiHints","suggestionList","getPreferredSkinTone","emojiEventDetails","hints","o","EmojiHinter","allSupportedHeaders","allSupportedHeadersTextToInsert","HeaderHinter","indexOf","allSupportedImages","ImageHinter","allSupportedLinks","LinkAndExtraTagHinter","user","getUser","userName","DateTime","local","toFormat","PDFHinter","allowedChars","getLine","ch","test","charAt","slice","forEach","item","push","allHinters","createNumberRangeArray","Array","makeSelectionBold","wrapTextWith","makeSelectionItalic","strikeThroughSelection","underlineSelection","markSelection","symbol","endSymbol","getSelection","ranges","listSelections","range","empty","selection","getRange","replaceRange","head","anchor","setSelections","wrapTextWithOrJustPut","lineNumber","replacement","insertOnStartOfLines","lines","split","join","changeLines","replaceFunction","createList","listMark","i","addLink","prefix","insertAtCursor","f10","setOption","getOption","esc","keyMapName","substr","CodeMirror","Pass","suppressKey","tab","match","spaces","getSelections","execCommand","pos","replaceSelection","defaultKeyMap","isMac","F9","F10","Esc","Enter","Tab","Home","End","defaultState","position","selectedColumns","selectedLines","linesInDocument","charactersInDocument","remainingCharacters","createStatusInfo","maxDocumentLength","getValue","lineCount","StatusBar","t","getLengthTooltip","useMemo","exceeded","remaining","columns","condition","count","title","EditorPreferenceProperty","EditorPreferenceInput","property","type","onChange","value","children","Form","Group","controlId","Label","NUMBER","Control","as","size","EditorPreferenceBooleanProperty","preference","useSelector","state","editorConfig","preferences","toString","equal","selectItem","useCallback","selectedItem","target","mergeEditorPreferences","i18nPrefix","SELECT","EditorPreferenceLigaturesSelect","ligaturesEnabled","Boolean","ligatures","saveLigatures","ligaturesActivated","setEditorLigatures","BOOLEAN","EditorPreferenceNumberProperty","Number","parseInt","DocumentSidebarMenuSelection","EditorPreferenceSelectProperty","selections","EditorPreferenceSmartPasteSelect","smartPasteEnabled","smartPaste","saveSmartPaste","smartPasteActivated","setEditorSmartPaste","EditorPreferences","useState","showModal","setShowModal","indentWithTabs","variant","icon","ListGroup","Item","THEME","KEYMAP","INDENT_WITH_TABS","INDENT_UNIT","alert","SPELL_CHECK","EmojiPickerButton","showEmojiPicker","setShowEmojiPicker","addEmoji","old","CustomTableSizeModal","onTablePicked","rows","tableSize","setTableSize","min","placeholder","isInvalid","currentTarget","isNaN","fixedWidth","ModalFooter","disabled","TablePicker","containerRef","showDialog","setShowDialog","role","cols","row","col","onMouseEnter","TablePickerButton","showTablePicker","setShowTablePicker","rowArray","colArray","divider","body","table","addTable","UploadInput","onLoad","acceptedFiles","onClickRef","props","fileInputReference","fileInput","files","file","catch","click","accept","supportedMimeTypes","supportedMimeTypesJoined","handleUpload","mimeType","includes","uploadPlaceholder","i18n","fileName","noteId","store","getState","noteDetails","id","uploadFile","link","getCorrectSyntaxForLink","UploadImageButton","clickRef","buttonClick","onUploadImage","ToolBar","ButtonToolbar","ButtonGroup","subscriptSelection","superscriptSelection","addHeaderLevel","addCodeFences","addQuotes","addList","j","addOrderedList","addTaskList","addImage","addLine","addCollapsableBlock","addComment","handleTablePaste","pasteText","clipboardData","getData","codefenceCount","getDoc","isCursorInCodefence","trim","every","tabsPerLines","isTable","preventDefault","markdownTable","pasteData","tableCells","reduce","cellsInRow","index","arrayMaxRows","arrayMaxColumns","Math","max","headRow1","headRow2","repeat","convertClipboardTableToMarkdown","hinter","showHint","completeSingle","completeOnSingleClick","alignWithWord","EditorPane","onContentChange","content","scrollState","onScroll","onMakeScrollSource","config","showMaxLengthWarning","setShowMaxLengthWarning","maxLengthWarningAlreadyShown","setEditor","statusBarInfo","setStatusBarInfo","editorPreferences","lastScrollPosition","editorScroll","setEditorScroll","onEditorScroll","data","onPaste","pasteEditor","handleFilePaste","lineAtHeight","top","startYOfLine","heightAtLine","lineInfo","heightOfLine","handle","height","percentageRaw","percentage","floor","firstLineInView","scrolledPercentage","newPositionRaw","newPosition","scrollTo","onBeforeChange","onEditorDidMount","mountedEditor","onCursorActivity","editorWithActivity","onDrop","dropEditor","pageX","pageY","dataTransfer","left","newCursor","coordsChar","setCursor","onMaxLengthHide","codeMirrorOptions","mode","viewportMargin","styleActiveLine","lineNumbers","lineWrapping","showCursorWhenSelecting","highlightSelectionMatches","inputStyle","matchBrackets","autoCloseBrackets","matchTags","bothTags","autoCloseTags","foldGutter","gutters","extraKeys","flattenSpans","addModeClass","autoRefresh","options","editorDidMount","shortcutHandler","ctrlKey","altKey","key","setEditorMode","EditorMode","BOTH","PREVIEW","EDITOR","SidebarButton","buttonRef","hide","DeleteNoteSidebarEntry","onConfirm","deletionButtonI18nKey","UnitalicBoldText","DocumentInfoModal","DocumentInfoLineWithTimeMode","CREATED","time","minus","days","profileImageSrc","EDITED","minutes","DocumentInfoSidebarEntry","ExportMarkdownSidebarEntry","markdownContent","useNoteMarkdownContent","sanitized","sanitize","noteTitle","download","SidebarMenu","expand","GroupMode","ExportMenuSidebarMenu","menuId","selectedMenuId","NONE","onClickHandler","dir","href","links","faq","rel","ImportMarkdownSidebarEntry","onImportMarkdown","reject","fileReader","FileReader","newContent","result","setNoteMarkdownContent","readAsText","ImportMenuSidebarMenu","Cache","lifetime","maxEntries","entryLifetime","Map","Error","this","has","entry","get","entryCreated","Date","now","delete","next","set","cache","getUserById","userid","fetch","getApiUrl","defaultFetchConfig","response","expectResponseCode","json","userData","put","EditMode","PermissionGroupEntry","editMode","onChangeEditMode","ToggleButtonGroup","ToggleButton","VIEW","EDIT","ActiveIndicatorStatus","PermissionList","identifier","changeEditMode","removeEntry","createEntry","editI18nKey","viewI18nKey","removeI18nKey","addI18nKey","newEntry","setNewEntry","addEntry","canEdit","onSubmit","InputGroup","FormControl","aria-label","permissionsApiResponse","owner","sharedTo","username","sharedToGroup","PermissionModal","setError","userList","setUserList","setOwner","allUserPermissions","setAllUserPermissions","allLoggedInUserPermissions","setAllLoggedInUserPermissions","photo","shareUser","sharedGroup","Alert","userId","PermissionsSidebarEntry","PinNoteSidebarEntry","useParams","history","isPinned","find","pinStatus","onPinClicked","toggleHistoryEntryPinning","showErrorNotification","revisionCache","getRevision","timestamp","cacheKey","revisionData","getAllRevisions","RevisionModalListEntry","active","revision","revisionAuthorListMap","fromMillis","showName","additionalClasses","RevisionModal","revisions","setRevisions","selectedRevisionTimestamp","setSelectedRevisionTimestamp","selectedRevision","setSelectedRevision","fetchedRevisions","authorData","authors","users","author","getUserDataForRevision","fetchedRevision","Row","Col","lg","revisionIndex","oldValue","newValue","splitView","compareMethod","DiffMethod","WORDS","useDarkTheme","window","RevisionSidebarEntry","ShareModal","noteFrontmatter","frontmatter","editorMode","baseUrl","useFrontendBaseUrl","nativeShareButton","NoteType","SLIDE","ShareSidebarEntry","ScrollSource","ActiveIndicator","status","UserLine","color","borderLeftColor","UsersOnlineSidebarMenu","counter","setProperty","INACTIVE","ACTIVE","Sidebar","sideBarRef","selectedMenu","setSelectedMenu","toggleValue","selectionIsNotNone","USERS_ONLINE","IMPORT","EXPORT","SplitDivider","onGrab","onMouseDown","onTouchStart","Splitter","containerClassName","right","showLeft","showRight","setSplit","realSplit","doResizing","setDoResizing","splitContainer","recalculateSize","mouseXPosition","newSize","offsetLeft","clientWidth","stopResizing","onMouseMove","mouseEvent","onTouchMove","touchEvent","touches","onMouseUp","onTouchEnd","flexBasis","localStorageKey","EditorPage","scrollSource","editorSyncScroll","syncScroll","editorScrollState","rendererScrollState","setScrollState","onMarkdownRendererScroll","newScrollState","RENDERER","useApplyDarkMode","useDocumentTitleWithNoteTitle","useLocation","requestedMode","useEditorModeFromUrl","useLoadNoteFromServer","loading","updateReady","userExists","currentNoteTitle","currentNoteTags","tags","lastNoteTitle","lastNoteTags","lastVisited","origin","HistoryEntryOrigin","LOCAL","REMOTE","toISOString","updateLocalHistoryEntry","useUpdateLocalHistoryEntry","setRendererToScrollSource","setEditorToScrollSource","localStorage","getItem","debug","dispatchUiNotification","DEFAULT_DURATION_IN_SECONDS","label","setItem","leftPane","rightPane","frameClasses","onFirstHeadingChange","updateNoteTitleByFirstHeading","onTaskCheckedChange","SetCheckboxInMarkdownContent","onFrontmatterChange","setNoteFrontmatter","rendererType","RendererType","DOCUMENT","AppBarMode","ErrorWhileLoadingNoteAlert","LoadingNoteAlert"],"mappings":"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","file":"static/js/editor.15ce3f9d.chunk.js","sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React from 'react'\nimport { Form } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\n\nexport enum EditorPreferenceInputType {\n  SELECT,\n  BOOLEAN,\n  NUMBER\n}\n\nexport interface EditorPreferenceInputProps {\n  property: string\n  type: EditorPreferenceInputType\n  onChange: React.ChangeEventHandler<HTMLSelectElement>\n  value?: string | number | string[]\n}\n\nexport const EditorPreferenceInput: React.FC<EditorPreferenceInputProps> = ({ property, type, onChange, value, children }) => {\n  useTranslation()\n  return (\n    <Form.Group controlId={ `editor-pref-${ property }` }>\n      <Form.Label>\n        <Trans\n          i18nKey={ `editor.modal.preferences.${ property }${ type === EditorPreferenceInputType.NUMBER ? '' : '.label' }` }/>\n      </Form.Label>\n      <Form.Control\n        as={ type === EditorPreferenceInputType.NUMBER ? 'input' : 'select' }\n        size='sm'\n        value={ value }\n        onChange={ onChange }\n        type={ type === EditorPreferenceInputType.NUMBER ? 'number' : '' }>\n        { children }\n      </Form.Control>\n    </Form.Group>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { Button, Modal } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { CommonModal } from '../../common/modals/common-modal'\n\nexport interface MaxLengthWarningModalProps {\n  show: boolean\n  onHide: () => void\n  maxLength: number\n}\n\nexport const MaxLengthWarningModal: React.FC<MaxLengthWarningModalProps> = ({ show, onHide, maxLength }) => {\n  useTranslation()\n\n  return (\n    <CommonModal data-cy={ 'limitReachedModal' } show={ show } onHide={ onHide }\n                 titleI18nKey={ 'editor.error.limitReached.title' } closeButton={ true }>\n      <Modal.Body>\n        <Trans i18nKey={ 'editor.error.limitReached.description' } values={ { maxLength } }/>\n        <strong className='mt-2 d-block'><Trans i18nKey={ 'editor.error.limitReached.advice' }/></strong>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={ onHide }><Trans i18nKey={ 'common.close' }/></Button>\n      </Modal.Footer>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, Hinter, search } from './index'\n\nconst wordRegExp = /^```((\\w|-|_|\\+)*)$/\nlet allSupportedLanguages: string[] = []\n\nconst codeBlockHint = (editor: Editor): Promise<Hints | null> => {\n  return import(/* webpackChunkName: \"highlight.js\" */ '../../../common/hljs/hljs').then((hljs) =>\n    new Promise((resolve) => {\n      const searchTerm = findWordAtCursor(editor)\n      const searchResult = wordRegExp.exec(searchTerm.text)\n      if (searchResult === null) {\n        resolve(null)\n        return\n      }\n      const term = searchResult[1]\n      if (allSupportedLanguages.length === 0) {\n        allSupportedLanguages = hljs.default.listLanguages()\n                                    .concat('csv', 'flow', 'html', 'js', 'markmap', 'abc', 'graphviz', 'mermaid', 'vega-lite')\n      }\n      const suggestions = search(term, allSupportedLanguages)\n      const cursor = editor.getCursor()\n      if (!suggestions) {\n        resolve(null)\n      } else {\n        resolve({\n          list: suggestions.map((suggestion: string): Hint => ({\n            text: '```' + suggestion + '\\n\\n```\\n',\n            displayText: suggestion\n          })),\n          from: Pos(cursor.line, searchTerm.start),\n          to: Pos(cursor.line, searchTerm.end)\n        })\n      }\n    }))\n}\n\nexport const CodeBlockHinter: Hinter = {\n  wordRegExp,\n  hint: codeBlockHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^(<d(?:e|et|eta|etai|etail|etails)?)$/\n\nconst collapsableBlockHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const suggestions = ['<details>\\n  <summary>Toggle label</summary>\\n  Toggled content\\n</details>']\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map((suggestion: string): Hint => ({\n          text: suggestion\n        })),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end + 1)\n      })\n    }\n  })\n}\n\nexport const CollapsableBlockHinter: Hinter = {\n  wordRegExp,\n  hint: collapsableBlockHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { validAlertLevels } from '../../../markdown-renderer/markdown-it-plugins/alert-container'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^:::((\\w|-|_|\\+)*)$/\nconst spoilerSuggestion: Hint = {\n  text: ':::spoiler Toggle label\\nToggled content\\n::: \\n',\n  displayText: 'spoiler'\n}\nconst suggestions = validAlertLevels.map((suggestion: string): Hint => ({\n  text: ':::' + suggestion + '\\n\\n::: \\n',\n  displayText: suggestion\n}))\n                                    .concat(spoilerSuggestion)\n\nconst containerHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.filter((suggestion) => suggestion.displayText?.startsWith(searchResult[1])),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end)\n      })\n    }\n  })\n}\n\nexport const ContainerHinter: Hinter = {\n  wordRegExp,\n  hint: containerHint\n}\n","export default __webpack_public_path__ + \"static/media/forkawesome.da7d0f53.png\";","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Picker } from 'emoji-picker-element'\nimport { CustomEmoji, EmojiClickEvent, EmojiClickEventDetail } from 'emoji-picker-element/shared'\nimport React, { useEffect, useRef } from 'react'\nimport { useClickAway } from 'react-use'\nimport { useIsDarkModeActivated } from '../../../../../hooks/common/use-is-dark-mode-activated'\nimport './emoji-picker.scss'\nimport forkawesomeIcon from './forkawesome.png'\nimport { ForkAwesomeIcons } from './icon-names'\n\nexport interface EmojiPickerProps {\n  show: boolean\n  onEmojiSelected: (emoji: EmojiClickEventDetail) => void\n  onDismiss: () => void\n}\n\nexport const customEmojis: CustomEmoji[] = Object.keys(ForkAwesomeIcons)\n                                                 .map((name) => ({\n                                                   name: `fa-${ name }`,\n                                                   shortcodes: [`fa-${ name.toLowerCase() }`],\n                                                   url: forkawesomeIcon,\n                                                   category: 'ForkAwesome'\n                                                 }))\n\nexport const EMOJI_DATA_PATH = '/static/js/emoji-data.json'\n\nexport const emojiPickerConfig = {\n  customEmoji: customEmojis,\n  dataSource: EMOJI_DATA_PATH\n}\n\nconst twemojiStyle = (): HTMLStyleElement => {\n  const style = document.createElement('style')\n  style.textContent = 'section.picker { --font-family: \"Twemoji Mozilla\" !important; }'\n  return style\n}\n\nexport const EmojiPicker: React.FC<EmojiPickerProps> = ({ show, onEmojiSelected, onDismiss }) => {\n  const darkModeEnabled = useIsDarkModeActivated()\n  const pickerContainerRef = useRef<HTMLDivElement>(null)\n  const pickerRef = useRef<Picker>()\n\n  useClickAway(pickerContainerRef, () => {\n    onDismiss()\n  })\n\n  useEffect(() => {\n    if (!pickerContainerRef.current) {\n      return\n    }\n    const picker = new Picker(emojiPickerConfig)\n    if (picker.shadowRoot) {\n      picker.shadowRoot.appendChild(twemojiStyle())\n    }\n    pickerContainerRef.current.appendChild(picker)\n\n    pickerRef.current = picker\n    return () => {\n      picker.remove()\n      pickerRef.current = undefined\n    }\n  }, [])\n\n  useEffect(() => {\n    if (!pickerRef.current) {\n      return\n    }\n    const emojiClick = (event: EmojiClickEvent): void => {\n      onEmojiSelected(event.detail)\n    }\n    const picker = pickerRef.current\n    picker.addEventListener('emoji-click', emojiClick, true)\n    return () => {\n      picker.removeEventListener('emoji-click', emojiClick, true)\n    }\n  }, [onEmojiSelected])\n\n  useEffect(() => {\n    if (!pickerRef.current) {\n      return\n    }\n    pickerRef.current.setAttribute('class', darkModeEnabled ? 'dark' : 'light')\n    if (darkModeEnabled) {\n      pickerRef.current.removeAttribute('style')\n    } else {\n      pickerRef.current.setAttribute('style', '--background: #f8f9fa')\n    }\n  }, [darkModeEnabled])\n\n  return (\n    <div className={ `position-absolute emoji-picker-container ${ !show ? 'd-none' : '' }` }\n         ref={ pickerContainerRef }/>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { EmojiClickEventDetail, NativeEmoji } from 'emoji-picker-element/shared'\n\nexport const getEmojiIcon = (emoji: EmojiClickEventDetail): string => {\n  if (emoji.unicode) {\n    return emoji.unicode\n  }\n  if (emoji.name) {\n    // noinspection CheckTagEmptyBody\n    return `<i class=\"fa ${ emoji.name }\"></i>`\n  }\n  return ''\n}\n\nexport const getEmojiShortCode = (emoji: EmojiClickEventDetail): string | undefined => {\n  if (!emoji.emoji.shortcodes) {\n    return undefined\n  }\n  let skinToneModifier = ''\n  if ((emoji.emoji as NativeEmoji).skins && emoji.skinTone !== 0) {\n    skinToneModifier = `:skin-tone-${ emoji.skinTone as number }:`\n  }\n  return `:${ emoji.emoji.shortcodes[0] }:${ skinToneModifier }`\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport Database from 'emoji-picker-element/database'\nimport { Emoji, EmojiClickEventDetail, NativeEmoji } from 'emoji-picker-element/shared'\nimport { emojiPickerConfig } from '../tool-bar/emoji-picker/emoji-picker'\nimport { getEmojiIcon, getEmojiShortCode } from '../tool-bar/utils/emojiUtils'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst emojiIndex = new Database(emojiPickerConfig)\nconst emojiWordRegex = /^:([\\w-_+]*)$/\n\nconst findEmojiInDatabase = async (emojiIndex: Database, term: string): Promise<Emoji[]> => {\n  try {\n    if (term === '') {\n      return await emojiIndex.getTopFavoriteEmoji(7)\n    }\n    const queryResult = await emojiIndex.getEmojiBySearchQuery(term)\n    if (queryResult.length === 0) {\n      return await emojiIndex.getTopFavoriteEmoji(7)\n    } else {\n      return queryResult\n    }\n  } catch (error) {\n    console.error(error)\n    return []\n  }\n}\n\nconst convertEmojiEventToHint = (emojiData: EmojiClickEventDetail): Hint | undefined => {\n  const shortCode = getEmojiShortCode(emojiData)\n  if (!shortCode) {\n    return undefined\n  }\n  return {\n    text: shortCode,\n    render: (parent: HTMLLIElement) => {\n      const wrapper = document.createElement('div')\n      wrapper.innerHTML = `${ getEmojiIcon(emojiData) }   ${ shortCode }`\n      parent.appendChild(wrapper)\n    }\n  }\n}\n\nconst generateEmojiHints = async (editor: Editor): Promise<Hints | null> => {\n  const searchTerm = findWordAtCursor(editor)\n  const searchResult = emojiWordRegex.exec(searchTerm.text)\n  if (searchResult === null) {\n    return null\n  }\n  const suggestionList: Emoji[] = await findEmojiInDatabase(emojiIndex, searchResult[1])\n  const cursor = editor.getCursor()\n  const skinTone = await emojiIndex.getPreferredSkinTone()\n  const emojiEventDetails: EmojiClickEventDetail[] = suggestionList\n    .filter(emoji => !!emoji.shortcodes)\n    .map((emoji) => ({\n      emoji,\n      skinTone: skinTone,\n      unicode: ((emoji as NativeEmoji).unicode ? (emoji as NativeEmoji).unicode : undefined),\n      name: emoji.name\n    }))\n\n  const hints = emojiEventDetails\n    .map(convertEmojiEventToHint)\n    .filter(o => !!o) as Hint[]\n  return {\n    list: hints,\n    from: Pos(cursor.line, searchTerm.start),\n    to: Pos(cursor.line, searchTerm.end)\n  }\n}\n\nexport const EmojiHinter: Hinter = {\n  wordRegExp: emojiWordRegex,\n  hint: generateEmojiHints\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, Hinter, search } from './index'\n\nconst wordRegExp = /^(\\s{0,3})(#{1,6})$/\nconst allSupportedHeaders = ['# h1', '## h2', '### h3', '#### h4', '##### h5', '###### h6', '###### tags: `example`']\nconst allSupportedHeadersTextToInsert = ['# ', '## ', '### ', '#### ', '##### ', '###### ', '###### tags: `example`']\n\nconst headerHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const term = searchResult[0]\n    if (!term) {\n      resolve(null)\n      return\n    }\n    const suggestions = search(term, allSupportedHeaders)\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map((suggestion): Hint => ({\n          text: allSupportedHeadersTextToInsert[allSupportedHeaders.indexOf(suggestion)],\n          displayText: suggestion\n        })),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end)\n      })\n    }\n  })\n}\n\nexport const HeaderHinter: Hinter = {\n  wordRegExp,\n  hint: headerHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^(!(\\[.*])?)$/\nconst allSupportedImages = [\n  '![image alt](https:// \"title\")',\n  '![image alt](https:// \"title\" =WidthxHeight)',\n  '![image alt][reference]'\n]\n\nconst imageHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const suggestions = allSupportedImages\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map((suggestion: string): Hint => ({\n          text: suggestion\n        })),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end + 1)\n      })\n    }\n  })\n}\n\nexport const ImageHinter: Hinter = {\n  wordRegExp,\n  hint: imageHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { DateTime } from 'luxon'\nimport { getUser } from '../../../../redux/user/methods'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^(\\[(.*])?)$/\nconst allSupportedLinks = [\n  '[link text](https:// \"title\")',\n  '[reference]: https:// \"title\"',\n  '[link text][reference]',\n  '[reference]',\n  '[^footnote reference]: https://',\n  '[^footnote reference]',\n  '^[inline footnote]',\n  '[TOC]',\n  'name',\n  'time',\n  '[color=#FFFFFF]'\n\n]\n\nconst linkAndExtraTagHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const suggestions = allSupportedLinks\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map((suggestion: string): Hint => {\n          const user = getUser()\n          const userName = user ? user.name : 'Anonymous'\n          switch (suggestion) {\n            case 'name':\n              // Get the user when a completion happens, this prevents to early calls resulting in 'Anonymous'\n              return {\n                text: `[name=${ userName }]`\n              }\n            case 'time':\n              // show the current time when the autocompletion is opened and not when the function is loaded\n              return {\n                text: `[time=${ DateTime.local()\n                                        .toFormat('DDDD T') }]`\n              }\n            default:\n              return {\n                text: suggestion + ' ',\n                displayText: suggestion\n              }\n          }\n        }),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end + 1)\n      })\n    }\n  })\n}\n\nexport const LinkAndExtraTagHinter: Hinter = {\n  wordRegExp,\n  hint: linkAndExtraTagHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hint, Hints, Pos } from 'codemirror'\nimport { findWordAtCursor, Hinter } from './index'\n\nconst wordRegExp = /^({[%}]?)$/\n\nconst pdfHint = (editor: Editor): Promise<Hints | null> => {\n  return new Promise((resolve) => {\n    const searchTerm = findWordAtCursor(editor)\n    const searchResult = wordRegExp.exec(searchTerm.text)\n    if (searchResult === null) {\n      resolve(null)\n      return\n    }\n    const suggestions = ['{%pdf https:// %}']\n    const cursor = editor.getCursor()\n    if (!suggestions) {\n      resolve(null)\n    } else {\n      resolve({\n        list: suggestions.map((suggestion: string): Hint => ({\n          text: suggestion\n        })),\n        from: Pos(cursor.line, searchTerm.start),\n        to: Pos(cursor.line, searchTerm.end + 1)\n      })\n    }\n  })\n}\n\nexport const PDFHinter: Hinter = {\n  wordRegExp,\n  hint: pdfHint\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Hints } from 'codemirror'\nimport { CodeBlockHinter } from './code-block'\nimport { CollapsableBlockHinter } from './collapsable-block'\nimport { ContainerHinter } from './container'\nimport { EmojiHinter } from './emoji'\nimport { HeaderHinter } from './header'\nimport { ImageHinter } from './image'\nimport { LinkAndExtraTagHinter } from './link-and-extra-tag'\nimport { PDFHinter } from './pdf'\n\ninterface findWordAtCursorResponse {\n  start: number,\n  end: number,\n  text: string\n}\n\nexport interface Hinter {\n  wordRegExp: RegExp,\n  hint: (editor: Editor) => Promise<Hints | null>\n}\n\nconst allowedChars = /[^\\s]/\n\nexport const findWordAtCursor = (editor: Editor): findWordAtCursorResponse => {\n  const cursor = editor.getCursor()\n  const line = editor.getLine(cursor.line)\n  let start = cursor.ch\n  let end = cursor.ch\n  while (start && allowedChars.test(line.charAt(start - 1))) {\n    --start\n  }\n  while (end < line.length && allowedChars.test(line.charAt(end))) {\n    ++end\n  }\n\n  return {\n    text: line.slice(start, end)\n              .toLowerCase(),\n    start: start,\n    end: end\n  }\n}\n\nexport const search = (term: string, list: string[]): string[] => {\n  const suggestions: string[] = []\n  list.forEach(item => {\n    if (item.toLowerCase()\n            .startsWith(term.toLowerCase())) {\n      suggestions.push(item)\n    }\n  })\n  return suggestions.slice(0, 7)\n}\n\nexport const allHinters: Hinter[] = [\n  CodeBlockHinter,\n  ContainerHinter,\n  EmojiHinter,\n  HeaderHinter,\n  ImageHinter,\n  LinkAndExtraTagHinter,\n  PDFHinter,\n  CollapsableBlockHinter\n]\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport const createNumberRangeArray = (length: number): number[] => {\n  return Array.from(Array(length)\n    .keys())\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport { EmojiClickEventDetail } from 'emoji-picker-element/shared'\nimport { createNumberRangeArray } from '../../../../common/number-range/number-range'\nimport { getEmojiShortCode } from './emojiUtils'\n\nexport const makeSelectionBold = (editor: Editor): void => wrapTextWith(editor, '**')\nexport const makeSelectionItalic = (editor: Editor): void => wrapTextWith(editor, '*')\nexport const strikeThroughSelection = (editor: Editor): void => wrapTextWith(editor, '~~')\nexport const underlineSelection = (editor: Editor): void => wrapTextWith(editor, '++')\nexport const subscriptSelection = (editor: Editor): void => wrapTextWith(editor, '~')\nexport const superscriptSelection = (editor: Editor): void => wrapTextWith(editor, '^')\nexport const markSelection = (editor: Editor): void => wrapTextWith(editor, '==')\n\nexport const addHeaderLevel = (editor: Editor): void => changeLines(editor, line => line.startsWith('#') ? `#${ line }` : `# ${ line }`)\nexport const addCodeFences = (editor: Editor): void => wrapTextWithOrJustPut(editor, '```\\n', '\\n```')\nexport const addQuotes = (editor: Editor): void => insertOnStartOfLines(editor, '> ')\n\nexport const addList = (editor: Editor): void => createList(editor, () => '- ')\nexport const addOrderedList = (editor: Editor): void => createList(editor, j => `${ j }. `)\nexport const addTaskList = (editor: Editor): void => createList(editor, () => '- [ ] ')\n\nexport const addImage = (editor: Editor): void => addLink(editor, '!')\n\nexport const addLine = (editor: Editor): void => changeLines(editor, line => `${ line }\\n----`)\nexport const addCollapsableBlock = (editor: Editor): void => changeLines(editor, line => `${ line }\\n:::spoiler Toggle label\\n  Toggled content\\n:::`)\nexport const addComment = (editor: Editor): void => changeLines(editor, line => `${ line }\\n> []`)\nexport const addTable = (editor: Editor, rows: number, columns: number): void => {\n  const rowArray = createNumberRangeArray(rows)\n  const colArray = createNumberRangeArray(columns)\n    .map(col => col + 1)\n  const head = '|  # ' + colArray.join(' |  # ') + ' |'\n  const divider = '| ' + colArray.map(() => '----')\n                                 .join(' | ') + ' |'\n  const body = rowArray.map(() => '| ' + colArray.map(() => 'Text')\n                                                 .join(' | ') + ' |')\n                       .join('\\n')\n  const table = `${ head }\\n${ divider }\\n${ body }`\n  changeLines(editor, line => `${ line }\\n${ table }`)\n}\n\nexport const addEmoji = (emoji: EmojiClickEventDetail, editor: Editor): void => {\n  const shortCode = getEmojiShortCode(emoji)\n  if (shortCode) {\n    insertAtCursor(editor, shortCode)\n  }\n}\n\nexport const wrapTextWith = (editor: Editor, symbol: string, endSymbol?: string): void => {\n  if (!editor.getSelection()) {\n    return\n  }\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    if (range.empty()) {\n      continue\n    }\n    const from = range.from()\n    const to = range.to()\n\n    const selection = editor.getRange(from, to)\n    editor.replaceRange(symbol + selection + (endSymbol || symbol), from, to, '+input')\n    range.head.ch += symbol.length\n    range.anchor.ch += endSymbol ? endSymbol.length : symbol.length\n  }\n  editor.setSelections(ranges)\n}\n\nconst wrapTextWithOrJustPut = (editor: Editor, symbol: string, endSymbol?: string): void => {\n  if (!editor.getSelection()) {\n    const cursor = editor.getCursor()\n    const lineNumber = cursor.line\n    const line = editor.getLine(lineNumber)\n    const replacement = /\\s*\\\\n/.exec(line) ? `${ symbol }${ endSymbol ?? '' }` : `${ symbol }${ line }${ endSymbol ?? '' }`\n    editor.replaceRange(replacement,\n      { line: cursor.line, ch: 0 },\n      { line: cursor.line, ch: line.length },\n      '+input')\n  }\n  wrapTextWith(editor, symbol, endSymbol ?? symbol)\n}\n\nexport const insertOnStartOfLines = (editor: Editor, symbol: string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const from = range.empty() ? { line: cursor.line, ch: 0 } : range.from()\n    const to = range.empty() ? { line: cursor.line, ch: editor.getLine(cursor.line).length } : range.to()\n    const selection = editor.getRange(from, to)\n    const lines = selection.split('\\n')\n    editor.replaceRange(lines.map(line => `${ symbol }${ line }`)\n                             .join('\\n'), from, to, '+input')\n  }\n  editor.setSelections(ranges)\n}\n\nexport const changeLines = (editor: Editor, replaceFunction: (line: string) => string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const lineNumber = range.empty() ? cursor.line : range.from().line\n    const line = editor.getLine(lineNumber)\n    editor.replaceRange(replaceFunction(line), { line: lineNumber, ch: 0 }, {\n      line: lineNumber,\n      ch: line.length\n    }, '+input')\n  }\n  editor.setSelections(ranges)\n}\n\nexport const createList = (editor: Editor, listMark: (i: number) => string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const from = range.empty() ? { line: cursor.line, ch: 0 } : range.from()\n    const to = range.empty() ? { line: cursor.line, ch: editor.getLine(cursor.line).length } : range.to()\n\n    const selection = editor.getRange(from, to)\n    const lines = selection.split('\\n')\n    editor.replaceRange(lines.map((line, i) => `${ listMark(i + 1) }${ line }`)\n                             .join('\\n'), from, to, '+input')\n  }\n  editor.setSelections(ranges)\n}\n\nexport const addLink = (editor: Editor, prefix?: string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const from = range.empty() ? { line: cursor.line, ch: cursor.ch } : range.from()\n    const to = range.empty() ? { line: cursor.line, ch: cursor.ch } : range.to()\n    const selection = editor.getRange(from, to)\n    const linkRegex = /^(?:https?|ftp|mailto):/\n    if (linkRegex.exec(selection)) {\n      editor.replaceRange(`${ prefix || '' }[](${ selection })`, from, to, '+input')\n    } else {\n      editor.replaceRange(`${ prefix || '' }[${ selection }](https://)`, from, to, '+input')\n    }\n  }\n}\n\nexport const insertAtCursor = (editor: Editor, text: string): void => {\n  const cursor = editor.getCursor()\n  const ranges = editor.listSelections()\n  for (const range of ranges) {\n    const from = range.empty() ? { line: cursor.line, ch: cursor.ch } : range.from()\n    const to = range.empty() ? { line: cursor.line, ch: cursor.ch } : range.to()\n    editor.replaceRange(`${ text }`, from, to, '+input')\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport CodeMirror, { Editor, KeyMap, Pass } from 'codemirror'\nimport { isMac } from '../utils'\nimport {\n  addLink,\n  makeSelectionBold,\n  makeSelectionItalic,\n  markSelection,\n  strikeThroughSelection,\n  underlineSelection\n} from './tool-bar/utils/toolbarButtonUtils'\n\nconst isVim = (keyMapName?: string) => (keyMapName?.substr(0, 3) === 'vim')\n\nconst f10 = (editor: Editor): void | typeof Pass => editor.setOption('fullScreen', !editor.getOption('fullScreen'))\nconst esc = (editor: Editor): void | typeof Pass => {\n  if (editor.getOption('fullScreen') && !isVim(editor.getOption('keyMap'))) {\n    editor.setOption('fullScreen', false)\n  } else {\n    return CodeMirror.Pass\n  }\n}\nconst suppressKey = (): undefined => undefined\nconst tab = (editor: Editor) => {\n  const tab = '\\t'\n\n  // contruct x length spaces\n  const spaces = Array((editor.getOption('indentUnit') ?? 0) + 1)\n    .join(' ')\n\n  // auto indent whole line when in list or blockquote\n  const cursor = editor.getCursor()\n  const line = editor.getLine(cursor.line)\n\n  // this regex match the following patterns\n  // 1. blockquote starts with \"> \" or \">>\"\n  // 2. unorder list starts with *+-parseInt\n  // 3. order list starts with \"1.\" or \"1)\"\n  const regex = /^(\\s*)(>[> ]*|[*+-]\\s|(\\d+)([.)]))/\n\n  let match\n  const multiple = editor.getSelection()\n                         .split('\\n').length > 1 ||\n    editor.getSelections().length > 1\n\n  if (multiple) {\n    editor.execCommand('defaultTab')\n  } else if ((match = regex.exec(line)) !== null) {\n    const ch = match[1].length\n    const pos = {\n      line: cursor.line,\n      ch: ch\n    }\n    if (editor.getOption('indentWithTabs')) {\n      editor.replaceRange(tab, pos, pos, '+input')\n    } else {\n      editor.replaceRange(spaces, pos, pos, '+input')\n    }\n  } else {\n    if (editor.getOption('indentWithTabs')) {\n      editor.execCommand('defaultTab')\n    } else {\n      editor.replaceSelection(spaces)\n    }\n  }\n}\n\nexport const defaultKeyMap: KeyMap = !isMac\n  ? {\n    F9: suppressKey,\n    F10: f10,\n    Esc: esc,\n    'Ctrl-S': suppressKey,\n    Enter: 'newlineAndIndentContinueMarkdownList',\n    Tab: tab,\n    Home: 'goLineLeftSmart',\n    End: 'goLineRight',\n    'Ctrl-I': makeSelectionItalic,\n    'Ctrl-B': makeSelectionBold,\n    'Ctrl-U': underlineSelection,\n    'Ctrl-D': strikeThroughSelection,\n    'Ctrl-M': markSelection,\n    'Ctrl-K': addLink\n  }\n  : {\n    F9: suppressKey,\n    F10: f10,\n    Esc: esc,\n    'Cmd-S': suppressKey,\n    Enter: 'newlineAndIndentContinueMarkdownList',\n    Tab: tab,\n    'Cmd-Left': 'goLineLeftSmart',\n    'Cmd-Right': 'goLineRight',\n    Home: 'goLineLeftSmart',\n    End: 'goLineRight',\n    'Cmd-I': makeSelectionItalic,\n    'Cmd-B': makeSelectionBold,\n    'Cmd-U': underlineSelection,\n    'Cmd-D': strikeThroughSelection,\n    'Cmd-M': markSelection\n  }\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, Position } from 'codemirror'\nimport React, { useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { ShowIf } from '../../../common/show-if/show-if'\nimport './status-bar.scss'\n\nexport interface StatusBarInfo {\n  position: Position\n  selectedColumns: number\n  selectedLines: number\n  linesInDocument: number\n  charactersInDocument: number\n  remainingCharacters: number\n}\n\nexport const defaultState: StatusBarInfo = {\n  position: { line: 0, ch: 0 },\n  selectedColumns: 0,\n  selectedLines: 0,\n  linesInDocument: 0,\n  charactersInDocument: 0,\n  remainingCharacters: 0\n}\n\nexport const createStatusInfo = (editor: Editor, maxDocumentLength: number): StatusBarInfo => ({\n  position: editor.getCursor(),\n  charactersInDocument: editor.getValue().length,\n  remainingCharacters: maxDocumentLength - editor.getValue().length,\n  linesInDocument: editor.lineCount(),\n  selectedColumns: editor.getSelection().length,\n  selectedLines: editor.getSelection()\n                       .split('\\n').length\n})\n\nexport const StatusBar: React.FC<StatusBarInfo> = ({ position, selectedColumns, selectedLines, charactersInDocument, linesInDocument, remainingCharacters }) => {\n  const { t } = useTranslation()\n\n  const getLengthTooltip = useMemo(() => {\n    if (remainingCharacters === 0) {\n      return t('editor.statusBar.lengthTooltip.maximumReached')\n    }\n    if (remainingCharacters < 0) {\n      return t('editor.statusBar.lengthTooltip.exceeded', { exceeded: -remainingCharacters })\n    }\n    return t('editor.statusBar.lengthTooltip.remaining', { remaining: remainingCharacters })\n  }, [remainingCharacters, t])\n\n  return (\n    <div className=\"d-flex flex-row status-bar px-2\">\n      <div>\n        <span>{ t('editor.statusBar.cursor', { line: position.line + 1, columns: position.ch + 1 }) }</span>\n        <ShowIf condition={ selectedColumns !== 0 && selectedLines !== 0 }>\n          <ShowIf condition={ selectedLines === 1 }>\n            <span>&nbsp;–&nbsp;{ t('editor.statusBar.selection.column', { count: selectedColumns }) }</span>\n          </ShowIf>\n          <ShowIf condition={ selectedLines > 1 }>\n            <span>&nbsp;–&nbsp;{ t('editor.statusBar.selection.line', { count: selectedLines }) }</span>\n          </ShowIf>\n        </ShowIf>\n      </div>\n      <div className=\"ml-auto\">\n        <span>{ t('editor.statusBar.lines', { lines: linesInDocument }) }</span>\n        &nbsp;–&nbsp;\n        <span\n          data-cy={ 'remainingCharacters' }\n          title={ getLengthTooltip }\n          className={ remainingCharacters <= 0 ? 'text-danger' : remainingCharacters <= 100 ? 'text-warning' : '' }\n        >\n          { t('editor.statusBar.length', { length: charactersInDocument }) }\n        </span>\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport enum EditorPreferenceProperty {\n  KEYMAP = 'keyMap',\n  THEME = 'theme',\n  INDENT_WITH_TABS = 'indentWithTabs',\n  INDENT_UNIT = 'indentUnit',\n  SPELL_CHECK = 'spellcheck'\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { EditorConfiguration } from 'codemirror'\nimport equal from 'fast-deep-equal'\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\nimport { ApplicationState } from '../../../../../redux'\nimport { mergeEditorPreferences } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\nimport { EditorPreferenceProperty } from './editor-preference-property'\n\nexport interface EditorPreferenceBooleanProps {\n  property: EditorPreferenceProperty\n}\n\nexport const EditorPreferenceBooleanProperty: React.FC<EditorPreferenceBooleanProps> = ({ property }) => {\n  const preference = useSelector((state: ApplicationState) => state.editorConfig.preferences[property]?.toString() || '', equal)\n\n  const { t } = useTranslation()\n  const selectItem = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const selectedItem: boolean = event.target.value === 'true'\n\n    mergeEditorPreferences({\n      [property]: selectedItem\n    } as EditorConfiguration)\n  }, [property])\n\n  const i18nPrefix = `editor.modal.preferences.${ property }`\n\n  return (\n    <EditorPreferenceInput onChange={ selectItem } property={ property } type={ EditorPreferenceInputType.SELECT }\n                           value={ preference }>\n      <option value={ 'true' }>\n        { t(`${ i18nPrefix }.on`) }\n      </option>\n      <option value={ 'false' }>\n        { t(`${ i18nPrefix }.off`) }\n      </option>\n    </EditorPreferenceInput>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\nimport { ApplicationState } from '../../../../../redux'\nimport { setEditorLigatures } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\n\nexport const EditorPreferenceLigaturesSelect: React.FC = () => {\n  const ligaturesEnabled = useSelector((state: ApplicationState) => Boolean(state.editorConfig.ligatures)\n    .toString())\n  const saveLigatures = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const ligaturesActivated: boolean = event.target.value === 'true'\n    setEditorLigatures(ligaturesActivated)\n  }, [])\n  const { t } = useTranslation()\n\n  return (\n    <EditorPreferenceInput onChange={ saveLigatures } value={ ligaturesEnabled } property={ 'ligatures' }\n                           type={ EditorPreferenceInputType.BOOLEAN }>\n      <option value='true'>{ t(`common.yes`) }</option>\n      <option value='false'>{ t(`common.no`) }</option>\n    </EditorPreferenceInput>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { EditorConfiguration } from 'codemirror'\nimport equal from 'fast-deep-equal'\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { useSelector } from 'react-redux'\nimport { ApplicationState } from '../../../../../redux'\nimport { mergeEditorPreferences } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\nimport { EditorPreferenceProperty } from './editor-preference-property'\n\nexport interface EditorPreferenceNumberProps {\n  property: EditorPreferenceProperty\n}\n\nexport const EditorPreferenceNumberProperty: React.FC<EditorPreferenceNumberProps> = ({ property }) => {\n  const preference = useSelector((state: ApplicationState) => state.editorConfig.preferences[property]?.toString() || '', equal)\n\n  const selectItem = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const selectedItem: number = Number.parseInt(event.target.value)\n\n    mergeEditorPreferences({\n      [property]: selectedItem\n    } as EditorConfiguration)\n  }, [property])\n\n  return (\n    <EditorPreferenceInput onChange={ selectItem } property={ property } type={ EditorPreferenceInputType.NUMBER }\n                           value={ preference }/>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { EditorConfiguration } from 'codemirror'\nimport equal from 'fast-deep-equal'\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\nimport { ApplicationState } from '../../../../../redux'\nimport { mergeEditorPreferences } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\nimport { EditorPreferenceProperty } from './editor-preference-property'\n\nexport interface EditorPreferenceSelectPropertyProps {\n  property: EditorPreferenceProperty\n  selections: string[]\n}\n\nexport const EditorPreferenceSelectProperty: React.FC<EditorPreferenceSelectPropertyProps> = ({ property, selections }) => {\n  const preference = useSelector((state: ApplicationState) => state.editorConfig.preferences[property]?.toString() || '', equal)\n\n  const { t } = useTranslation()\n\n  const selectItem = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const selectedItem: string = event.target.value\n\n    mergeEditorPreferences({\n      [property]: selectedItem\n    } as EditorConfiguration)\n  }, [property])\n\n  const i18nPrefix = `editor.modal.preferences.${ property }`\n\n  return (\n    <EditorPreferenceInput onChange={ selectItem } property={ property } type={ EditorPreferenceInputType.SELECT }\n                           value={ preference }>\n      { selections.map(selection =>\n        <option key={ selection } value={ selection }>\n          { t(`${ i18nPrefix }.${ selection }`) }\n        </option>) }\n    </EditorPreferenceInput>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { RefObject } from 'react'\nimport { IconName } from '../../common/fork-awesome/types'\nimport { SidebarEntryVariant } from './sidebar-button'\n\nexport interface SpecificSidebarEntryProps {\n  className?: string\n  hide?: boolean\n  onClick?: () => void\n}\n\nexport interface SidebarEntryProps {\n  icon?: IconName\n  variant?: SidebarEntryVariant\n  buttonRef?: RefObject<HTMLButtonElement>\n  hide?: boolean\n  className?: string\n  onClick?: () => void\n  'data-cy'?: string\n}\n\nexport interface SidebarMenuProps {\n  expand?: boolean\n}\n\nexport enum DocumentSidebarMenuSelection {\n  NONE,\n  USERS_ONLINE,\n  IMPORT,\n  EXPORT\n}\n\nexport interface SpecificSidebarMenuProps {\n  className?: string\n  onClick: (menuId: DocumentSidebarMenuSelection) => void\n  selectedMenuId: DocumentSidebarMenuSelection\n  menuId: DocumentSidebarMenuSelection\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { ChangeEvent, useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\nimport { ApplicationState } from '../../../../../redux'\nimport { setEditorSmartPaste } from '../../../../../redux/editor/methods'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\n\nexport const EditorPreferenceSmartPasteSelect: React.FC = () => {\n  const smartPasteEnabled = useSelector((state: ApplicationState) => Boolean(state.editorConfig.smartPaste)\n    .toString())\n  const saveSmartPaste = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const smartPasteActivated: boolean = event.target.value === 'true'\n    setEditorSmartPaste(smartPasteActivated)\n  }, [])\n  const { t } = useTranslation()\n\n  return (\n    <EditorPreferenceInput\n      onChange={ saveSmartPaste }\n      value={ smartPasteEnabled }\n      property={ 'smartPaste' }\n      type={ EditorPreferenceInputType.BOOLEAN }\n    >\n      <option value='true'>{ t(`common.yes`) }</option>\n      <option value='false'>{ t(`common.no`) }</option>\n    </EditorPreferenceInput>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport equal from 'fast-deep-equal'\nimport React, { Fragment, useState } from 'react'\nimport { Button, Form, ListGroup } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\nimport { ApplicationState } from '../../../../../redux'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { CommonModal } from '../../../../common/modals/common-modal'\nimport { ShowIf } from '../../../../common/show-if/show-if'\nimport { EditorPreferenceBooleanProperty } from './editor-preference-boolean-property'\nimport { EditorPreferenceInput, EditorPreferenceInputType } from './editor-preference-input'\nimport { EditorPreferenceLigaturesSelect } from './editor-preference-ligatures-select'\nimport { EditorPreferenceNumberProperty } from './editor-preference-number-property'\nimport { EditorPreferenceProperty } from './editor-preference-property'\nimport { EditorPreferenceSelectProperty } from './editor-preference-select-property'\nimport { EditorPreferenceSmartPasteSelect } from './editor-preference-smart-paste-select'\n\nexport const EditorPreferences: React.FC = () => {\n  const { t } = useTranslation()\n  const [showModal, setShowModal] = useState(false)\n  const indentWithTabs = useSelector((state: ApplicationState) => state.editorConfig.preferences.indentWithTabs ?? false, equal)\n\n  return (\n    <Fragment>\n      <Button variant='light' onClick={ () => setShowModal(true) } title={ t('editor.editorToolbar.preferences') }>\n        <ForkAwesomeIcon icon=\"wrench\"/>\n      </Button>\n      <CommonModal\n        show={ showModal }\n        onHide={ () => setShowModal(false) }\n        titleI18nKey={ 'editor.modal.preferences.title' }\n        closeButton={ true }\n        icon={ 'wrench' }>\n        <Form>\n          <ListGroup>\n            <ListGroup.Item>\n              <EditorPreferenceSelectProperty property={ EditorPreferenceProperty.THEME }\n                                              selections={ ['one-dark', 'neat'] }/>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <EditorPreferenceSelectProperty property={ EditorPreferenceProperty.KEYMAP }\n                                              selections={ ['sublime', 'emacs', 'vim'] }/>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <EditorPreferenceBooleanProperty property={ EditorPreferenceProperty.INDENT_WITH_TABS }/>\n            </ListGroup.Item>\n            <ShowIf condition={ !indentWithTabs }>\n              <ListGroup.Item>\n                <EditorPreferenceNumberProperty property={ EditorPreferenceProperty.INDENT_UNIT }/>\n              </ListGroup.Item>\n            </ShowIf>\n            <ListGroup.Item>\n              <EditorPreferenceLigaturesSelect/>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <EditorPreferenceSmartPasteSelect/>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <EditorPreferenceInput onChange={ () => alert('This feature is not yet implemented.') }\n                                     property={ EditorPreferenceProperty.SPELL_CHECK }\n                                     type={ EditorPreferenceInputType.SELECT }>\n                <option value='off'>Off</option>\n                <option value='en'>English</option>\n              </EditorPreferenceInput>\n            </ListGroup.Item>\n          </ListGroup>\n        </Form>\n      </CommonModal>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport CodeMirror from 'codemirror'\nimport React, { Fragment, useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { addEmoji } from '../utils/toolbarButtonUtils'\nimport { EmojiPicker } from './emoji-picker'\n\nexport interface EmojiPickerButtonProps {\n  editor: CodeMirror.Editor\n}\n\nexport const EmojiPickerButton: React.FC<EmojiPickerButtonProps> = ({ editor }) => {\n  const { t } = useTranslation()\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false)\n\n  return (\n    <Fragment>\n      <EmojiPicker\n        show={ showEmojiPicker }\n        onEmojiSelected={ (emoji) => {\n          setShowEmojiPicker(false)\n          addEmoji(emoji, editor)\n        } }\n        onDismiss={ () => setShowEmojiPicker(false) }/>\n      <Button data-cy={ 'show-emoji-picker' } variant='light' onClick={ () => setShowEmojiPicker(old => !old) }\n              title={ t('editor.editorToolbar.emoji') }>\n        <ForkAwesomeIcon icon=\"smile-o\"/>\n      </Button>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { Button, Form, ModalFooter } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { CommonModal } from '../../../../common/modals/common-modal'\nimport { TableSize } from './table-picker'\n\nexport interface CustomTableSizeModalProps {\n  showModal: boolean\n  onDismiss: () => void\n  onTablePicked: (row: number, cols: number) => void\n}\n\nexport const CustomTableSizeModal: React.FC<CustomTableSizeModalProps> = ({ showModal, onDismiss, onTablePicked }) => {\n  const { t } = useTranslation()\n  const [tableSize, setTableSize] = useState<TableSize>({\n    rows: 0,\n    columns: 0\n  })\n\n  useEffect(() => {\n    setTableSize({\n      rows: 0,\n      columns: 0\n    })\n  }, [showModal])\n\n  const onClick = useCallback(() => {\n    onTablePicked(tableSize.rows, tableSize.columns)\n    onDismiss()\n  }, [onDismiss, tableSize, onTablePicked])\n\n  return (\n    <CommonModal\n      show={ showModal }\n      onHide={ () => onDismiss() }\n      titleI18nKey={ 'editor.editorToolbar.table.customSize' }\n      closeButton={ true }\n      icon={ 'table' }>\n      <div className={ 'col-lg-10 d-flex flex-row p-3 align-items-center' }>\n        <Form.Control\n          type={ 'number' }\n          min={ 1 }\n          placeholder={ t('editor.editorToolbar.table.cols') }\n          isInvalid={ tableSize.columns <= 0 }\n          onChange={ (event) => {\n            const value = Number.parseInt(event.currentTarget.value)\n            setTableSize(old => ({\n              rows: old.rows,\n              columns: isNaN(value) ? 0 : value\n            }))\n          } }\n        />\n        <ForkAwesomeIcon icon='times' className='mx-2' fixedWidth={ true }/>\n        <Form.Control\n          type={ 'number' }\n          min={ 1 }\n          placeholder={ t('editor.editorToolbar.table.rows') }\n          isInvalid={ tableSize.rows <= 0 }\n          onChange={ (event) => {\n            const value = Number.parseInt(event.currentTarget.value)\n            setTableSize(old => ({\n              rows: isNaN(value) ? 0 : value,\n              columns: old.columns\n            }))\n          } }/>\n      </div>\n      <ModalFooter>\n        <Button onClick={ onClick } disabled={ tableSize.rows <= 0 || tableSize.columns <= 0 }>\n          { t('editor.editorToolbar.table.create') }\n        </Button>\n      </ModalFooter>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { useClickAway } from 'react-use'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { createNumberRangeArray } from '../../../../common/number-range/number-range'\nimport { CustomTableSizeModal } from './custom-table-size-modal'\nimport './table-picker.scss'\n\nexport interface TablePickerProps {\n  show: boolean\n  onDismiss: () => void\n  onTablePicked: (row: number, cols: number) => void\n}\n\nexport type TableSize = {\n  rows: number,\n  columns: number\n}\n\nexport const TablePicker: React.FC<TablePickerProps> = ({ show, onDismiss, onTablePicked }) => {\n  const { t } = useTranslation()\n  const containerRef = useRef<HTMLDivElement>(null)\n  const [tableSize, setTableSize] = useState<TableSize>()\n  const [showDialog, setShowDialog] = useState(false)\n\n  useClickAway(containerRef, () => {\n    onDismiss()\n  })\n\n  useEffect(() => {\n    setTableSize(undefined)\n  }, [show])\n\n  const onClick = useCallback(() => {\n    if (tableSize) {\n      onTablePicked(tableSize.rows, tableSize.columns)\n    }\n  }, [onTablePicked, tableSize])\n\n  return (\n    <div className={ `position-absolute table-picker-container p-2 ${ !show || showDialog ? 'd-none' : '' } bg-light` }\n         ref={ containerRef } role=\"grid\">\n      <p className={ 'lead' }>\n        { tableSize\n          ? t('editor.editorToolbar.table.size', { cols: tableSize?.columns, rows: tableSize.rows })\n          : t('editor.editorToolbar.table.title')\n        }\n      </p>\n      <div className={ 'table-container' }>\n        { createNumberRangeArray(8)\n          .map((row: number) => (\n            createNumberRangeArray(10)\n              .map((col: number) => (\n                  <div\n                    key={ `${ row }_${ col }` }\n                    className={ `table-cell ${ tableSize && row < tableSize.rows && col < tableSize.columns ? 'bg-primary border-primary' : '' }` }\n                    onMouseEnter={ () => {\n                      setTableSize({\n                        rows: row + 1,\n                        columns: col + 1\n                      })\n                    } }\n                    title={ t('editor.editorToolbar.table.size', { cols: col + 1, rows: row + 1 }) }\n                    onClick={ onClick }\n                  />\n                )\n              )\n          )) }\n      </div>\n      <div className=\"d-flex justify-content-center mt-2\">\n        <Button data-cy={ 'show-custom-table-modal' } className={ 'text-center' } onClick={ () => setShowDialog(true) }>\n          <ForkAwesomeIcon icon=\"table\"/>&nbsp;{ t('editor.editorToolbar.table.customSize') }\n        </Button>\n        <CustomTableSizeModal\n          showModal={ showDialog }\n          onDismiss={ () => setShowDialog(false) }\n          onTablePicked={ onTablePicked }\n        />\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport CodeMirror from 'codemirror'\nimport React, { Fragment, useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../../common/fork-awesome/fork-awesome-icon'\nimport { addTable } from '../utils/toolbarButtonUtils'\nimport { TablePicker } from './table-picker'\n\nexport interface TablePickerButtonProps {\n  editor: CodeMirror.Editor\n}\n\nexport const TablePickerButton: React.FC<TablePickerButtonProps> = ({ editor }) => {\n  const { t } = useTranslation()\n  const [showTablePicker, setShowTablePicker] = useState(false)\n\n  return (\n    <Fragment>\n      <TablePicker\n        show={ showTablePicker }\n        onDismiss={ () => setShowTablePicker(false) }\n        onTablePicked={ (rows, cols) => {\n          setShowTablePicker(false)\n          addTable(editor, rows, cols)\n        } }\n      />\n      <Button data-cy={ 'show-table-overlay' } variant='light' onClick={ () => setShowTablePicker(old => !old) }\n              title={ t('editor.editorToolbar.table.title') }>\n        <ForkAwesomeIcon icon=\"table\"/>\n      </Button>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { MutableRefObject, useCallback, useEffect, useRef } from 'react'\n\nexport interface UploadInputProps {\n  onLoad: (file: File) => Promise<void>\n  acceptedFiles: string\n  onClickRef: MutableRefObject<(() => void) | undefined>\n  'data-cy'?: string\n}\n\nexport const UploadInput: React.FC<UploadInputProps> = ({ onLoad, acceptedFiles, onClickRef, ...props }) => {\n  const fileInputReference = useRef<HTMLInputElement>(null)\n  const onClick = useCallback(() => {\n    const fileInput = fileInputReference.current\n    if (!fileInput) {\n      return\n    }\n    fileInput.addEventListener('change', () => {\n      if (!fileInput.files || fileInput.files.length < 1) {\n        return\n      }\n      const file = fileInput.files[0]\n      onLoad(file)\n        .then(() => {\n          fileInput.value = ''\n        })\n        .catch((error) => {\n          console.error(error)\n        })\n    })\n    fileInput.click()\n  }, [onLoad])\n\n  useEffect(() => {\n    onClickRef.current = onClick\n  })\n\n  return (\n    <input data-cy={ props['data-cy'] } type='file' ref={ fileInputReference } className='d-none'\n           accept={ acceptedFiles }/>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport const supportedMimeTypes: string[] = [\n  'application/pdf',\n  'image/apng',\n  'image/bmp',\n  'image/gif',\n  'image/heif',\n  'image/heic',\n  'image/heif-sequence',\n  'image/heic-sequence',\n  'image/jpeg',\n  'image/png',\n  'image/svg+xml',\n  'image/tiff',\n  'image/webp'\n]\n\nexport const supportedMimeTypesJoined = supportedMimeTypes.join(', ')\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport i18n from 'i18next'\nimport { uploadFile } from '../../../api/media'\nimport { store } from '../../../redux'\nimport { supportedMimeTypes } from './tool-bar/utils/upload-image-mimetypes'\n\nexport const handleUpload = (file: File, editor: Editor): void => {\n  if (!file) {\n    return\n  }\n  const mimeType = file.type\n  if (!supportedMimeTypes.includes(mimeType)) {\n    // this mimetype is not supported\n    return\n  }\n  const cursor = editor.getCursor()\n  const uploadPlaceholder = `![${ i18n.t('editor.upload.uploadFile', { fileName: file.name }) }]()`\n  const noteId = store.getState().noteDetails.id\n  editor.replaceRange(uploadPlaceholder, cursor, cursor, '+input')\n  uploadFile(noteId, mimeType, file)\n    .then(({ link }) => {\n      editor.replaceRange(getCorrectSyntaxForLink(mimeType, link), cursor, {\n        line: cursor.line,\n        ch: cursor.ch + uploadPlaceholder.length\n      }, '+input')\n    })\n    .catch(() => {\n      editor.replaceRange('', cursor, {\n        line: cursor.line,\n        ch: cursor.ch + uploadPlaceholder.length\n      }, '+input')\n    })\n}\n\nconst getCorrectSyntaxForLink = (mimeType: string, link: string): string => {\n  switch (mimeType) {\n    case 'application/pdf':\n      return `{%pdf ${ link } %}`\n    default:\n      return `![](${ link })`\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport React, { Fragment, useCallback, useRef } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\nimport { UploadInput } from '../../sidebar/upload-input'\nimport { handleUpload } from '../upload-handler'\nimport { supportedMimeTypesJoined } from './utils/upload-image-mimetypes'\n\nexport interface UploadImageButtonProps {\n  editor?: Editor\n}\n\nexport const UploadImageButton: React.FC<UploadImageButtonProps> = ({ editor }) => {\n  const { t } = useTranslation()\n  const clickRef = useRef<(() => void)>()\n  const buttonClick = useCallback(() => {\n    clickRef.current?.()\n  }, [])\n\n  const onUploadImage = useCallback((file: File) => {\n    if (editor) {\n      handleUpload(file, editor)\n    }\n    return Promise.resolve()\n  }, [editor])\n\n  if (!editor) {\n    return null\n  }\n\n  return (\n    <Fragment>\n      <Button variant='light' onClick={ buttonClick } title={ t('editor.editorToolbar.uploadImage') }>\n        <ForkAwesomeIcon icon={ 'upload' }/>\n      </Button>\n      <UploadInput onLoad={ onUploadImage } acceptedFiles={ supportedMimeTypesJoined } onClickRef={ clickRef }/>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport React from 'react'\nimport { Button, ButtonGroup, ButtonToolbar } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\nimport { EditorPreferences } from './editor-preferences/editor-preferences'\nimport { EmojiPickerButton } from './emoji-picker/emoji-picker-button'\nimport { TablePickerButton } from './table-picker/table-picker-button'\nimport './tool-bar.scss'\nimport { UploadImageButton } from './upload-image-button'\nimport {\n  addCodeFences,\n  addCollapsableBlock,\n  addComment,\n  addHeaderLevel,\n  addImage,\n  addLine,\n  addLink,\n  addList,\n  addOrderedList,\n  addQuotes,\n  addTaskList,\n  makeSelectionBold,\n  makeSelectionItalic,\n  strikeThroughSelection,\n  subscriptSelection,\n  superscriptSelection,\n  underlineSelection\n} from './utils/toolbarButtonUtils'\n\nexport interface ToolBarProps {\n  editor?: Editor\n}\n\nexport const ToolBar: React.FC<ToolBarProps> = ({ editor }) => {\n  const { t } = useTranslation()\n\n  if (!editor) {\n    return null\n  }\n\n  return (\n    <ButtonToolbar className='bg-light'>\n      <ButtonGroup className={ 'mx-1 flex-wrap' }>\n        <Button data-cy={ 'format-bold' } variant='light' onClick={ () => makeSelectionBold(editor) }\n                title={ t('editor.editorToolbar.bold') }>\n          <ForkAwesomeIcon icon=\"bold\"/>\n        </Button>\n        <Button data-cy={ 'format-italic' } variant='light' onClick={ () => makeSelectionItalic(editor) }\n                title={ t('editor.editorToolbar.italic') }>\n          <ForkAwesomeIcon icon=\"italic\"/>\n        </Button>\n        <Button data-cy={ 'format-underline' } variant='light' onClick={ () => underlineSelection(editor) }\n                title={ t('editor.editorToolbar.underline') }>\n          <ForkAwesomeIcon icon=\"underline\"/>\n        </Button>\n        <Button data-cy={ 'format-strikethrough' } variant='light' onClick={ () => strikeThroughSelection(editor) }\n                title={ t('editor.editorToolbar.strikethrough') }>\n          <ForkAwesomeIcon icon=\"strikethrough\"/>\n        </Button>\n        <Button data-cy={ 'format-subscript' } variant='light' onClick={ () => subscriptSelection(editor) }\n                title={ t('editor.editorToolbar.subscript') }>\n          <ForkAwesomeIcon icon=\"subscript\"/>\n        </Button>\n        <Button data-cy={ 'format-superscript' } variant='light' onClick={ () => superscriptSelection(editor) }\n                title={ t('editor.editorToolbar.superscript') }>\n          <ForkAwesomeIcon icon=\"superscript\"/>\n        </Button>\n      </ButtonGroup>\n      <ButtonGroup className={ 'mx-1 flex-wrap' }>\n        <Button data-cy={ 'format-heading' } variant='light' onClick={ () => addHeaderLevel(editor) }\n                title={ t('editor.editorToolbar.header') }>\n          <ForkAwesomeIcon icon=\"header\"/>\n        </Button>\n        <Button data-cy={ 'format-code-block' } variant='light' onClick={ () => addCodeFences(editor) }\n                title={ t('editor.editorToolbar.code') }>\n          <ForkAwesomeIcon icon=\"code\"/>\n        </Button>\n        <Button data-cy={ 'format-block-quote' } variant='light' onClick={ () => addQuotes(editor) }\n                title={ t('editor.editorToolbar.blockquote') }>\n          <ForkAwesomeIcon icon=\"quote-right\"/>\n        </Button>\n        <Button data-cy={ 'format-unordered-list' } variant='light' onClick={ () => addList(editor) }\n                title={ t('editor.editorToolbar.unorderedList') }>\n          <ForkAwesomeIcon icon=\"list\"/>\n        </Button>\n        <Button data-cy={ 'format-ordered-list' } variant='light' onClick={ () => addOrderedList(editor) }\n                title={ t('editor.editorToolbar.orderedList') }>\n          <ForkAwesomeIcon icon=\"list-ol\"/>\n        </Button>\n        <Button data-cy={ 'format-check-list' } variant='light' onClick={ () => addTaskList(editor) }\n                title={ t('editor.editorToolbar.checkList') }>\n          <ForkAwesomeIcon icon=\"check-square\"/>\n        </Button>\n      </ButtonGroup>\n      <ButtonGroup className={ 'mx-1 flex-wrap' }>\n        <Button data-cy={ 'format-link' } variant='light' onClick={ () => addLink(editor) }\n                title={ t('editor.editorToolbar.link') }>\n          <ForkAwesomeIcon icon=\"link\"/>\n        </Button>\n        <Button data-cy={ 'format-image' } variant='light' onClick={ () => addImage(editor) }\n                title={ t('editor.editorToolbar.image') }>\n          <ForkAwesomeIcon icon=\"picture-o\"/>\n        </Button>\n        <UploadImageButton editor={ editor }/>\n      </ButtonGroup>\n      <ButtonGroup className={ 'mx-1 flex-wrap' }>\n        <TablePickerButton editor={ editor }/>\n        <Button data-cy={ 'format-add-line' } variant='light' onClick={ () => addLine(editor) }\n                title={ t('editor.editorToolbar.line') }>\n          <ForkAwesomeIcon icon=\"minus\"/>\n        </Button>\n        <Button data-cy={ 'format-collapsable-block' } variant='light' onClick={ () => addCollapsableBlock(editor) }\n                title={ t('editor.editorToolbar.collapsableBlock') }>\n          <ForkAwesomeIcon icon=\"caret-square-o-down\"/>\n        </Button>\n        <Button data-cy={ 'format-add-comment' } variant='light' onClick={ () => addComment(editor) }\n                title={ t('editor.editorToolbar.comment') }>\n          <ForkAwesomeIcon icon=\"comment\"/>\n        </Button>\n        <EmojiPickerButton editor={ editor }/>\n      </ButtonGroup>\n      <ButtonGroup className={ 'mx-1 flex-wrap' }>\n        <EditorPreferences/>\n      </ButtonGroup>\n    </ButtonToolbar>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\nimport { convertClipboardTableToMarkdown, isTable } from '../../table-extractor'\nimport { handleUpload } from '../../upload-handler'\nimport { insertAtCursor } from './toolbarButtonUtils'\nimport { isCursorInCodefence } from './codefenceDetection'\n\ntype ClipboardDataFormats = 'text' | 'url' | 'text/plain' | 'text/uri-list' | 'text/html'\n\nexport interface PasteEvent {\n  clipboardData: {\n    files: FileList,\n    getData: (format: ClipboardDataFormats) => string\n  },\n  preventDefault: () => void\n}\n\nexport const handleTablePaste = (event: PasteEvent, editor: Editor): boolean => {\n  const pasteText = event.clipboardData.getData('text')\n  if (!pasteText || isCursorInCodefence(editor) || !isTable(pasteText)) {\n    return false\n  }\n  event.preventDefault()\n  const markdownTable = convertClipboardTableToMarkdown(pasteText)\n  insertAtCursor(editor, markdownTable)\n  return true\n}\n\nexport const handleFilePaste = (event: PasteEvent, editor: Editor): boolean => {\n  if (!event.clipboardData.files || event.clipboardData.files.length < 1) {\n    return false\n  }\n  event.preventDefault()\n  const files: FileList = event.clipboardData.files\n  if (files && files.length >= 1) {\n    handleUpload(files[0], editor)\n    return true\n  }\n  return false\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor } from 'codemirror'\n\nexport const isCursorInCodefence = (editor: Editor): boolean => {\n  const currentLine = editor.getCursor().line\n  let codefenceCount = 0\n  for (let line = currentLine; line >= 0; --line) {\n    const markdownContentLine = editor.getDoc().getLine(line)\n    if (markdownContentLine.startsWith('```')) {\n      codefenceCount++\n    }\n  }\n  return codefenceCount % 2 === 1\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { createNumberRangeArray } from '../../common/number-range/number-range'\n\nexport const isTable = (text: string): boolean => {\n  // Tables must consist of multiple rows and columns\n  if (!text.includes('\\n') || !text.includes('\\t')) {\n    return false\n  }\n  // Code within code blocks should not be parsed as a table\n  if (text.startsWith('```')) {\n    return false\n  }\n\n  const lines = text.split(/\\r?\\n/)\n                    .filter(line => line.trim() !== '')\n\n  // Tab-indented text should not be matched as a table\n  if (lines.every(line => line.startsWith('\\t'))) {\n    return false\n  }\n  // Every line should have the same amount of tabs (table columns)\n  const tabsPerLines = lines.map(line => line.match(/\\t/g)?.length ?? 0)\n  return tabsPerLines.every(line => line === tabsPerLines[0])\n}\n\nexport const convertClipboardTableToMarkdown = (pasteData: string): string => {\n  if (pasteData.trim() === '') {\n    return ''\n  }\n  const tableRows = pasteData.split(/\\r?\\n/)\n                             .filter(row => row.trim() !== '')\n  const tableCells = tableRows.reduce((cellsInRow, row, index) => {\n    cellsInRow[index] = row.split('\\t')\n    return cellsInRow\n  }, [] as string[][])\n  const arrayMaxRows = createNumberRangeArray(tableCells.length)\n  const arrayMaxColumns = createNumberRangeArray(Math.max(...tableCells.map(row => row.length)))\n\n  const headRow1 = arrayMaxColumns\n    .map(col => `| #${ col + 1 } `)\n    .join('') + '|'\n  const headRow2 = arrayMaxColumns\n    .map(col => `| -${ '-'.repeat((col + 1).toString().length) } `)\n    .join('') + '|'\n  const body = arrayMaxRows\n    .map(row => {\n      return arrayMaxColumns\n        .map(col => '| ' + tableCells[row][col] + ' ')\n        .join('') + '|'\n    })\n    .join('\\n')\n  return `${ headRow1 }\\n${ headRow2 }\\n${ body }`\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Editor, EditorChange, EditorConfiguration, ScrollInfo } from 'codemirror'\nimport 'codemirror/addon/comment/comment'\nimport 'codemirror/addon/dialog/dialog'\nimport 'codemirror/addon/display/autorefresh'\nimport 'codemirror/addon/display/fullscreen'\nimport 'codemirror/addon/display/placeholder'\nimport 'codemirror/addon/edit/closebrackets'\nimport 'codemirror/addon/edit/closetag'\nimport 'codemirror/addon/edit/continuelist'\nimport 'codemirror/addon/edit/matchbrackets'\nimport 'codemirror/addon/edit/matchtags'\nimport 'codemirror/addon/fold/foldcode'\nimport 'codemirror/addon/fold/foldgutter'\nimport 'codemirror/addon/fold/markdown-fold'\nimport 'codemirror/addon/hint/show-hint'\nimport 'codemirror/addon/search/jump-to-line'\nimport 'codemirror/addon/search/match-highlighter'\nimport 'codemirror/addon/search/search'\nimport 'codemirror/addon/selection/active-line'\nimport 'codemirror/keymap/emacs'\nimport 'codemirror/keymap/sublime'\nimport 'codemirror/keymap/vim'\nimport 'codemirror/mode/gfm/gfm'\nimport equal from 'fast-deep-equal'\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { Controlled as ControlledCodeMirror } from 'react-codemirror2'\nimport { useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\nimport { ApplicationState } from '../../../redux'\nimport { MaxLengthWarningModal } from '../editor-modals/max-length-warning-modal'\nimport { ScrollProps, ScrollState } from '../synced-scroll/scroll-props'\nimport { allHinters, findWordAtCursor } from './autocompletion'\nimport './editor-pane.scss'\nimport { defaultKeyMap } from './key-map'\nimport { createStatusInfo, defaultState, StatusBar, StatusBarInfo } from './status-bar/status-bar'\nimport { ToolBar } from './tool-bar/tool-bar'\nimport { handleUpload } from './upload-handler'\nimport { handleFilePaste, handleTablePaste, PasteEvent } from './tool-bar/utils/pasteHandlers'\n\nexport interface EditorPaneProps {\n  onContentChange: (content: string) => void\n  content: string\n}\n\nconst onChange = (editor: Editor) => {\n  for (const hinter of allHinters) {\n    const searchTerm = findWordAtCursor(editor)\n    if (hinter.wordRegExp.test(searchTerm.text)) {\n      editor.showHint({\n        hint: hinter.hint,\n        completeSingle: false,\n        completeOnSingleClick: false,\n        alignWithWord: true\n      })\n      return\n    }\n  }\n}\n\ninterface DropEvent {\n  pageX: number,\n  pageY: number,\n  dataTransfer: {\n                  files: FileList\n                  effectAllowed: string\n                } | null\n  preventDefault: () => void\n}\n\nexport const EditorPane: React.FC<EditorPaneProps & ScrollProps> = ({ onContentChange, content, scrollState, onScroll, onMakeScrollSource }) => {\n  const { t } = useTranslation()\n  const maxLength = useSelector((state: ApplicationState) => state.config.maxDocumentLength)\n  const smartPasteEnabled = useSelector((state: ApplicationState) => state.editorConfig.smartPaste)\n  const [showMaxLengthWarning, setShowMaxLengthWarning] = useState(false)\n  const maxLengthWarningAlreadyShown = useRef(false)\n  const [editor, setEditor] = useState<Editor>()\n  const [statusBarInfo, setStatusBarInfo] = useState<StatusBarInfo>(defaultState)\n  const editorPreferences = useSelector((state: ApplicationState) => state.editorConfig.preferences, equal)\n  const ligaturesEnabled = useSelector((state: ApplicationState) => state.editorConfig.ligatures, equal)\n\n  const lastScrollPosition = useRef<number>()\n  const [editorScroll, setEditorScroll] = useState<ScrollInfo>()\n  const onEditorScroll = useCallback((editor: Editor, data: ScrollInfo) => setEditorScroll(data), [])\n\n  const onPaste = useCallback((pasteEditor: Editor, event: PasteEvent) => {\n    if (!event || !event.clipboardData) {\n      return\n    }\n    if (smartPasteEnabled) {\n      const tableInserted = handleTablePaste(event, pasteEditor)\n      if (tableInserted) {\n        return\n      }\n    }\n    handleFilePaste(event, pasteEditor)\n  }, [smartPasteEnabled])\n\n  useEffect(() => {\n    if (!editor || !onScroll || !editorScroll) {\n      return\n    }\n    const line = editor.lineAtHeight(editorScroll.top, 'local')\n    const startYOfLine = editor.heightAtLine(line, 'local')\n    const lineInfo = editor.lineInfo(line)\n    if (lineInfo === null) {\n      return\n    }\n    const heightOfLine = (lineInfo.handle as { height: number }).height\n    const percentageRaw = (Math.max(editorScroll.top - startYOfLine, 0)) / heightOfLine\n    const percentage = Math.floor(percentageRaw * 100)\n\n    const newScrollState: ScrollState = { firstLineInView: line + 1, scrolledPercentage: percentage }\n    onScroll(newScrollState)\n  }, [editor, editorScroll, onScroll])\n\n  useEffect(() => {\n    if (!editor || !scrollState) {\n      return\n    }\n    const startYOfLine = editor.heightAtLine(scrollState.firstLineInView - 1, 'local')\n    const heightOfLine = (editor.lineInfo(scrollState.firstLineInView - 1).handle as { height: number }).height\n    const newPositionRaw = startYOfLine + (heightOfLine * scrollState.scrolledPercentage / 100)\n    const newPosition = Math.floor(newPositionRaw)\n    if (newPosition !== lastScrollPosition.current) {\n      lastScrollPosition.current = newPosition\n      editor.scrollTo(0, newPosition)\n    }\n  }, [editor, scrollState])\n\n  const onBeforeChange = useCallback((editor: Editor, data: EditorChange, value: string) => {\n    if (value.length > maxLength && !maxLengthWarningAlreadyShown.current) {\n      setShowMaxLengthWarning(true)\n      maxLengthWarningAlreadyShown.current = true\n    }\n    if (value.length <= maxLength) {\n      maxLengthWarningAlreadyShown.current = false\n    }\n    onContentChange(value)\n  }, [onContentChange, maxLength, maxLengthWarningAlreadyShown])\n  const onEditorDidMount = useCallback(mountedEditor => {\n    setStatusBarInfo(createStatusInfo(mountedEditor, maxLength))\n    setEditor(mountedEditor)\n  }, [maxLength])\n\n  const onCursorActivity = useCallback((editorWithActivity) => {\n    setStatusBarInfo(createStatusInfo(editorWithActivity, maxLength))\n  }, [maxLength])\n\n  const onDrop = useCallback((dropEditor: Editor, event: DropEvent) => {\n    if (event && dropEditor && event.pageX && event.pageY && event.dataTransfer &&\n      event.dataTransfer.files && event.dataTransfer.files.length >= 1) {\n      event.preventDefault()\n      const top: number = event.pageY\n      const left: number = event.pageX\n      const newCursor = dropEditor.coordsChar({ top, left }, 'page')\n      dropEditor.setCursor(newCursor)\n      const files: FileList = event.dataTransfer.files\n      handleUpload(files[0], dropEditor)\n    }\n  }, [])\n\n  const onMaxLengthHide = useCallback(() => setShowMaxLengthWarning(false), [])\n\n  const codeMirrorOptions: EditorConfiguration = useMemo<EditorConfiguration>(() => ({\n    ...editorPreferences,\n    mode: 'gfm',\n    viewportMargin: 20,\n    styleActiveLine: true,\n    lineNumbers: true,\n    lineWrapping: true,\n    showCursorWhenSelecting: true,\n    highlightSelectionMatches: true,\n    inputStyle: 'textarea',\n    matchBrackets: true,\n    autoCloseBrackets: true,\n    matchTags: {\n      bothTags: true\n    },\n    autoCloseTags: true,\n    foldGutter: true,\n    gutters: [\n      'CodeMirror-linenumbers',\n      'authorship-gutters',\n      'CodeMirror-foldgutter'\n    ],\n    extraKeys: defaultKeyMap,\n    flattenSpans: true,\n    addModeClass: true,\n    autoRefresh: true,\n    // otherCursors: true,\n    placeholder: t('editor.placeholder')\n  }), [t, editorPreferences])\n\n  return (\n    <div className={ 'd-flex flex-column h-100 position-relative' } onMouseEnter={ onMakeScrollSource }>\n      <MaxLengthWarningModal show={ showMaxLengthWarning } onHide={ onMaxLengthHide } maxLength={ maxLength }/>\n      <ToolBar editor={ editor }/>\n      <ControlledCodeMirror\n        className={ `overflow-hidden w-100 flex-fill ${ ligaturesEnabled ? '' : 'no-ligatures' }` }\n        value={ content }\n        options={ codeMirrorOptions }\n        onChange={ onChange }\n        onPaste={ onPaste }\n        onDrop={ onDrop }\n        onCursorActivity={ onCursorActivity }\n        editorDidMount={ onEditorDidMount }\n        onBeforeChange={ onBeforeChange }\n        onScroll={ onEditorScroll }\n      />\n      <StatusBar { ...statusBarInfo } />\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { useEffect } from 'react'\nimport { setEditorMode } from '../../../redux/editor/methods'\nimport { EditorMode } from '../app-bar/editor-view-mode'\n\nconst shortcutHandler = (event: KeyboardEvent): void => {\n  if (event.ctrlKey && event.altKey && event.key === 'b') {\n    setEditorMode(EditorMode.BOTH)\n    event.preventDefault()\n  }\n\n  if (event.ctrlKey && event.altKey && event.key === 'v') {\n    setEditorMode(EditorMode.PREVIEW)\n    event.preventDefault()\n  }\n\n  if (event.ctrlKey && event.altKey && (event.key === 'e' || event.key === '€')) {\n    setEditorMode(EditorMode.EDITOR)\n    event.preventDefault()\n  }\n}\n\nexport const useViewModeShortcuts = (): void => {\n  useEffect(() => {\n    document.addEventListener('keydown', shortcutHandler, false)\n    return () => {\n      document.removeEventListener('keydown', shortcutHandler, false)\n    }\n  }, [])\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { ForkAwesomeIcon } from '../../common/fork-awesome/fork-awesome-icon'\nimport { IconName } from '../../common/fork-awesome/types'\nimport { ShowIf } from '../../common/show-if/show-if'\nimport { SidebarEntryProps } from './types'\n\nexport type SidebarEntryVariant = 'primary'\n\nexport const SidebarButton: React.FC<SidebarEntryProps> = ({ children, icon, className, variant, buttonRef, hide, ...props }) => {\n  return (\n    <button ref={ buttonRef }\n            className={ `sidebar-entry ${ hide ? 'hide' : '' } ${ variant ? `sidebar-entry-${ variant }` : '' } ${ className ?? '' }` } { ...props } >\n      <ShowIf condition={ !!icon }>\n        <span className={ 'sidebar-icon' }>\n          <ForkAwesomeIcon icon={ icon as IconName }/>\n        </span>\n      </ShowIf>\n      <span className={ 'sidebar-text' }>\n        { children }\n      </span>\n    </button>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { DeletionModal } from '../../common/modals/deletion-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const DeleteNoteSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ hide, className }) => {\n  useTranslation()\n  const [showDialog, setShowDialog] = useState(false)\n\n  return (\n    <Fragment>\n      <SidebarButton icon={ 'trash' } className={ className } hide={ hide } onClick={ () => setShowDialog(true) }>\n        <Trans i18nKey={ 'landing.history.menu.deleteNote' }/>\n      </SidebarButton>\n      <DeletionModal\n        onConfirm={ () => setShowDialog(false) }\n        deletionButtonI18nKey={ 'editor.modal.deleteNote.button' }\n        show={ showDialog }\n        onHide={ () => setShowDialog(false) }\n        titleI18nKey={ 'editor.modal.deleteNote.title' }>\n        <h5><Trans i18nKey={ 'editor.modal.deleteNote.question' }/></h5>\n        <ul>\n          <li> noteTitle</li>\n        </ul>\n        <h6>\n          <Trans i18nKey={ 'editor.modal.deleteNote.warning' }/>\n        </h6>\n      </DeletionModal>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\n\nexport interface UnitalicBoldTextProps {\n  text: string;\n}\n\nexport const UnitalicBoldText: React.FC<UnitalicBoldTextProps> = ({ text }) => {\n  return <b className={ 'font-style-normal mr-1' }>{ text }</b>\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { DateTime } from 'luxon'\nimport React from 'react'\nimport { ListGroup, Modal } from 'react-bootstrap'\nimport { Trans } from 'react-i18next'\nimport { CommonModal } from '../../../common/modals/common-modal'\nimport { DocumentInfoLine } from './document-info-line'\nimport { DocumentInfoLineWithTimeMode, DocumentInfoTimeLine } from './document-info-time-line'\nimport { UnitalicBoldText } from './unitalic-bold-text'\n\nexport interface DocumentInfoModalProps {\n  show: boolean,\n  onHide: () => void\n}\n\nexport const DocumentInfoModal: React.FC<DocumentInfoModalProps> = ({ show, onHide }) => {\n  return (\n    <CommonModal\n      show={ show }\n      onHide={ onHide }\n      closeButton={ true }\n      titleI18nKey={ 'editor.modal.documentInfo.title' }>\n      <Modal.Body>\n        <ListGroup>\n          <ListGroup.Item>\n            <DocumentInfoTimeLine\n              size={ '2x' }\n              mode={ DocumentInfoLineWithTimeMode.CREATED }\n              time={ DateTime.local()\n                             .minus({ days: 11 }) }\n              userName={ 'Tilman' }\n              profileImageSrc={ '/img/avatar.png' }/>\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <DocumentInfoTimeLine\n              size={ '2x' }\n              mode={ DocumentInfoLineWithTimeMode.EDITED }\n              time={ DateTime.local()\n                             .minus({ minutes: 3 }) }\n              userName={ 'Philip' }\n              profileImageSrc={ '/img/avatar.png' }/>\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <DocumentInfoLine icon={ 'users' } size={ '2x' }>\n              <Trans i18nKey='editor.modal.documentInfo.usersContributed'>\n                <UnitalicBoldText text={ '42' }/>\n              </Trans>\n            </DocumentInfoLine>\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <DocumentInfoLine icon={ 'history' } size={ '2x' }>\n              <Trans i18nKey='editor.modal.documentInfo.revisions'>\n                <UnitalicBoldText text={ '192' }/>\n              </Trans>\n            </DocumentInfoLine>\n          </ListGroup.Item>\n        </ListGroup>\n      </Modal.Body>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { DocumentInfoModal } from '../document-bar/document-info/document-info-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const DocumentInfoSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ className, hide }) => {\n  const [showModal, setShowModal] = useState(false)\n  useTranslation()\n\n  return (\n    <Fragment>\n      <SidebarButton hide={ hide } className={ className } icon={ 'line-chart' } onClick={ () => setShowModal(true) }>\n        <Trans i18nKey={ 'editor.modal.documentInfo.title' }/>\n      </SidebarButton>\n      <DocumentInfoModal show={ showModal } onHide={ () => setShowModal(false) }/>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback } from 'react'\nimport sanitize from 'sanitize-filename'\nimport { store } from '../../../redux'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { useNoteMarkdownContent } from '../../../hooks/common/use-note-markdown-content'\nimport { download } from '../../common/download/download'\nimport { SidebarButton } from './sidebar-button'\n\nexport const ExportMarkdownSidebarEntry: React.FC = () => {\n  const { t } = useTranslation()\n  const markdownContent = useNoteMarkdownContent()\n  const onClick = useCallback(() => {\n    const sanitized = sanitize(store.getState().noteDetails.noteTitle)\n    download(markdownContent, `${ sanitized !== '' ? sanitized : t('editor.untitledNote') }.md`, 'text/markdown')\n  }, [markdownContent, t])\n\n  return (\n    <SidebarButton data-cy={ 'menu-export-markdown' } onClick={ onClick } icon={ 'file-text' }>\n      <Trans i18nKey={ 'editor.export.markdown-file' }/>\n    </SidebarButton>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { SidebarMenuProps } from './types'\n\nexport const SidebarMenu: React.FC<SidebarMenuProps> = ({ children, expand }) => {\n  return (\n    <div className={ `sidebar-menu ${ expand ? 'show' : '' }` }>\n      <div className={ `d-flex flex-column` }>\n        { children }\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useCallback } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport links from '../../../links.json'\nimport { ExportMarkdownSidebarEntry } from './export-markdown-sidebar-entry'\nimport { SidebarButton } from './sidebar-button'\nimport { SidebarMenu } from './sidebar-menu'\nimport { DocumentSidebarMenuSelection, SpecificSidebarMenuProps } from './types'\n\nexport const ExportMenuSidebarMenu: React.FC<SpecificSidebarMenuProps> = (\n  {\n    className,\n    menuId,\n    onClick,\n    selectedMenuId\n  }) => {\n  useTranslation()\n\n  const hide = selectedMenuId !== DocumentSidebarMenuSelection.NONE && selectedMenuId !== menuId\n  const expand = selectedMenuId === menuId\n  const onClickHandler = useCallback(() => {\n    onClick(menuId)\n  }, [menuId, onClick])\n\n  return (\n    <Fragment>\n      <SidebarButton data-cy={ 'menu-export' } hide={ hide } icon={ expand ? 'arrow-left' : 'cloud-download' }\n                     className={ className } onClick={ onClickHandler }>\n        <Trans i18nKey={ 'editor.documentBar.export' }/>\n      </SidebarButton>\n      <SidebarMenu expand={ expand }>\n        <SidebarButton icon={ 'github' }>\n          Gist\n        </SidebarButton>\n        <SidebarButton icon={ 'gitlab' }>\n          Gitlab Snippet\n        </SidebarButton>\n\n        <ExportMarkdownSidebarEntry/>\n\n        <SidebarButton icon={ 'file-code-o' }>\n          HTML\n        </SidebarButton>\n        <SidebarButton icon={ 'file-code-o' }>\n          <Trans i18nKey='editor.export.rawHtml'/>\n        </SidebarButton>\n        <SidebarButton icon={ 'file-pdf-o' }>\n          <a className='small text-muted' dir={ 'auto' } href={ links.faq } target={ '_blank' }\n             rel='noopener noreferrer'>\n            <Trans i18nKey={ 'editor.export.pdf' }/>\n            &nbsp;\n            <span className={ 'text-primary' }>\n                <Trans i18nKey={ 'common.why' }/>\n              </span>\n          </a>\n        </SidebarButton>\n      </SidebarMenu>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { ToggleButton, ToggleButtonGroup } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\n\nexport interface PermissionGroupEntryProps {\n  title: string\n  editMode: GroupMode\n  onChangeEditMode: (newMode: GroupMode) => void\n}\n\nexport enum GroupMode {\n  NONE,\n  VIEW,\n  EDIT,\n}\n\nexport const PermissionGroupEntry: React.FC<PermissionGroupEntryProps> = ({ title, editMode, onChangeEditMode }) => {\n  const { t } = useTranslation()\n\n  return (\n    <li className={ 'list-group-item d-flex flex-row justify-content-between align-items-center' }>\n      <Trans i18nKey={ title }/>\n      <ToggleButtonGroup\n        type='radio'\n        name='edit-mode'\n        value={ editMode }\n        onChange={ onChangeEditMode }\n      >\n        <ToggleButton\n          title={ t('editor.modal.permissions.denyGroup', { name: t(title) }) }\n          variant={ 'light' }\n          className={ 'text-secondary' }\n          value={ GroupMode.NONE }\n        >\n          <ForkAwesomeIcon icon='ban'/>\n        </ToggleButton>\n        <ToggleButton\n          title={ t('editor.modal.permissions.viewOnlyGroup', { name: t(title) }) }\n          variant={ 'light' }\n          className={ 'text-secondary' }\n          value={ GroupMode.VIEW }\n        >\n          <ForkAwesomeIcon icon='eye'/>\n        </ToggleButton>\n        <ToggleButton\n          title={ t('editor.modal.permissions.editGroup', { name: t(title) }) }\n          variant={ 'light' }\n          className={ 'text-secondary' }\n          value={ GroupMode.EDIT }\n        >\n          <ForkAwesomeIcon icon='pencil'/>\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </li>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useCallback, useRef } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { useNoteMarkdownContent } from '../../../hooks/common/use-note-markdown-content'\nimport { setNoteMarkdownContent } from '../../../redux/note-details/methods'\nimport { SidebarButton } from './sidebar-button'\nimport { UploadInput } from './upload-input'\n\nexport const ImportMarkdownSidebarEntry: React.FC = () => {\n  const markdownContent = useNoteMarkdownContent()\n  useTranslation()\n\n  const onImportMarkdown = useCallback((file: File) => {\n    return new Promise<void>((resolve, reject) => {\n      const fileReader = new FileReader()\n      fileReader.addEventListener('load', () => {\n        const newContent = fileReader.result as string\n        setNoteMarkdownContent(markdownContent.length === 0 ? newContent : `${ markdownContent }\\n${ newContent }`)\n      })\n      fileReader.addEventListener('loadend', () => {\n        resolve()\n      })\n      fileReader.addEventListener('error', (error) => {\n        reject(error)\n      })\n      fileReader.readAsText(file)\n    })\n  }, [markdownContent])\n\n  const clickRef = useRef<(() => void)>()\n  const buttonClick = useCallback(() => {\n    clickRef.current?.()\n  }, [])\n\n  return (\n    <Fragment>\n      <SidebarButton data-cy={ 'menu-import-markdown' } icon={ 'file-text-o' } onClick={ buttonClick }>\n        <Trans i18nKey={ 'editor.import.file' }/>\n      </SidebarButton>\n      <UploadInput onLoad={ onImportMarkdown } data-cy={ 'menu-import-markdown-input' }\n                   acceptedFiles={ '.md, text/markdown, text/plain' } onClickRef={ clickRef }/>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useCallback } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { ImportMarkdownSidebarEntry } from './import-markdown-sidebar-entry'\nimport { SidebarButton } from './sidebar-button'\nimport { SidebarMenu } from './sidebar-menu'\nimport { DocumentSidebarMenuSelection, SpecificSidebarMenuProps } from './types'\n\nexport const ImportMenuSidebarMenu: React.FC<SpecificSidebarMenuProps> = (\n  {\n    className,\n    menuId,\n    onClick,\n    selectedMenuId\n  }) => {\n\n  useTranslation()\n\n  const hide = selectedMenuId !== DocumentSidebarMenuSelection.NONE && selectedMenuId !== menuId\n  const expand = selectedMenuId === menuId\n  const onClickHandler = useCallback(() => {\n    onClick(menuId)\n  }, [menuId, onClick])\n\n  return (\n    <Fragment>\n      <SidebarButton data-cy={ 'menu-import' } hide={ hide } icon={ expand ? 'arrow-left' : 'cloud-upload' }\n                     className={ className } onClick={ onClickHandler }>\n        <Trans i18nKey={ 'editor.documentBar.import' }/>\n      </SidebarButton>\n      <SidebarMenu expand={ expand }>\n        <SidebarButton icon={ 'github' }>\n          Gist\n        </SidebarButton>\n        <SidebarButton icon={ 'gitlab' }>\n          Gitlab Snippet\n        </SidebarButton>\n        <SidebarButton icon={ 'clipboard' }>\n          <Trans i18nKey={ 'editor.import.clipboard' }/>\n        </SidebarButton>\n        <ImportMarkdownSidebarEntry/>\n      </SidebarMenu>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport interface CacheEntry<T> {\n  entryCreated: number\n  data: T\n}\n\nexport class Cache<K, V> {\n  readonly entryLifetime: number\n  readonly maxEntries: number\n  private store = new Map<K, CacheEntry<V>>()\n\n  constructor(lifetime: number, maxEntries = 0) {\n    if (lifetime < 0) {\n      throw new Error('Cache entry lifetime can not be less than 0 seconds.')\n    }\n    this.entryLifetime = lifetime\n    this.maxEntries = maxEntries\n  }\n\n  has(key: K): boolean {\n    if (!this.store.has(key)) {\n      return false\n    }\n    const entry = this.store.get(key)\n    return (!!entry && entry.entryCreated >= (Date.now() - this.entryLifetime * 1000))\n  }\n\n  get(key: K): V {\n    const entry = this.store.get(key)\n    if (!entry) {\n      throw new Error('This cache entry does not exist. Check with \".has()\" before using \".get()\".')\n    }\n    return entry.data\n  }\n\n  put(key: K, value: V): void {\n    if (this.maxEntries > 0 && this.store.size === this.maxEntries) {\n      this.store.delete(this.store.keys()\n                            .next().value)\n    }\n    this.store.set(key, {\n      entryCreated: Date.now(),\n      data: value\n    })\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Cache } from '../../components/common/cache/cache'\nimport { defaultFetchConfig, expectResponseCode, getApiUrl } from '../utils'\nimport { UserResponse } from './types'\n\nconst cache = new Cache<string, UserResponse>(600)\n\nexport const getUserById = async (userid: string): Promise<UserResponse> => {\n  if (cache.has(userid)) {\n    return cache.get(userid)\n  }\n  const response = await fetch(`${ getApiUrl() }/users/${ userid }`, {\n    ...defaultFetchConfig\n  })\n  expectResponseCode(response)\n  const userData = (await response.json()) as UserResponse\n  cache.put(userid, userData)\n  return userData\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { ReactElement, useState } from 'react'\nimport { Button, FormControl, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\nimport { Principal } from './permission-modal'\n\nexport interface PermissionListProps {\n  list: Principal[]\n  identifier: (entry: Principal) => ReactElement\n  changeEditMode: (id: Principal['id'], canEdit: Principal['canEdit']) => void\n  removeEntry: (id: Principal['id']) => void\n  createEntry: (name: Principal['name']) => void\n  editI18nKey: string\n  viewI18nKey: string\n  removeI18nKey: string\n  addI18nKey: string\n}\n\nexport enum EditMode {\n  VIEW,\n  EDIT\n}\n\nexport const PermissionList: React.FC<PermissionListProps> = ({ list, identifier, changeEditMode, removeEntry, createEntry, editI18nKey, viewI18nKey, removeI18nKey, addI18nKey }) => {\n  const { t } = useTranslation()\n  const [newEntry, setNewEntry] = useState('')\n\n  const addEntry = () => {\n    createEntry(newEntry)\n    setNewEntry('')\n  }\n\n  return (\n    <ul className={ 'list-group' }>\n      { list.map(entry => (\n        <li key={ entry.id } className={ 'list-group-item d-flex flex-row justify-content-between align-items-center' }>\n          { identifier(entry) }\n          <div>\n            <Button\n              variant='light'\n              className={ 'text-danger mr-2' }\n              title={ t(removeI18nKey, { name: entry.name }) }\n              onClick={ () => removeEntry(entry.id) }\n            >\n              <ForkAwesomeIcon icon={ 'times' }/>\n            </Button>\n            <ToggleButtonGroup\n              type='radio'\n              name='edit-mode'\n              value={ entry.canEdit ? EditMode.EDIT : EditMode.VIEW }\n              onChange={ (value: EditMode) => changeEditMode(entry.id, value === EditMode.EDIT) }\n            >\n              <ToggleButton\n                title={ t(viewI18nKey, { name: entry.name }) }\n                variant={ 'light' }\n                className={ 'text-secondary' }\n                value={ EditMode.VIEW }\n              >\n                <ForkAwesomeIcon icon='eye'/>\n              </ToggleButton>\n              <ToggleButton\n                title={ t(editI18nKey, { name: entry.name }) }\n                variant={ 'light' }\n                className={ 'text-secondary' }\n                value={ EditMode.EDIT }\n              >\n                <ForkAwesomeIcon icon='pencil'/>\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </li>\n      )) }\n      <li className={ 'list-group-item' }>\n        <form onSubmit={ event => {\n          event.preventDefault()\n          addEntry()\n        } }>\n          <InputGroup className={ 'mr-1 mb-1' }>\n            <FormControl\n              value={ newEntry }\n              placeholder={ t(addI18nKey) }\n              aria-label={ t(addI18nKey) }\n              onChange={ event => setNewEntry(event.currentTarget.value) }\n            />\n            <Button\n              variant='light'\n              className={ 'text-secondary ml-2' }\n              title={ t(addI18nKey) }\n              onClick={ addEntry }\n            >\n              <ForkAwesomeIcon icon={ 'plus' }/>\n            </Button>\n          </InputGroup>\n        </form>\n      </li>\n    </ul>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport './active-indicator.scss'\n\nexport enum ActiveIndicatorStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive'\n}\n\nexport interface ActiveIndicatorProps {\n  status: ActiveIndicatorStatus;\n}\n\nexport const ActiveIndicator: React.FC<ActiveIndicatorProps> = ({ status }) => {\n  return (\n    <span className={ `activeIndicator ${ status }` }/>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useEffect, useState } from 'react'\nimport { Alert, Modal } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { getUserById } from '../../../../api/users'\nimport { CommonModal } from '../../../common/modals/common-modal'\nimport { ShowIf } from '../../../common/show-if/show-if'\nimport { UserAvatar, UserAvatarProps } from '../../../common/user-avatar/user-avatar'\nimport { GroupMode, PermissionGroupEntry } from './permission-group-entry'\nimport { PermissionList } from './permission-list'\n\nexport interface PermissionsModalProps {\n  show: boolean,\n  onHide: () => void\n}\n\nexport interface Principal {\n  id: string\n  name: string\n  photo: string\n  canEdit: boolean\n}\n\ninterface NotePermissions {\n  owner: string\n  sharedTo: {\n    username: string\n    canEdit: boolean\n  }[],\n  sharedToGroup: {\n    id: string\n    canEdit: boolean\n  }[]\n}\n\nexport const EVERYONE_GROUP_ID = '1'\nexport const EVERYONE_LOGGED_IN_GROUP_ID = '2'\n\nconst permissionsApiResponse: NotePermissions = {\n  owner: 'dermolly',\n  sharedTo: [{\n    username: 'emcrx',\n    canEdit: true\n  }, {\n    username: 'mrdrogdrog',\n    canEdit: false\n  }],\n  sharedToGroup: [{\n    id: EVERYONE_GROUP_ID,\n    canEdit: true\n  }, {\n    id: EVERYONE_LOGGED_IN_GROUP_ID,\n    canEdit: false\n  }]\n}\n\nexport const PermissionModal: React.FC<PermissionsModalProps> = ({ show, onHide }) => {\n  useTranslation()\n  const [error, setError] = useState(false)\n  const [userList, setUserList] = useState<Principal[]>([])\n  const [owner, setOwner] = useState<UserAvatarProps>()\n  const [allUserPermissions, setAllUserPermissions] = useState(GroupMode.NONE)\n  const [allLoggedInUserPermissions, setAllLoggedInUserPermissions] = useState(GroupMode.NONE)\n\n  useEffect(() => {\n    // set owner\n    getUserById(permissionsApiResponse.owner)\n      .then(response => {\n        setOwner({\n          name: response.name,\n          photo: response.photo\n        })\n      })\n      .catch(() => setError(true))\n    // set user List\n    permissionsApiResponse.sharedTo.forEach(shareUser => {\n      getUserById(shareUser.username)\n        .then(response => {\n          setUserList(list => list.concat([{\n            id: response.id,\n            name: response.name,\n            photo: response.photo,\n            canEdit: shareUser.canEdit\n          }]))\n        })\n        .catch(() => setError(true))\n    })\n    // set group List\n    permissionsApiResponse.sharedToGroup.forEach(sharedGroup => {\n      if (sharedGroup.id === EVERYONE_GROUP_ID) {\n        setAllUserPermissions(sharedGroup.canEdit ? GroupMode.EDIT : GroupMode.VIEW)\n      } else if (sharedGroup.id === EVERYONE_LOGGED_IN_GROUP_ID) {\n        setAllLoggedInUserPermissions(sharedGroup.canEdit ? GroupMode.EDIT : GroupMode.VIEW)\n      }\n    })\n  }, [])\n\n  const changeUserMode = (userId: Principal['id'], canEdit: Principal['canEdit']) => {\n    setUserList(list =>\n      list\n        .map(user => {\n          if (user.id === userId) {\n            user.canEdit = canEdit\n          }\n          return user\n        }))\n  }\n\n  const removeUser = (userId: Principal['id']) => {\n    setUserList(list => list.filter(user => user.id !== userId))\n  }\n\n  const addUser = (name: Principal['name']) => {\n    setUserList(list => list.concat({\n      id: name,\n      photo: '/img/avatar.png',\n      name: name,\n      canEdit: false\n    }))\n  }\n\n  return (\n    <CommonModal\n      show={ show }\n      onHide={ onHide }\n      closeButton={ true }\n      titleI18nKey={ 'editor.modal.permissions.title' }>\n      <Modal.Body>\n        <h5 className={ 'mb-3' }><Trans i18nKey={ 'editor.modal.permissions.owner' }/></h5>\n        <ShowIf condition={ error }>\n          <Alert variant='danger'>\n            <Trans i18nKey='editor.modal.permissions.error'/>\n          </Alert>\n        </ShowIf>\n        <ul className={ 'list-group' }>\n          <li className={ 'list-group-item d-flex flex-row align-items-center' }>\n            <UserAvatar name={ owner?.name ?? '' } photo={ owner?.photo ?? '' }/>\n          </li>\n        </ul>\n        <h5 className={ 'my-3' }><Trans i18nKey={ 'editor.modal.permissions.sharedWithUsers' }/></h5>\n        <PermissionList\n          list={ userList }\n          identifier={ entry => (<UserAvatar name={ entry.name } photo={ entry.photo }/>) }\n          changeEditMode={ changeUserMode }\n          removeEntry={ removeUser }\n          createEntry={ addUser }\n          editI18nKey={ 'editor.modal.permissions.editUser' }\n          viewI18nKey={ 'editor.modal.permissions.viewOnlyUser' }\n          removeI18nKey={ 'editor.modal.permissions.removeUser' }\n          addI18nKey={ 'editor.modal.permissions.addUser' }\n        />\n        <h5 className={ 'my-3' }><Trans i18nKey={ 'editor.modal.permissions.sharedWithGroups' }/></h5>\n        <ul className={ 'list-group' }>\n          <PermissionGroupEntry\n            title={ 'editor.modal.permissions.allUser' }\n            editMode={ allUserPermissions }\n            onChangeEditMode={ setAllUserPermissions }\n          />\n          <PermissionGroupEntry\n            title={ 'editor.modal.permissions.allLoggedInUser' }\n            editMode={ allLoggedInUserPermissions }\n            onChangeEditMode={ setAllLoggedInUserPermissions }\n          />\n        </ul>\n      </Modal.Body>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { PermissionModal } from '../document-bar/permissions/permission-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const PermissionsSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ className, hide }) => {\n  const [showModal, setShowModal] = useState(false)\n  useTranslation()\n\n  return (\n    <Fragment>\n      <SidebarButton hide={ hide } className={ className } icon={ 'lock' } onClick={ () => setShowModal(true) }>\n        <Trans i18nKey={ 'editor.modal.permissions.title' }/>\n      </SidebarButton>\n      <PermissionModal show={ showModal } onHide={ () => setShowModal(false) }/>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useMemo } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\nimport { useParams } from 'react-router-dom'\nimport { EditorPagePathParams } from '../editor-page'\nimport { useSelector } from 'react-redux'\nimport { ApplicationState } from '../../../redux'\nimport { toggleHistoryEntryPinning } from '../../../redux/history/methods'\nimport { showErrorNotification } from '../../../redux/ui-notifications/methods'\n\nexport const PinNoteSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ className, hide }) => {\n  const { t } = useTranslation()\n  const { id } = useParams<EditorPagePathParams>()\n  const history = useSelector((state: ApplicationState) => state.history)\n\n  const isPinned = useMemo(() => {\n    const entry = history.find(entry => entry.identifier === id)\n    if (!entry) {\n      return false\n    }\n    return entry.pinStatus\n  }, [id, history])\n\n  const onPinClicked = useCallback(() => {\n    toggleHistoryEntryPinning(id).catch(\n      showErrorNotification(t('landing.history.error.updateEntry.text'))\n    )\n  }, [id, t])\n\n  return (\n    <SidebarButton icon={ 'thumb-tack' } hide={ hide } onClick={ onPinClicked }\n                   className={ `${ className ?? '' } ${ isPinned ? 'icon-highlighted' : '' }` }>\n      <Trans i18nKey={ isPinned ? 'editor.documentBar.pinnedToHistory' : 'editor.documentBar.pinNoteToHistory' }/>\n    </SidebarButton>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Cache } from '../../components/common/cache/cache'\nimport { defaultFetchConfig, expectResponseCode, getApiUrl } from '../utils'\nimport { Revision, RevisionListEntry } from './types'\n\nconst revisionCache = new Cache<string, Revision>(3600)\n\nexport const getRevision = async (noteId: string, timestamp: number): Promise<Revision> => {\n  const cacheKey = `${ noteId }:${ timestamp }`\n  if (revisionCache.has(cacheKey)) {\n    return revisionCache.get(cacheKey)\n  }\n  const response = await fetch(getApiUrl() + `notes/${ noteId }/revisions/${ timestamp }`, {\n    ...defaultFetchConfig\n  })\n  expectResponseCode(response)\n  const revisionData = await response.json() as Revision\n  revisionCache.put(cacheKey, revisionData)\n  return revisionData\n}\n\nexport const getAllRevisions = async (noteId: string): Promise<RevisionListEntry[]> => {\n  // TODO Change 'revisions-list' to 'revisions' as soon as the backend is ready to serve some data!\n  const response = await fetch(getApiUrl() + `notes/${ noteId }/revisions-list`, {\n    ...defaultFetchConfig\n  })\n  expectResponseCode(response)\n  return await response.json() as Promise<RevisionListEntry[]>\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { DateTime } from 'luxon'\nimport React from 'react'\nimport { ListGroup } from 'react-bootstrap'\nimport { Trans } from 'react-i18next'\nimport { RevisionListEntry } from '../../../../api/revisions/types'\nimport { UserResponse } from '../../../../api/users/types'\nimport { ForkAwesomeIcon } from '../../../common/fork-awesome/fork-awesome-icon'\nimport { UserAvatar } from '../../../common/user-avatar/user-avatar'\n\nexport interface RevisionModalListEntryProps {\n  active: boolean\n  onClick: () => void\n  revision: RevisionListEntry\n  revisionAuthorListMap: Map<number, UserResponse[]>\n}\n\nexport const RevisionModalListEntry: React.FC<RevisionModalListEntryProps> = ({ active, onClick, revision, revisionAuthorListMap }) => (\n  <ListGroup.Item\n    as='li'\n    active={ active }\n    onClick={ onClick }\n    className='user-select-none revision-item d-flex flex-column'\n  >\n    <span>\n      <ForkAwesomeIcon icon={ 'clock-o' } className='mx-2'/>\n      { DateTime.fromMillis(revision.timestamp * 1000)\n                .toFormat('DDDD T') }\n    </span>\n    <span>\n      <ForkAwesomeIcon icon={ 'file-text-o' } className='mx-2'/>\n      <Trans i18nKey={ 'editor.modal.revision.length' }/>: { revision.length }\n    </span>\n    <span className={ 'd-flex flex-row my-1 align-items-center' }>\n      <ForkAwesomeIcon icon={ 'user-o' } className={ 'mx-2' }/>\n      {\n        revisionAuthorListMap.get(revision.timestamp)\n                             ?.map((user, index) => {\n                               return (\n                                 <UserAvatar name={ user.name } photo={ user.photo } showName={ false }\n                                             additionalClasses={ 'mx-1' } key={ index }/>\n                               )\n                             })\n      }\n    </span>\n  </ListGroup.Item>\n)\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Alert, Button, Col, ListGroup, Modal, Row } from 'react-bootstrap'\nimport ReactDiffViewer, { DiffMethod } from 'react-diff-viewer'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { useParams } from 'react-router'\nimport { getAllRevisions, getRevision } from '../../../../api/revisions'\nimport { Revision, RevisionListEntry } from '../../../../api/revisions/types'\nimport { UserResponse } from '../../../../api/users/types'\nimport { useIsDarkModeActivated } from '../../../../hooks/common/use-is-dark-mode-activated'\nimport { useNoteMarkdownContent } from '../../../../hooks/common/use-note-markdown-content'\nimport { CommonModal } from '../../../common/modals/common-modal'\nimport { ShowIf } from '../../../common/show-if/show-if'\nimport { RevisionModalListEntry } from './revision-modal-list-entry'\nimport './revision-modal.scss'\nimport { downloadRevision, getUserDataForRevision } from './utils'\n\nexport interface PermissionsModalProps {\n  show: boolean,\n  onHide: () => void\n}\n\nexport const RevisionModal: React.FC<PermissionsModalProps> = ({ show, onHide }) => {\n  useTranslation()\n  const [revisions, setRevisions] = useState<RevisionListEntry[]>([])\n  const [selectedRevisionTimestamp, setSelectedRevisionTimestamp] = useState<number | null>(null)\n  const [selectedRevision, setSelectedRevision] = useState<Revision | null>(null)\n  const [error, setError] = useState(false)\n  const revisionAuthorListMap = useRef(new Map<number, UserResponse[]>())\n  const darkModeEnabled = useIsDarkModeActivated()\n  const { id } = useParams<{ id: string }>()\n\n  useEffect(() => {\n    getAllRevisions(id)\n      .then(fetchedRevisions => {\n        fetchedRevisions.forEach(revision => {\n          const authorData = getUserDataForRevision(revision.authors)\n          revisionAuthorListMap.current.set(revision.timestamp, authorData)\n        })\n        setRevisions(fetchedRevisions)\n        if (fetchedRevisions.length >= 1) {\n          setSelectedRevisionTimestamp(fetchedRevisions[0].timestamp)\n        }\n      })\n      .catch(() => setError(true))\n  }, [setRevisions, setError, id])\n\n  useEffect(() => {\n    if (selectedRevisionTimestamp === null) {\n      return\n    }\n    getRevision(id, selectedRevisionTimestamp)\n      .then(fetchedRevision => {\n        setSelectedRevision(fetchedRevision)\n      })\n      .catch(() => setError(true))\n  }, [selectedRevisionTimestamp, id])\n\n  const markdownContent = useNoteMarkdownContent()\n\n  return (\n    <CommonModal show={ show } onHide={ onHide } titleI18nKey={ 'editor.modal.revision.title' } icon={ 'history' }\n                 closeButton={ true } size={ 'xl' } additionalClasses='revision-modal'>\n      <Modal.Body>\n        <Row>\n          <Col lg={ 4 } className={ 'scroll-col' }>\n            <ListGroup as='ul'>\n              {\n                revisions.map((revision, revisionIndex) => (\n                  <RevisionModalListEntry\n                    key={ revisionIndex }\n                    active={ selectedRevisionTimestamp === revision.timestamp }\n                    revision={ revision }\n                    revisionAuthorListMap={ revisionAuthorListMap.current }\n                    onClick={ () => setSelectedRevisionTimestamp(revision.timestamp) }\n                  />\n                ))\n              }\n            </ListGroup>\n          </Col>\n          <Col lg={ 8 } className={ 'scroll-col' }>\n            <ShowIf condition={ error }>\n              <Alert variant='danger'>\n                <Trans i18nKey='editor.modal.revision.error'/>\n              </Alert>\n            </ShowIf>\n            <ShowIf condition={ !error && !!selectedRevision }>\n              <ReactDiffViewer\n                oldValue={ selectedRevision?.content }\n                newValue={ markdownContent }\n                splitView={ false }\n                compareMethod={ DiffMethod.WORDS }\n                useDarkTheme={ darkModeEnabled }\n              />\n            </ShowIf>\n          </Col>\n        </Row>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button\n          variant='secondary'\n          onClick={ onHide }>\n          <Trans i18nKey={ 'common.close' }/>\n        </Button>\n        <Button\n          variant='danger'\n          disabled={ !selectedRevisionTimestamp }\n          onClick={ () => window.alert('Not yet implemented. Requires websocket.') }>\n          <Trans i18nKey={ 'editor.modal.revision.revertButton' }/>\n        </Button>\n        <Button\n          variant='primary'\n          disabled={ !selectedRevisionTimestamp }\n          onClick={ () => downloadRevision(id, selectedRevision) }>\n          <Trans i18nKey={ 'editor.modal.revision.download' }/>\n        </Button>\n      </Modal.Footer>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Revision } from '../../../../api/revisions/types'\nimport { getUserById } from '../../../../api/users'\nimport { UserResponse } from '../../../../api/users/types'\nimport { download } from '../../../common/download/download'\n\nexport const downloadRevision = (noteId: string, revision: Revision | null): void => {\n  if (!revision) {\n    return\n  }\n  download(revision.content, `${ noteId }-${ revision.timestamp }.md`, 'text/markdown')\n}\n\nexport const getUserDataForRevision = (authors: string[]): UserResponse[] => {\n  const users: UserResponse[] = []\n  authors.forEach((author, index) => {\n    if (index > 9) {\n      return\n    }\n    getUserById(author)\n      .then(userData => {\n        users.push(userData)\n      })\n      .catch((error) => console.error(error))\n  })\n  return users\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans } from 'react-i18next'\nimport { RevisionModal } from '../document-bar/revisions/revision-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const RevisionSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ className, hide }) => {\n  const [showModal, setShowModal] = useState(false)\n\n  return (\n    <Fragment>\n      <SidebarButton hide={ hide } className={ className } icon={ 'history' } onClick={ () => setShowModal(true) }>\n        <Trans i18nKey={ 'editor.modal.revision.title' }/>\n      </SidebarButton>\n      <RevisionModal show={ showModal } onHide={ () => setShowModal(false) }/>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport equal from 'fast-deep-equal'\nimport React from 'react'\nimport { Modal } from 'react-bootstrap'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\nimport { useParams } from 'react-router-dom'\nimport { useFrontendBaseUrl } from '../../../../hooks/common/use-frontend-base-url'\nimport { ApplicationState } from '../../../../redux'\nimport { CopyableField } from '../../../common/copyable/copyable-field/copyable-field'\nimport { CommonModal } from '../../../common/modals/common-modal'\nimport { ShowIf } from '../../../common/show-if/show-if'\nimport { EditorPagePathParams } from '../../editor-page'\nimport { NoteType } from '../../note-frontmatter/note-frontmatter'\n\nexport interface ShareModalProps {\n  show: boolean,\n  onHide: () => void\n}\n\nexport const ShareModal: React.FC<ShareModalProps> = ({ show, onHide }) => {\n  useTranslation()\n  const noteFrontmatter = useSelector((state: ApplicationState) => state.noteDetails.frontmatter, equal)\n  const editorMode = useSelector((state: ApplicationState) => state.editorConfig.editorMode)\n  const baseUrl = useFrontendBaseUrl()\n  const { id } = useParams<EditorPagePathParams>()\n\n  return (\n    <CommonModal\n      show={ show }\n      onHide={ onHide }\n      closeButton={ true }\n      titleI18nKey={ 'editor.modal.shareLink.title' }>\n      <Modal.Body>\n        <Trans i18nKey={ 'editor.modal.shareLink.editorDescription' }/>\n        <CopyableField content={ `${ baseUrl }/n/${ id }?${ editorMode }` } nativeShareButton={ true }\n                       url={ `${ baseUrl }/n/${ id }?${ editorMode }` }/>\n        <ShowIf condition={ noteFrontmatter.type === NoteType.SLIDE }>\n          <Trans i18nKey={ 'editor.modal.shareLink.slidesDescription' }/>\n          <CopyableField content={ `${ baseUrl }/p/${ id }` } nativeShareButton={ true }\n                         url={ `${ baseUrl }/p/${ id }` }/>\n        </ShowIf>\n        <ShowIf condition={ noteFrontmatter.type === '' }>\n          <Trans i18nKey={ 'editor.modal.shareLink.viewOnlyDescription' }/>\n          <CopyableField content={ `${ baseUrl }/s/${ id }` } nativeShareButton={ true }\n                         url={ `${ baseUrl }/s/${ id }` }/>\n        </ShowIf>\n      </Modal.Body>\n    </CommonModal>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { ShareModal } from '../document-bar/share/share-modal'\nimport { SidebarButton } from './sidebar-button'\nimport { SpecificSidebarEntryProps } from './types'\n\nexport const ShareSidebarEntry: React.FC<SpecificSidebarEntryProps> = ({ className, hide }) => {\n  const [showModal, setShowModal] = useState(false)\n  useTranslation()\n\n  return (\n    <Fragment>\n      <SidebarButton hide={ hide } className={ className } icon={ 'share' } onClick={ () => setShowModal(true) }>\n        <Trans i18nKey={ 'editor.modal.shareLink.title' }/>\n      </SidebarButton>\n      <ShareModal show={ showModal } onHide={ () => setShowModal(false) }/>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useMemo, useRef, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useSelector } from 'react-redux'\nimport { useApplyDarkMode } from '../../hooks/common/use-apply-dark-mode'\nimport { useDocumentTitleWithNoteTitle } from '../../hooks/common/use-document-title-with-note-title'\nimport { useNoteMarkdownContent } from '../../hooks/common/use-note-markdown-content'\nimport { ApplicationState } from '../../redux'\nimport {\n  SetCheckboxInMarkdownContent,\n  setNoteFrontmatter,\n  setNoteMarkdownContent,\n  updateNoteTitleByFirstHeading\n} from '../../redux/note-details/methods'\nimport { MotdBanner } from '../common/motd-banner/motd-banner'\nimport { ShowIf } from '../common/show-if/show-if'\nimport { ErrorWhileLoadingNoteAlert } from '../document-read-only-page/ErrorWhileLoadingNoteAlert'\nimport { LoadingNoteAlert } from '../document-read-only-page/LoadingNoteAlert'\nimport { AppBar, AppBarMode } from './app-bar/app-bar'\nimport { EditorMode } from './app-bar/editor-view-mode'\nimport { EditorPane } from './editor-pane/editor-pane'\nimport { useLoadNoteFromServer } from './hooks/useLoadNoteFromServer'\nimport { useViewModeShortcuts } from './hooks/useViewModeShortcuts'\nimport { RenderIframe } from './renderer-pane/render-iframe'\nimport { Sidebar } from './sidebar/sidebar'\nimport { Splitter } from './splitter/splitter'\nimport { DualScrollState, ScrollState } from './synced-scroll/scroll-props'\nimport { RendererType } from '../render-page/rendering-message'\nimport { useEditorModeFromUrl } from './hooks/useEditorModeFromUrl'\nimport { UiNotifications } from '../notifications/ui-notifications'\nimport { useNotificationTest } from './use-notification-test'\nimport { IframeCommunicatorContextProvider } from './render-context/iframe-communicator-context-provider'\nimport { useUpdateLocalHistoryEntry } from './hooks/useUpdateLocalHistoryEntry'\n\nexport interface EditorPagePathParams {\n  id: string\n}\n\nexport enum ScrollSource {\n  EDITOR,\n  RENDERER\n}\n\nexport const EditorPage: React.FC = () => {\n  useTranslation()\n  const markdownContent = useNoteMarkdownContent()\n  const scrollSource = useRef<ScrollSource>(ScrollSource.EDITOR)\n\n  const editorMode: EditorMode = useSelector((state: ApplicationState) => state.editorConfig.editorMode)\n  const editorSyncScroll: boolean = useSelector((state: ApplicationState) => state.editorConfig.syncScroll)\n\n  const [scrollState, setScrollState] = useState<DualScrollState>(() => ({\n    editorScrollState: { firstLineInView: 1, scrolledPercentage: 0 },\n    rendererScrollState: { firstLineInView: 1, scrolledPercentage: 0 }\n  }))\n\n  const onMarkdownRendererScroll = useCallback((newScrollState: ScrollState) => {\n    if (scrollSource.current === ScrollSource.RENDERER && editorSyncScroll) {\n      setScrollState((old) => ({ editorScrollState: newScrollState, rendererScrollState: old.rendererScrollState }))\n    }\n  }, [editorSyncScroll])\n\n  const onEditorScroll = useCallback((newScrollState: ScrollState) => {\n    if (scrollSource.current === ScrollSource.EDITOR && editorSyncScroll) {\n      setScrollState((old) => ({ rendererScrollState: newScrollState, editorScrollState: old.editorScrollState }))\n    }\n  }, [editorSyncScroll])\n\n  useViewModeShortcuts()\n  useApplyDarkMode()\n  useDocumentTitleWithNoteTitle()\n  useEditorModeFromUrl()\n\n  const [error, loading] = useLoadNoteFromServer()\n\n  useUpdateLocalHistoryEntry(!error && !loading)\n\n  const setRendererToScrollSource = useCallback(() => {\n    scrollSource.current = ScrollSource.RENDERER\n  }, [])\n\n  const setEditorToScrollSource = useCallback(() => {\n    scrollSource.current = ScrollSource.EDITOR\n  }, [])\n\n  useNotificationTest()\n\n  const leftPane = useMemo(() =>\n      <EditorPane\n        onContentChange={ setNoteMarkdownContent }\n        content={ markdownContent }\n        scrollState={ scrollState.editorScrollState }\n        onScroll={ onEditorScroll }\n        onMakeScrollSource={ setEditorToScrollSource }/>\n    , [markdownContent, onEditorScroll, scrollState.editorScrollState, setEditorToScrollSource])\n\n  const rightPane = useMemo(() =>\n      <RenderIframe\n        frameClasses={ 'h-100 w-100' }\n        markdownContent={ markdownContent }\n        onMakeScrollSource={ setRendererToScrollSource }\n        onFirstHeadingChange={ updateNoteTitleByFirstHeading }\n        onTaskCheckedChange={ SetCheckboxInMarkdownContent }\n        onFrontmatterChange={ setNoteFrontmatter }\n        onScroll={ onMarkdownRendererScroll }\n        scrollState={ scrollState.rendererScrollState }\n        rendererType={ RendererType.DOCUMENT }/>\n    , [markdownContent, onMarkdownRendererScroll, scrollState.rendererScrollState,\n      setRendererToScrollSource])\n\n  return (\n    <IframeCommunicatorContextProvider>\n      <UiNotifications/>\n      <MotdBanner/>\n      <div className={ 'd-flex flex-column vh-100' }>\n        <AppBar mode={ AppBarMode.EDITOR }/>\n        <div className={ 'container' }>\n          <ErrorWhileLoadingNoteAlert show={ error }/>\n          <LoadingNoteAlert show={ loading }/>\n        </div>\n        <ShowIf condition={ !error && !loading }>\n          <div className={ 'flex-fill d-flex h-100 w-100 overflow-hidden flex-row' }>\n            <Splitter\n              showLeft={ editorMode === EditorMode.EDITOR || editorMode === EditorMode.BOTH }\n              left={ leftPane }\n              showRight={ editorMode === EditorMode.PREVIEW || editorMode === EditorMode.BOTH }\n              right={ rightPane }\n              containerClassName={ 'overflow-hidden' }/>\n            <Sidebar/>\n          </div>\n        </ShowIf>\n      </div>\n    </IframeCommunicatorContextProvider>\n  )\n}\n\nexport default EditorPage\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport { UserAvatar } from '../../../common/user-avatar/user-avatar'\nimport { ActiveIndicator, ActiveIndicatorStatus } from './active-indicator'\nimport './user-line.scss'\n\nexport interface UserLineProps {\n  name: string;\n  photo: string;\n  color: string;\n  status: ActiveIndicatorStatus;\n}\n\nexport const UserLine: React.FC<UserLineProps> = ({ name, photo, color, status }) => {\n  return (\n    <div className={ 'd-flex align-items-center h-100 w-100' }>\n      <div className='d-inline-flex align-items-bottom user-line-color-indicator' style={ { borderLeftColor: color } }/>\n      <UserAvatar photo={ photo } name={ name }\n                  additionalClasses={ 'flex-fill overflow-hidden px-2 text-nowrap w-100' }/>\n      <div className={ 'active-indicator-container' }>\n        <ActiveIndicator status={ status }/>\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { Fragment, useCallback, useEffect, useRef, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { SidebarButton } from '../sidebar-button'\nimport { SidebarMenu } from '../sidebar-menu'\nimport { DocumentSidebarMenuSelection, SpecificSidebarMenuProps } from '../types'\nimport { ActiveIndicatorStatus } from './active-indicator'\nimport './online-counter.scss'\nimport { UserLine } from './user-line'\n\nexport const UsersOnlineSidebarMenu: React.FC<SpecificSidebarMenuProps> = ({\n  className,\n  menuId,\n  onClick,\n  selectedMenuId\n}) => {\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const [counter] = useState(2)\n  useTranslation()\n\n  useEffect(() => {\n    const value = `${ counter }`\n    buttonRef.current?.style.setProperty('--users-online', `\"${ value }\"`)\n  }, [counter])\n\n  const hide = selectedMenuId !== DocumentSidebarMenuSelection.NONE && selectedMenuId !== menuId\n  const expand = selectedMenuId === menuId\n  const onClickHandler = useCallback(() => {\n    onClick(menuId)\n  }, [menuId, onClick])\n\n  return (\n    <Fragment>\n      <SidebarButton hide={ hide } buttonRef={ buttonRef } onClick={ onClickHandler }\n                     icon={ expand ? 'arrow-left' : 'users' }\n                     variant={ 'primary' } className={ `online-entry ${ className ?? '' }` }>\n        <Trans i18nKey={ 'editor.onlineStatus.online' }/>\n      </SidebarButton>\n      <SidebarMenu expand={ expand }>\n        <SidebarButton>\n          <UserLine name=\"Philip Molares\" photo=\"/img/avatar.png\" color=\"red\"\n                    status={ ActiveIndicatorStatus.INACTIVE }/>\n        </SidebarButton>\n        <SidebarButton>\n          <UserLine name=\"Tilman Vatteroth\" photo=\"/img/avatar.png\" color=\"blue\"\n                    status={ ActiveIndicatorStatus.ACTIVE }/>\n        </SidebarButton>\n      </SidebarMenu>\n    </Fragment>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback, useRef, useState } from 'react'\nimport { useClickAway } from 'react-use'\nimport { DeleteNoteSidebarEntry } from './delete-note-sidebar-entry'\nimport { DocumentInfoSidebarEntry } from './document-info-sidebar-entry'\nimport { ExportMenuSidebarMenu } from './export-menu-sidebar-menu'\nimport { ImportMenuSidebarMenu } from './import-menu-sidebar-menu'\nimport { PermissionsSidebarEntry } from './permissions-sidebar-entry'\nimport { PinNoteSidebarEntry } from './pin-note-sidebar-entry'\nimport { RevisionSidebarEntry } from './revision-sidebar-entry'\nimport { ShareSidebarEntry } from './share-sidebar-entry'\nimport './style/theme.scss'\nimport { DocumentSidebarMenuSelection } from './types'\nimport { UsersOnlineSidebarMenu } from './users-online-sidebar-menu/users-online-sidebar-menu'\n\nexport const Sidebar: React.FC = () => {\n\n  const sideBarRef = useRef<HTMLDivElement>(null)\n  const [selectedMenu, setSelectedMenu] = useState<DocumentSidebarMenuSelection>(DocumentSidebarMenuSelection.NONE)\n\n  useClickAway(sideBarRef, () => {\n    setSelectedMenu(DocumentSidebarMenuSelection.NONE)\n  })\n\n  const toggleValue = useCallback((toggleValue: DocumentSidebarMenuSelection): void => {\n    const newValue = selectedMenu === toggleValue ? DocumentSidebarMenuSelection.NONE : toggleValue\n    setSelectedMenu(newValue)\n  }, [selectedMenu])\n\n  const selectionIsNotNone = selectedMenu !== DocumentSidebarMenuSelection.NONE\n\n  return (\n    <div className=\"slide-sidebar\">\n      <div ref={ sideBarRef } className={ `sidebar-inner ${ selectionIsNotNone ? 'show' : '' }` }>\n        <UsersOnlineSidebarMenu menuId={ DocumentSidebarMenuSelection.USERS_ONLINE }\n                                selectedMenuId={ selectedMenu } onClick={ toggleValue }/>\n        <DocumentInfoSidebarEntry hide={ selectionIsNotNone }/>\n        <RevisionSidebarEntry hide={ selectionIsNotNone }/>\n        <PermissionsSidebarEntry hide={ selectionIsNotNone }/>\n        <ImportMenuSidebarMenu menuId={ DocumentSidebarMenuSelection.IMPORT }\n                               selectedMenuId={ selectedMenu } onClick={ toggleValue }/>\n        <ExportMenuSidebarMenu menuId={ DocumentSidebarMenuSelection.EXPORT }\n                               selectedMenuId={ selectedMenu } onClick={ toggleValue }/>\n        <ShareSidebarEntry hide={ selectionIsNotNone }/>\n        <DeleteNoteSidebarEntry hide={ selectionIsNotNone }/>\n        <PinNoteSidebarEntry hide={ selectionIsNotNone }/>\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react'\nimport './split-divider.scss'\n\nexport interface SplitDividerProps {\n  onGrab: () => void\n}\n\nexport const SplitDivider: React.FC<SplitDividerProps> = ({ onGrab }) => {\n  return (\n    <div\n      onMouseDown={ () => onGrab() }\n      onTouchStart={ () => onGrab() }\n      className={ 'split-divider' }/>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { ReactElement, useCallback, useRef, useState } from 'react'\nimport { ShowIf } from '../../common/show-if/show-if'\nimport { SplitDivider } from './split-divider/split-divider'\nimport './splitter.scss'\n\nexport interface SplitterProps {\n  left: ReactElement\n  right: ReactElement\n  containerClassName?: string\n  showLeft: boolean\n  showRight: boolean\n}\n\nexport const Splitter: React.FC<SplitterProps> = ({ containerClassName, left, right, showLeft, showRight }) => {\n  const [split, setSplit] = useState(50)\n  const realSplit = Math.max(0, Math.min(100, (showRight ? split : 100)))\n  const [doResizing, setDoResizing] = useState(false)\n  const splitContainer = useRef<HTMLDivElement>(null)\n\n  const recalculateSize = (mouseXPosition: number): void => {\n    if (!splitContainer.current) {\n      return\n    }\n    const x = mouseXPosition - splitContainer.current.offsetLeft\n\n    const newSize = x / splitContainer.current.clientWidth\n    setSplit(newSize * 100)\n  }\n\n  const stopResizing = useCallback(() => {\n    setDoResizing(false)\n  }, [])\n\n  const onMouseMove = useCallback((mouseEvent: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (doResizing) {\n      recalculateSize(mouseEvent.pageX)\n      mouseEvent.preventDefault()\n    }\n  }, [doResizing])\n\n  const onTouchMove = useCallback((touchEvent: React.TouchEvent<HTMLDivElement>) => {\n    if (doResizing) {\n      recalculateSize(touchEvent.touches[0].pageX)\n      touchEvent.preventDefault()\n    }\n  }, [doResizing])\n\n  const onGrab = useCallback(() => setDoResizing(true), [])\n\n  return (\n    <div ref={ splitContainer } className={ `flex-fill flex-row d-flex ${ containerClassName || '' }` }\n         onMouseUp={ stopResizing } onTouchEnd={ stopResizing } onMouseMove={ onMouseMove } onTouchMove={ onTouchMove }>\n      <div className={ `splitter left ${ !showLeft ? 'd-none' : '' }` }\n           style={ { flexBasis: `calc(${ realSplit }% - 5px)` } }>\n        { left }\n      </div>\n      <ShowIf condition={ showLeft && showRight }>\n        <div className='splitter separator'>\n          <SplitDivider onGrab={ onGrab }/>\n        </div>\n      </ShowIf>\n      <div className={ `splitter right ${ !showRight ? 'd-none' : '' }` }>\n        { right }\n      </div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { useEffect } from 'react'\nimport { DEFAULT_DURATION_IN_SECONDS, dispatchUiNotification } from '../../redux/ui-notifications/methods'\n\nconst localStorageKey = 'dontshowtestnotification'\n\nexport const useNotificationTest = (): void => {\n  useEffect(() => {\n    if (window.localStorage.getItem(localStorageKey)) {\n      return\n    }\n    console.debug('[Notifications] Dispatched test notification')\n    dispatchUiNotification('Notification-Test!', 'It Works!', DEFAULT_DURATION_IN_SECONDS, 'info-circle', [{\n      label: 'Don\\'t show again', onClick: () => {\n        window.localStorage.setItem(localStorageKey, '1')\n      }\n    }])\n  }, [])\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { useEffect } from 'react'\nimport { EditorMode } from '../app-bar/editor-view-mode'\nimport { setEditorMode } from '../../../redux/editor/methods'\nimport { useLocation } from 'react-router'\n\nexport const useEditorModeFromUrl = (): void => {\n  const { search } = useLocation()\n\n  useEffect(() => {\n    const requestedMode = search.substr(1)\n    const mode = Object.values(EditorMode)\n                       .find(mode => mode === requestedMode)\n    if (mode) {\n      setEditorMode(mode)\n    }\n  }, [search])\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport equal from 'fast-deep-equal'\nimport { useEffect, useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport { ApplicationState, store } from '../../../redux'\nimport { useParams } from 'react-router-dom'\nimport { EditorPagePathParams } from '../editor-page'\nimport { HistoryEntry, HistoryEntryOrigin } from '../../../redux/history/types'\nimport { updateLocalHistoryEntry } from '../../../redux/history/methods'\n\nexport const useUpdateLocalHistoryEntry = (updateReady: boolean): void => {\n  const { id } = useParams<EditorPagePathParams>()\n  const userExists = useSelector((state: ApplicationState) => !!state.user)\n  const currentNoteTitle = useSelector((state: ApplicationState) => state.noteDetails.noteTitle)\n  const currentNoteTags = useSelector((state: ApplicationState) => state.noteDetails.frontmatter.tags)\n\n  const lastNoteTitle = useRef('')\n  const lastNoteTags = useRef<string[]>([])\n\n  useEffect(() => {\n    if (!updateReady || userExists) {\n      return\n    }\n    if (currentNoteTitle === lastNoteTitle.current && equal(currentNoteTags, lastNoteTags.current)) {\n      return\n    }\n    const history = store.getState().history\n    const entry: HistoryEntry = history.find(entry => entry.identifier === id) ?? {\n      identifier: id,\n      title: '',\n      pinStatus: false,\n      lastVisited: '',\n      tags: [],\n      origin: HistoryEntryOrigin.LOCAL\n    }\n    if (entry.origin === HistoryEntryOrigin.REMOTE) {\n      return\n    }\n    entry.title = currentNoteTitle\n    entry.tags = currentNoteTags\n    entry.lastVisited = new Date().toISOString()\n    updateLocalHistoryEntry(id, entry)\n    lastNoteTitle.current = currentNoteTitle\n    lastNoteTags.current = currentNoteTags\n  }, [updateReady, id, userExists, currentNoteTitle, currentNoteTags])\n}\n"],"sourceRoot":""}