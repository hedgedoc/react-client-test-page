{"version":3,"sources":["components/document-read-only-page/document-infobar.tsx","components/document-read-only-page/document-read-only-page.tsx"],"names":["DocumentInfobar","changedAuthor","changedTime","createdAuthor","createdTime","editable","noteId","viewCount","t","useTranslation","assetsBaseUrl","useCustomizeAssetsUrl","className","mode","DocumentInfoLineWithTimeMode","CREATED","time","userName","profileImageSrc","EDITED","Trans","i18nKey","condition","text","href","icon","title","DocumentReadOnlyPage","id","useParams","useApplyDarkMode","useDocumentTitleWithNoteTitle","onFirstHeadingChange","useCallback","updateNoteTitleByFirstHeading","onFrontmatterChange","setNoteFrontmatter","useLoadNoteFromServer","error","loading","markdownContent","useNoteMarkdownContent","noteDetails","useApplicationState","state","AppBarMode","BASIC","ErrorWhileLoadingNoteAlert","show","LoadingNoteAlert","lastChange","timestamp","createTime","frameClasses","rendererType","RendererType","DOCUMENT"],"mappings":"wWA4BaA,EAAkD,SAAC,GAQzD,IAPLC,EAOI,EAPJA,cACAC,EAMI,EANJA,YACAC,EAKI,EALJA,cACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,OACAC,EACI,EADJA,UAEQC,EAAMC,cAAND,EACFE,EAAgBC,cAEtB,OACE,sBAAKC,UAAW,wCAAhB,UACE,qBAAKA,UAAW,SAAhB,kBACA,sBAAKA,UAAW,mBAAhB,UACE,sBAAKA,UAAW,qBAAhB,UACE,cAAC,IAAD,CACEC,KAAMC,IAA6BC,QACnCC,KAAMZ,EACNa,SAAUd,EACVe,gBAAe,UAAKR,EAAL,qBAEjB,cAAC,IAAD,CACEG,KAAMC,IAA6BK,OACnCH,KAAMd,EACNe,SAAUhB,EACViB,gBAAe,UAAKR,EAAL,qBAEjB,0BAEF,uBAAME,UAAW,UAAjB,UACGL,EADH,IACc,cAACa,EAAA,EAAD,CAAOC,QAAS,6BAC5B,cAAC,IAAD,CAAQC,UAAWjB,EAAnB,SACE,cAAC,IAAD,CACEkB,KAAM,GACNC,KAAI,aAAQlB,GACZmB,KAAM,SACNb,UAAW,yCACXc,MAAOlB,EAAE,qCAKjB,qBAAKI,UAAW,SAAhB,sB,kCC/COe,EAAiC,WAAO,IAAD,EAClDlB,cACA,IAAQmB,EAAOC,cAAPD,GAERE,cACAC,cAEA,IAAMC,EAAuBC,sBAAYC,IAA+B,IAClEC,EAAsBF,sBAAYG,IAAoB,IAC5D,EAAyBC,cAAzB,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAkBC,cAClBC,EAAcC,aAAoB,SAACC,GAAD,OAAWA,EAAMF,eAEzD,OACE,sBAAK9B,UAAW,sCAAhB,UACE,cAAC,IAAD,IACA,cAAC,IAAD,CAAQC,KAAMgC,IAAWC,QACzB,sBAAKlC,UAAW,YAAhB,UACE,cAACmC,EAAA,EAAD,CAA4BC,KAAMV,IAClC,cAACW,EAAA,EAAD,CAAkBD,KAAMT,OAE1B,eAAC,IAAD,CAAQjB,WAAYgB,IAAUC,EAA9B,UACE,cAAC,EAAD,CACEtC,cAAa,UAAEyC,EAAYQ,WAAWjC,gBAAzB,QAAqC,GAClDf,YAAawC,EAAYQ,WAAWC,UACpChD,cAAe,OACfC,YAAasC,EAAYU,WACzB/C,UAAU,EACVC,OAAQsB,EACRrB,UAAWmC,EAAYnC,YAEzB,cAAC,IAAD,CACE8C,aAAc,wBACdb,gBAAiBA,EACjBR,qBAAsBA,EACtBG,oBAAqBA,EACrBmB,aAAcC,IAAaC,kBAOtB7B","file":"static/js/documentReadOnly.24727551.chunk.js","sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { DateTime } from 'luxon'\nimport React from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { InternalLink } from '../common/links/internal-link'\nimport { ShowIf } from '../common/show-if/show-if'\nimport {\n  DocumentInfoLineWithTimeMode,\n  DocumentInfoTimeLine\n} from '../editor-page/document-bar/document-info/document-info-time-line'\nimport './document-infobar.scss'\nimport { useCustomizeAssetsUrl } from '../../hooks/common/use-customize-assets-url'\n\nexport interface DocumentInfobarProps {\n  changedAuthor: string\n  changedTime: DateTime\n  createdAuthor: string\n  createdTime: DateTime\n  editable: boolean\n  noteId: string\n  viewCount: number\n}\n\nexport const DocumentInfobar: React.FC<DocumentInfobarProps> = ({\n  changedAuthor,\n  changedTime,\n  createdAuthor,\n  createdTime,\n  editable,\n  noteId,\n  viewCount\n}) => {\n  const { t } = useTranslation()\n  const assetsBaseUrl = useCustomizeAssetsUrl()\n\n  return (\n    <div className={'d-flex flex-row my-3 document-infobar'}>\n      <div className={'col-md'}>&nbsp;</div>\n      <div className={'d-flex flex-fill'}>\n        <div className={'d-flex flex-column'}>\n          <DocumentInfoTimeLine\n            mode={DocumentInfoLineWithTimeMode.CREATED}\n            time={createdTime}\n            userName={createdAuthor}\n            profileImageSrc={`${assetsBaseUrl}/img/avatar.png`}\n          />\n          <DocumentInfoTimeLine\n            mode={DocumentInfoLineWithTimeMode.EDITED}\n            time={changedTime}\n            userName={changedAuthor}\n            profileImageSrc={`${assetsBaseUrl}/img/avatar.png`}\n          />\n          <hr />\n        </div>\n        <span className={'ml-auto'}>\n          {viewCount} <Trans i18nKey={'views.readOnly.viewCount'} />\n          <ShowIf condition={editable}>\n            <InternalLink\n              text={''}\n              href={`/n/${noteId}`}\n              icon={'pencil'}\n              className={'text-primary text-decoration-none mx-1'}\n              title={t('views.readOnly.editNote')}\n            />\n          </ShowIf>\n        </span>\n      </div>\n      <div className={'col-md'}>&nbsp;</div>\n    </div>\n  )\n}\n","/*\n * SPDX-FileCopyrightText: 2021 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useParams } from 'react-router'\nimport { useApplyDarkMode } from '../../hooks/common/use-apply-dark-mode'\nimport { useDocumentTitleWithNoteTitle } from '../../hooks/common/use-document-title-with-note-title'\nimport { useNoteMarkdownContent } from '../../hooks/common/use-note-markdown-content'\nimport { setNoteFrontmatter, updateNoteTitleByFirstHeading } from '../../redux/note-details/methods'\nimport { MotdBanner } from '../common/motd-banner/motd-banner'\nimport { ShowIf } from '../common/show-if/show-if'\nimport { AppBar, AppBarMode } from '../editor-page/app-bar/app-bar'\nimport { EditorPagePathParams } from '../editor-page/editor-page'\nimport { useLoadNoteFromServer } from '../editor-page/hooks/useLoadNoteFromServer'\nimport { RenderIframe } from '../editor-page/renderer-pane/render-iframe'\nimport { DocumentInfobar } from './document-infobar'\nimport { ErrorWhileLoadingNoteAlert } from './ErrorWhileLoadingNoteAlert'\nimport { LoadingNoteAlert } from './LoadingNoteAlert'\nimport { RendererType } from '../render-page/rendering-message'\nimport { useApplicationState } from '../../hooks/common/use-application-state'\n\nexport const DocumentReadOnlyPage: React.FC = () => {\n  useTranslation()\n  const { id } = useParams<EditorPagePathParams>()\n\n  useApplyDarkMode()\n  useDocumentTitleWithNoteTitle()\n\n  const onFirstHeadingChange = useCallback(updateNoteTitleByFirstHeading, [])\n  const onFrontmatterChange = useCallback(setNoteFrontmatter, [])\n  const [error, loading] = useLoadNoteFromServer()\n  const markdownContent = useNoteMarkdownContent()\n  const noteDetails = useApplicationState((state) => state.noteDetails)\n\n  return (\n    <div className={'d-flex flex-column mvh-100 bg-light'}>\n      <MotdBanner />\n      <AppBar mode={AppBarMode.BASIC} />\n      <div className={'container'}>\n        <ErrorWhileLoadingNoteAlert show={error} />\n        <LoadingNoteAlert show={loading} />\n      </div>\n      <ShowIf condition={!error && !loading}>\n        <DocumentInfobar\n          changedAuthor={noteDetails.lastChange.userName ?? ''}\n          changedTime={noteDetails.lastChange.timestamp}\n          createdAuthor={'Test'}\n          createdTime={noteDetails.createTime}\n          editable={true}\n          noteId={id}\n          viewCount={noteDetails.viewCount}\n        />\n        <RenderIframe\n          frameClasses={'flex-fill h-100 w-100'}\n          markdownContent={markdownContent}\n          onFirstHeadingChange={onFirstHeadingChange}\n          onFrontmatterChange={onFrontmatterChange}\n          rendererType={RendererType.DOCUMENT}\n        />\n      </ShowIf>\n    </div>\n  )\n}\n\nexport default DocumentReadOnlyPage\n"],"sourceRoot":""}